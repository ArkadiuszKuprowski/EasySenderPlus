//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.18444
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace easyDMSTool.Doc4SOAP {
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(Namespace="http://xml.otris.de/ws/DOCUMENTS-4.0.wsdl", ConfigurationName="Doc4SOAP.DOCUMENTSPortType")]
    public interface DOCUMENTSPortType {
        
        // CODEGEN: Generating message contract since the wrapper namespace (http://xml.otris.de/ws/DOCUMENTS.xsd) of message loginRequest does not match the default value (http://xml.otris.de/ws/DOCUMENTS-4.0.wsdl)
        [System.ServiceModel.OperationContractAttribute(Action="http://xml.otris.de/ws/DOCUMENTS.wsdl#login", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        easyDMSTool.Doc4SOAP.loginResponse login(easyDMSTool.Doc4SOAP.loginRequest request);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://xml.otris.de/ws/DOCUMENTS.wsdl#login", ReplyAction="*")]
        System.IAsyncResult Beginlogin(easyDMSTool.Doc4SOAP.loginRequest request, System.AsyncCallback callback, object asyncState);
        
        easyDMSTool.Doc4SOAP.loginResponse Endlogin(System.IAsyncResult result);
        
        // CODEGEN: Generating message contract since the wrapper namespace (http://xml.otris.de/ws/DOCUMENTS.xsd) of message trustedLoginRequest does not match the default value (http://xml.otris.de/ws/DOCUMENTS-4.0.wsdl)
        [System.ServiceModel.OperationContractAttribute(Action="http://xml.otris.de/ws/DOCUMENTS.wsdl#trustedLogin", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        easyDMSTool.Doc4SOAP.trustedLoginResponse trustedLogin(easyDMSTool.Doc4SOAP.trustedLoginRequest request);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://xml.otris.de/ws/DOCUMENTS.wsdl#trustedLogin", ReplyAction="*")]
        System.IAsyncResult BegintrustedLogin(easyDMSTool.Doc4SOAP.trustedLoginRequest request, System.AsyncCallback callback, object asyncState);
        
        easyDMSTool.Doc4SOAP.trustedLoginResponse EndtrustedLogin(System.IAsyncResult result);
        
        // CODEGEN: Generating message contract since the wrapper namespace (http://xml.otris.de/ws/DOCUMENTS.xsd) of message logoutRequest does not match the default value (http://xml.otris.de/ws/DOCUMENTS-4.0.wsdl)
        [System.ServiceModel.OperationContractAttribute(Action="http://xml.otris.de/ws/DOCUMENTS.wsdl#logout", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        easyDMSTool.Doc4SOAP.logoutResponse logout(easyDMSTool.Doc4SOAP.logoutRequest request);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://xml.otris.de/ws/DOCUMENTS.wsdl#logout", ReplyAction="*")]
        System.IAsyncResult Beginlogout(easyDMSTool.Doc4SOAP.logoutRequest request, System.AsyncCallback callback, object asyncState);
        
        easyDMSTool.Doc4SOAP.logoutResponse Endlogout(System.IAsyncResult result);
        
        // CODEGEN: Generating message contract since the wrapper namespace (http://xml.otris.de/ws/DOCUMENTS.xsd) of message testSessionRequest does not match the default value (http://xml.otris.de/ws/DOCUMENTS-4.0.wsdl)
        [System.ServiceModel.OperationContractAttribute(Action="http://xml.otris.de/ws/DOCUMENTS.wsdl#testSession", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        easyDMSTool.Doc4SOAP.testSessionResponse testSession(easyDMSTool.Doc4SOAP.testSessionRequest request);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://xml.otris.de/ws/DOCUMENTS.wsdl#testSession", ReplyAction="*")]
        System.IAsyncResult BegintestSession(easyDMSTool.Doc4SOAP.testSessionRequest request, System.AsyncCallback callback, object asyncState);
        
        easyDMSTool.Doc4SOAP.testSessionResponse EndtestSession(System.IAsyncResult result);
        
        // CODEGEN: Generating message contract since the wrapper namespace (http://xml.otris.de/ws/DOCUMENTS.xsd) of message getInboxRequest does not match the default value (http://xml.otris.de/ws/DOCUMENTS-4.0.wsdl)
        [System.ServiceModel.OperationContractAttribute(Action="http://xml.otris.de/ws/DOCUMENTS.wsdl#getInbox", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        easyDMSTool.Doc4SOAP.getInboxResponse getInbox(easyDMSTool.Doc4SOAP.getInboxRequest request);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://xml.otris.de/ws/DOCUMENTS.wsdl#getInbox", ReplyAction="*")]
        System.IAsyncResult BegingetInbox(easyDMSTool.Doc4SOAP.getInboxRequest request, System.AsyncCallback callback, object asyncState);
        
        easyDMSTool.Doc4SOAP.getInboxResponse EndgetInbox(System.IAsyncResult result);
        
        // CODEGEN: Generating message contract since the wrapper namespace (http://xml.otris.de/ws/DOCUMENTS.xsd) of message getSentFolderRequest does not match the default value (http://xml.otris.de/ws/DOCUMENTS-4.0.wsdl)
        [System.ServiceModel.OperationContractAttribute(Action="http://xml.otris.de/ws/DOCUMENTS.wsdl#getSentFolder", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        easyDMSTool.Doc4SOAP.getSentFolderResponse getSentFolder(easyDMSTool.Doc4SOAP.getSentFolderRequest request);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://xml.otris.de/ws/DOCUMENTS.wsdl#getSentFolder", ReplyAction="*")]
        System.IAsyncResult BegingetSentFolder(easyDMSTool.Doc4SOAP.getSentFolderRequest request, System.AsyncCallback callback, object asyncState);
        
        easyDMSTool.Doc4SOAP.getSentFolderResponse EndgetSentFolder(System.IAsyncResult result);
        
        // CODEGEN: Generating message contract since the wrapper namespace (http://xml.otris.de/ws/DOCUMENTS.xsd) of message getTasksRequest does not match the default value (http://xml.otris.de/ws/DOCUMENTS-4.0.wsdl)
        [System.ServiceModel.OperationContractAttribute(Action="http://xml.otris.de/ws/DOCUMENTS.wsdl#getTasks", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        easyDMSTool.Doc4SOAP.getTasksResponse getTasks(easyDMSTool.Doc4SOAP.getTasksRequest request);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://xml.otris.de/ws/DOCUMENTS.wsdl#getTasks", ReplyAction="*")]
        System.IAsyncResult BegingetTasks(easyDMSTool.Doc4SOAP.getTasksRequest request, System.AsyncCallback callback, object asyncState);
        
        easyDMSTool.Doc4SOAP.getTasksResponse EndgetTasks(System.IAsyncResult result);
        
        // CODEGEN: Generating message contract since the wrapper namespace (http://xml.otris.de/ws/DOCUMENTS.xsd) of message getMonitorRequest does not match the default value (http://xml.otris.de/ws/DOCUMENTS-4.0.wsdl)
        [System.ServiceModel.OperationContractAttribute(Action="http://xml.otris.de/ws/DOCUMENTS.wsdl#getMonitor", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        easyDMSTool.Doc4SOAP.getMonitorResponse getMonitor(easyDMSTool.Doc4SOAP.getMonitorRequest request);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://xml.otris.de/ws/DOCUMENTS.wsdl#getMonitor", ReplyAction="*")]
        System.IAsyncResult BegingetMonitor(easyDMSTool.Doc4SOAP.getMonitorRequest request, System.AsyncCallback callback, object asyncState);
        
        easyDMSTool.Doc4SOAP.getMonitorResponse EndgetMonitor(System.IAsyncResult result);
        
        // CODEGEN: Generating message contract since the wrapper namespace (http://xml.otris.de/ws/DOCUMENTS.xsd) of message getWorkflowStepsRequest does not match the default value (http://xml.otris.de/ws/DOCUMENTS-4.0.wsdl)
        [System.ServiceModel.OperationContractAttribute(Action="http://xml.otris.de/ws/DOCUMENTS.wsdl#getWorkflowSteps", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        easyDMSTool.Doc4SOAP.getWorkflowStepsResponse getWorkflowSteps(easyDMSTool.Doc4SOAP.getWorkflowStepsRequest request);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://xml.otris.de/ws/DOCUMENTS.wsdl#getWorkflowSteps", ReplyAction="*")]
        System.IAsyncResult BegingetWorkflowSteps(easyDMSTool.Doc4SOAP.getWorkflowStepsRequest request, System.AsyncCallback callback, object asyncState);
        
        easyDMSTool.Doc4SOAP.getWorkflowStepsResponse EndgetWorkflowSteps(System.IAsyncResult result);
        
        // CODEGEN: Generating message contract since the wrapper namespace (http://xml.otris.de/ws/DOCUMENTS.xsd) of message getWorkflowPatternRequest does not match the default value (http://xml.otris.de/ws/DOCUMENTS-4.0.wsdl)
        [System.ServiceModel.OperationContractAttribute(Action="http://xml.otris.de/ws/DOCUMENTS.wsdl#getWorkflowPattern", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        easyDMSTool.Doc4SOAP.getWorkflowPatternResponse getWorkflowPattern(easyDMSTool.Doc4SOAP.getWorkflowPatternRequest request);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://xml.otris.de/ws/DOCUMENTS.wsdl#getWorkflowPattern", ReplyAction="*")]
        System.IAsyncResult BegingetWorkflowPattern(easyDMSTool.Doc4SOAP.getWorkflowPatternRequest request, System.AsyncCallback callback, object asyncState);
        
        easyDMSTool.Doc4SOAP.getWorkflowPatternResponse EndgetWorkflowPattern(System.IAsyncResult result);
        
        // CODEGEN: Generating message contract since the wrapper namespace (http://xml.otris.de/ws/DOCUMENTS.xsd) of message startWorkflowRequest does not match the default value (http://xml.otris.de/ws/DOCUMENTS-4.0.wsdl)
        [System.ServiceModel.OperationContractAttribute(Action="http://xml.otris.de/ws/DOCUMENTS.wsdl#startWorkflow", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        easyDMSTool.Doc4SOAP.startWorkflowResponse startWorkflow(easyDMSTool.Doc4SOAP.startWorkflowRequest request);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://xml.otris.de/ws/DOCUMENTS.wsdl#startWorkflow", ReplyAction="*")]
        System.IAsyncResult BeginstartWorkflow(easyDMSTool.Doc4SOAP.startWorkflowRequest request, System.AsyncCallback callback, object asyncState);
        
        easyDMSTool.Doc4SOAP.startWorkflowResponse EndstartWorkflow(System.IAsyncResult result);
        
        // CODEGEN: Generating message contract since the wrapper namespace (http://xml.otris.de/ws/DOCUMENTS.xsd) of message cancelWorkflowRequest does not match the default value (http://xml.otris.de/ws/DOCUMENTS-4.0.wsdl)
        [System.ServiceModel.OperationContractAttribute(Action="http://xml.otris.de/ws/DOCUMENTS.wsdl#cancelWorkflow", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        easyDMSTool.Doc4SOAP.cancelWorkflowResponse cancelWorkflow(easyDMSTool.Doc4SOAP.cancelWorkflowRequest request);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://xml.otris.de/ws/DOCUMENTS.wsdl#cancelWorkflow", ReplyAction="*")]
        System.IAsyncResult BegincancelWorkflow(easyDMSTool.Doc4SOAP.cancelWorkflowRequest request, System.AsyncCallback callback, object asyncState);
        
        easyDMSTool.Doc4SOAP.cancelWorkflowResponse EndcancelWorkflow(System.IAsyncResult result);
        
        // CODEGEN: Generating message contract since the wrapper namespace (http://xml.otris.de/ws/DOCUMENTS.xsd) of message getAutoTextRequest does not match the default value (http://xml.otris.de/ws/DOCUMENTS-4.0.wsdl)
        [System.ServiceModel.OperationContractAttribute(Action="http://xml.otris.de/ws/DOCUMENTS.wsdl#getAutoText", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        easyDMSTool.Doc4SOAP.getAutoTextResponse getAutoText(easyDMSTool.Doc4SOAP.getAutoTextRequest request);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://xml.otris.de/ws/DOCUMENTS.wsdl#getAutoText", ReplyAction="*")]
        System.IAsyncResult BegingetAutoText(easyDMSTool.Doc4SOAP.getAutoTextRequest request, System.AsyncCallback callback, object asyncState);
        
        easyDMSTool.Doc4SOAP.getAutoTextResponse EndgetAutoText(System.IAsyncResult result);
        
        // CODEGEN: Generating message contract since the wrapper namespace (http://xml.otris.de/ws/DOCUMENTS.xsd) of message getPropertyRequest does not match the default value (http://xml.otris.de/ws/DOCUMENTS-4.0.wsdl)
        [System.ServiceModel.OperationContractAttribute(Action="http://xml.otris.de/ws/DOCUMENTS.wsdl#getProperty", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        easyDMSTool.Doc4SOAP.getPropertyResponse getProperty(easyDMSTool.Doc4SOAP.getPropertyRequest request);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://xml.otris.de/ws/DOCUMENTS.wsdl#getProperty", ReplyAction="*")]
        System.IAsyncResult BegingetProperty(easyDMSTool.Doc4SOAP.getPropertyRequest request, System.AsyncCallback callback, object asyncState);
        
        easyDMSTool.Doc4SOAP.getPropertyResponse EndgetProperty(System.IAsyncResult result);
        
        // CODEGEN: Generating message contract since the wrapper namespace (http://xml.otris.de/ws/DOCUMENTS.xsd) of message getFileInfoRequest does not match the default value (http://xml.otris.de/ws/DOCUMENTS-4.0.wsdl)
        [System.ServiceModel.OperationContractAttribute(Action="http://xml.otris.de/ws/DOCUMENTS.wsdl#getFileInfo", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        easyDMSTool.Doc4SOAP.getFileInfoResponse getFileInfo(easyDMSTool.Doc4SOAP.getFileInfoRequest request);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://xml.otris.de/ws/DOCUMENTS.wsdl#getFileInfo", ReplyAction="*")]
        System.IAsyncResult BegingetFileInfo(easyDMSTool.Doc4SOAP.getFileInfoRequest request, System.AsyncCallback callback, object asyncState);
        
        easyDMSTool.Doc4SOAP.getFileInfoResponse EndgetFileInfo(System.IAsyncResult result);
        
        // CODEGEN: Generating message contract since the wrapper namespace (http://xml.otris.de/ws/DOCUMENTS.xsd) of message getFilesInfoRequest does not match the default value (http://xml.otris.de/ws/DOCUMENTS-4.0.wsdl)
        [System.ServiceModel.OperationContractAttribute(Action="http://xml.otris.de/ws/DOCUMENTS.wsdl#getFileInfo", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        easyDMSTool.Doc4SOAP.getFilesInfoResponse getFilesInfo(easyDMSTool.Doc4SOAP.getFilesInfoRequest request);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://xml.otris.de/ws/DOCUMENTS.wsdl#getFileInfo", ReplyAction="*")]
        System.IAsyncResult BegingetFilesInfo(easyDMSTool.Doc4SOAP.getFilesInfoRequest request, System.AsyncCallback callback, object asyncState);
        
        easyDMSTool.Doc4SOAP.getFilesInfoResponse EndgetFilesInfo(System.IAsyncResult result);
        
        // CODEGEN: Generating message contract since the wrapper namespace (http://xml.otris.de/ws/DOCUMENTS.xsd) of message reportRequest does not match the default value (http://xml.otris.de/ws/DOCUMENTS-4.0.wsdl)
        [System.ServiceModel.OperationContractAttribute(Action="http://xml.otris.de/ws/DOCUMENTS.wsdl#report", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        easyDMSTool.Doc4SOAP.reportResponse report(easyDMSTool.Doc4SOAP.reportRequest request);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://xml.otris.de/ws/DOCUMENTS.wsdl#report", ReplyAction="*")]
        System.IAsyncResult Beginreport(easyDMSTool.Doc4SOAP.reportRequest request, System.AsyncCallback callback, object asyncState);
        
        easyDMSTool.Doc4SOAP.reportResponse Endreport(System.IAsyncResult result);
        
        // CODEGEN: Generating message contract since the wrapper namespace (http://xml.otris.de/ws/DOCUMENTS.xsd) of message report2Request does not match the default value (http://xml.otris.de/ws/DOCUMENTS-4.0.wsdl)
        [System.ServiceModel.OperationContractAttribute(Action="http://xml.otris.de/ws/DOCUMENTS.wsdl#report2", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        easyDMSTool.Doc4SOAP.report2Response report2(easyDMSTool.Doc4SOAP.report2Request request);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://xml.otris.de/ws/DOCUMENTS.wsdl#report2", ReplyAction="*")]
        System.IAsyncResult Beginreport2(easyDMSTool.Doc4SOAP.report2Request request, System.AsyncCallback callback, object asyncState);
        
        easyDMSTool.Doc4SOAP.report2Response Endreport2(System.IAsyncResult result);
        
        // CODEGEN: Generating message contract since the wrapper namespace (http://xml.otris.de/ws/DOCUMENTS.xsd) of message report3Request does not match the default value (http://xml.otris.de/ws/DOCUMENTS-4.0.wsdl)
        [System.ServiceModel.OperationContractAttribute(Action="http://xml.otris.de/ws/DOCUMENTS.wsdl#report3", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        easyDMSTool.Doc4SOAP.report3Response report3(easyDMSTool.Doc4SOAP.report3Request request);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://xml.otris.de/ws/DOCUMENTS.wsdl#report3", ReplyAction="*")]
        System.IAsyncResult Beginreport3(easyDMSTool.Doc4SOAP.report3Request request, System.AsyncCallback callback, object asyncState);
        
        easyDMSTool.Doc4SOAP.report3Response Endreport3(System.IAsyncResult result);
        
        // CODEGEN: Generating message contract since the wrapper namespace (http://xml.otris.de/ws/DOCUMENTS.xsd) of message getDocumentRequest does not match the default value (http://xml.otris.de/ws/DOCUMENTS-4.0.wsdl)
        [System.ServiceModel.OperationContractAttribute(Action="http://xml.otris.de/ws/DOCUMENTS.wsdl#getDocument", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        easyDMSTool.Doc4SOAP.getDocumentResponse getDocument(easyDMSTool.Doc4SOAP.getDocumentRequest request);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://xml.otris.de/ws/DOCUMENTS.wsdl#getDocument", ReplyAction="*")]
        System.IAsyncResult BegingetDocument(easyDMSTool.Doc4SOAP.getDocumentRequest request, System.AsyncCallback callback, object asyncState);
        
        easyDMSTool.Doc4SOAP.getDocumentResponse EndgetDocument(System.IAsyncResult result);
        
        // CODEGEN: Generating message contract since the wrapper namespace (http://xml.otris.de/ws/DOCUMENTS.xsd) of message editFileRequest does not match the default value (http://xml.otris.de/ws/DOCUMENTS-4.0.wsdl)
        [System.ServiceModel.OperationContractAttribute(Action="http://xml.otris.de/ws/DOCUMENTS.wsdl#editFile", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        easyDMSTool.Doc4SOAP.editFileResponse editFile(easyDMSTool.Doc4SOAP.editFileRequest request);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://xml.otris.de/ws/DOCUMENTS.wsdl#editFile", ReplyAction="*")]
        System.IAsyncResult BegineditFile(easyDMSTool.Doc4SOAP.editFileRequest request, System.AsyncCallback callback, object asyncState);
        
        easyDMSTool.Doc4SOAP.editFileResponse EndeditFile(System.IAsyncResult result);
        
        // CODEGEN: Generating message contract since the wrapper namespace (http://xml.otris.de/ws/DOCUMENTS.xsd) of message createFileRequest does not match the default value (http://xml.otris.de/ws/DOCUMENTS-4.0.wsdl)
        [System.ServiceModel.OperationContractAttribute(Action="http://xml.otris.de/ws/DOCUMENTS.wsdl#createFile", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        easyDMSTool.Doc4SOAP.createFileResponse createFile(easyDMSTool.Doc4SOAP.createFileRequest request);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://xml.otris.de/ws/DOCUMENTS.wsdl#createFile", ReplyAction="*")]
        System.IAsyncResult BegincreateFile(easyDMSTool.Doc4SOAP.createFileRequest request, System.AsyncCallback callback, object asyncState);
        
        easyDMSTool.Doc4SOAP.createFileResponse EndcreateFile(System.IAsyncResult result);
        
        // CODEGEN: Generating message contract since the wrapper namespace (http://xml.otris.de/ws/DOCUMENTS.xsd) of message createFile2Request does not match the default value (http://xml.otris.de/ws/DOCUMENTS-4.0.wsdl)
        [System.ServiceModel.OperationContractAttribute(Action="http://xml.otris.de/ws/DOCUMENTS.wsdl#createFile2", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        easyDMSTool.Doc4SOAP.createFile2Response createFile2(easyDMSTool.Doc4SOAP.createFile2Request request);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://xml.otris.de/ws/DOCUMENTS.wsdl#createFile2", ReplyAction="*")]
        System.IAsyncResult BegincreateFile2(easyDMSTool.Doc4SOAP.createFile2Request request, System.AsyncCallback callback, object asyncState);
        
        easyDMSTool.Doc4SOAP.createFile2Response EndcreateFile2(System.IAsyncResult result);
        
        // CODEGEN: Generating message contract since the wrapper namespace (http://xml.otris.de/ws/DOCUMENTS.xsd) of message getFileTypesRequest does not match the default value (http://xml.otris.de/ws/DOCUMENTS-4.0.wsdl)
        [System.ServiceModel.OperationContractAttribute(Action="http://xml.otris.de/ws/DOCUMENTS.wsdl#getFileTypes", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        easyDMSTool.Doc4SOAP.getFileTypesResponse getFileTypes(easyDMSTool.Doc4SOAP.getFileTypesRequest request);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://xml.otris.de/ws/DOCUMENTS.wsdl#getFileTypes", ReplyAction="*")]
        System.IAsyncResult BegingetFileTypes(easyDMSTool.Doc4SOAP.getFileTypesRequest request, System.AsyncCallback callback, object asyncState);
        
        easyDMSTool.Doc4SOAP.getFileTypesResponse EndgetFileTypes(System.IAsyncResult result);
        
        // CODEGEN: Generating message contract since the wrapper namespace (http://xml.otris.de/ws/DOCUMENTS.xsd) of message describeFileTypeRequest does not match the default value (http://xml.otris.de/ws/DOCUMENTS-4.0.wsdl)
        [System.ServiceModel.OperationContractAttribute(Action="http://xml.otris.de/ws/DOCUMENTS.wsdl#describeFileType", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        easyDMSTool.Doc4SOAP.describeFileTypeResponse describeFileType(easyDMSTool.Doc4SOAP.describeFileTypeRequest request);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://xml.otris.de/ws/DOCUMENTS.wsdl#describeFileType", ReplyAction="*")]
        System.IAsyncResult BegindescribeFileType(easyDMSTool.Doc4SOAP.describeFileTypeRequest request, System.AsyncCallback callback, object asyncState);
        
        easyDMSTool.Doc4SOAP.describeFileTypeResponse EnddescribeFileType(System.IAsyncResult result);
        
        // CODEGEN: Generating message contract since the wrapper namespace (http://xml.otris.de/ws/DOCUMENTS.xsd) of message describeFileType2Request does not match the default value (http://xml.otris.de/ws/DOCUMENTS-4.0.wsdl)
        [System.ServiceModel.OperationContractAttribute(Action="http://xml.otris.de/ws/DOCUMENTS.wsdl#describeFileType2", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        easyDMSTool.Doc4SOAP.describeFileType2Response describeFileType2(easyDMSTool.Doc4SOAP.describeFileType2Request request);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://xml.otris.de/ws/DOCUMENTS.wsdl#describeFileType2", ReplyAction="*")]
        System.IAsyncResult BegindescribeFileType2(easyDMSTool.Doc4SOAP.describeFileType2Request request, System.AsyncCallback callback, object asyncState);
        
        easyDMSTool.Doc4SOAP.describeFileType2Response EnddescribeFileType2(System.IAsyncResult result);
        
        // CODEGEN: Generating message contract since the wrapper namespace (http://xml.otris.de/ws/DOCUMENTS.xsd) of message browseFolderRequest does not match the default value (http://xml.otris.de/ws/DOCUMENTS-4.0.wsdl)
        [System.ServiceModel.OperationContractAttribute(Action="http://xml.otris.de/ws/DOCUMENTS.wsdl#browseFolder", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        easyDMSTool.Doc4SOAP.browseFolderResponse browseFolder(easyDMSTool.Doc4SOAP.browseFolderRequest request);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://xml.otris.de/ws/DOCUMENTS.wsdl#browseFolder", ReplyAction="*")]
        System.IAsyncResult BeginbrowseFolder(easyDMSTool.Doc4SOAP.browseFolderRequest request, System.AsyncCallback callback, object asyncState);
        
        easyDMSTool.Doc4SOAP.browseFolderResponse EndbrowseFolder(System.IAsyncResult result);
        
        // CODEGEN: Generating message contract since the wrapper namespace (http://xml.otris.de/ws/DOCUMENTS.xsd) of message getFolderStructureRequest does not match the default value (http://xml.otris.de/ws/DOCUMENTS-4.0.wsdl)
        [System.ServiceModel.OperationContractAttribute(Action="http://xml.otris.de/ws/DOCUMENTS.wsdl#getFolderStructure", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        easyDMSTool.Doc4SOAP.getFolderStructureResponse getFolderStructure(easyDMSTool.Doc4SOAP.getFolderStructureRequest request);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://xml.otris.de/ws/DOCUMENTS.wsdl#getFolderStructure", ReplyAction="*")]
        System.IAsyncResult BegingetFolderStructure(easyDMSTool.Doc4SOAP.getFolderStructureRequest request, System.AsyncCallback callback, object asyncState);
        
        easyDMSTool.Doc4SOAP.getFolderStructureResponse EndgetFolderStructure(System.IAsyncResult result);
        
        // CODEGEN: Generating message contract since the wrapper namespace (http://xml.otris.de/ws/DOCUMENTS.xsd) of message runScriptRequest does not match the default value (http://xml.otris.de/ws/DOCUMENTS-4.0.wsdl)
        [System.ServiceModel.OperationContractAttribute(Action="http://xml.otris.de/ws/DOCUMENTS.wsdl#runScript", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        easyDMSTool.Doc4SOAP.runScriptResponse runScript(easyDMSTool.Doc4SOAP.runScriptRequest request);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://xml.otris.de/ws/DOCUMENTS.wsdl#runScript", ReplyAction="*")]
        System.IAsyncResult BeginrunScript(easyDMSTool.Doc4SOAP.runScriptRequest request, System.AsyncCallback callback, object asyncState);
        
        easyDMSTool.Doc4SOAP.runScriptResponse EndrunScript(System.IAsyncResult result);
        
        // CODEGEN: Generating message contract since the wrapper namespace (http://xml.otris.de/ws/DOCUMENTS.xsd) of message userInfoRequest does not match the default value (http://xml.otris.de/ws/DOCUMENTS-4.0.wsdl)
        [System.ServiceModel.OperationContractAttribute(Action="http://xml.otris.de/ws/DOCUMENTS.wsdl#userInfo", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        easyDMSTool.Doc4SOAP.userInfoResponse userInfo(easyDMSTool.Doc4SOAP.userInfoRequest request);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://xml.otris.de/ws/DOCUMENTS.wsdl#userInfo", ReplyAction="*")]
        System.IAsyncResult BeginuserInfo(easyDMSTool.Doc4SOAP.userInfoRequest request, System.AsyncCallback callback, object asyncState);
        
        easyDMSTool.Doc4SOAP.userInfoResponse EnduserInfo(System.IAsyncResult result);
        
        // CODEGEN: Generating message contract since the wrapper namespace (http://xml.otris.de/ws/DOCUMENTS.xsd) of message archiveFilesRequest does not match the default value (http://xml.otris.de/ws/DOCUMENTS-4.0.wsdl)
        [System.ServiceModel.OperationContractAttribute(Action="http://xml.otris.de/ws/DOCUMENTS.wsdl#archiveFiles", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        easyDMSTool.Doc4SOAP.archiveFilesResponse archiveFiles(easyDMSTool.Doc4SOAP.archiveFilesRequest request);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://xml.otris.de/ws/DOCUMENTS.wsdl#archiveFiles", ReplyAction="*")]
        System.IAsyncResult BeginarchiveFiles(easyDMSTool.Doc4SOAP.archiveFilesRequest request, System.AsyncCallback callback, object asyncState);
        
        easyDMSTool.Doc4SOAP.archiveFilesResponse EndarchiveFiles(System.IAsyncResult result);
        
        // CODEGEN: Generating message contract since the wrapper namespace (http://xml.otris.de/ws/DOCUMENTS.xsd) of message deleteFilesRequest does not match the default value (http://xml.otris.de/ws/DOCUMENTS-4.0.wsdl)
        [System.ServiceModel.OperationContractAttribute(Action="http://xml.otris.de/ws/DOCUMENTS.wsdl#deleteFiles", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        easyDMSTool.Doc4SOAP.deleteFilesResponse deleteFiles(easyDMSTool.Doc4SOAP.deleteFilesRequest request);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://xml.otris.de/ws/DOCUMENTS.wsdl#deleteFiles", ReplyAction="*")]
        System.IAsyncResult BegindeleteFiles(easyDMSTool.Doc4SOAP.deleteFilesRequest request, System.AsyncCallback callback, object asyncState);
        
        easyDMSTool.Doc4SOAP.deleteFilesResponse EnddeleteFiles(System.IAsyncResult result);
        
        // CODEGEN: Generating message contract since the wrapper namespace (http://xml.otris.de/ws/DOCUMENTS.xsd) of message deleteDocumentsRequest does not match the default value (http://xml.otris.de/ws/DOCUMENTS-4.0.wsdl)
        [System.ServiceModel.OperationContractAttribute(Action="http://xml.otris.de/ws/DOCUMENTS.wsdl#deleteDocuments", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        easyDMSTool.Doc4SOAP.deleteDocumentsResponse deleteDocuments(easyDMSTool.Doc4SOAP.deleteDocumentsRequest request);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://xml.otris.de/ws/DOCUMENTS.wsdl#deleteDocuments", ReplyAction="*")]
        System.IAsyncResult BegindeleteDocuments(easyDMSTool.Doc4SOAP.deleteDocumentsRequest request, System.AsyncCallback callback, object asyncState);
        
        easyDMSTool.Doc4SOAP.deleteDocumentsResponse EnddeleteDocuments(System.IAsyncResult result);
        
        // CODEGEN: Generating message contract since the wrapper namespace (http://xml.otris.de/ws/DOCUMENTS.xsd) of message listPossibleActionsRequest does not match the default value (http://xml.otris.de/ws/DOCUMENTS-4.0.wsdl)
        [System.ServiceModel.OperationContractAttribute(Action="http://xml.otris.de/ws/DOCUMENTS.wsdl#listPossibleActions", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        easyDMSTool.Doc4SOAP.listPossibleActionsResponse listPossibleActions(easyDMSTool.Doc4SOAP.listPossibleActionsRequest request);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://xml.otris.de/ws/DOCUMENTS.wsdl#listPossibleActions", ReplyAction="*")]
        System.IAsyncResult BeginlistPossibleActions(easyDMSTool.Doc4SOAP.listPossibleActionsRequest request, System.AsyncCallback callback, object asyncState);
        
        easyDMSTool.Doc4SOAP.listPossibleActionsResponse EndlistPossibleActions(System.IAsyncResult result);
        
        // CODEGEN: Generating message contract since the wrapper namespace (http://xml.otris.de/ws/DOCUMENTS.xsd) of message triggerActionRequest does not match the default value (http://xml.otris.de/ws/DOCUMENTS-4.0.wsdl)
        [System.ServiceModel.OperationContractAttribute(Action="http://xml.otris.de/ws/DOCUMENTS.wsdl#triggerAction", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        easyDMSTool.Doc4SOAP.triggerActionResponse triggerAction(easyDMSTool.Doc4SOAP.triggerActionRequest request);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://xml.otris.de/ws/DOCUMENTS.wsdl#triggerAction", ReplyAction="*")]
        System.IAsyncResult BegintriggerAction(easyDMSTool.Doc4SOAP.triggerActionRequest request, System.AsyncCallback callback, object asyncState);
        
        easyDMSTool.Doc4SOAP.triggerActionResponse EndtriggerAction(System.IAsyncResult result);
        
        // CODEGEN: Generating message contract since the wrapper namespace (http://xml.otris.de/ws/DOCUMENTS.xsd) of message followUpRequest does not match the default value (http://xml.otris.de/ws/DOCUMENTS-4.0.wsdl)
        [System.ServiceModel.OperationContractAttribute(Action="http://xml.otris.de/ws/DOCUMENTS.wsdl#followUp", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        easyDMSTool.Doc4SOAP.followUpResponse followUp(easyDMSTool.Doc4SOAP.followUpRequest request);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://xml.otris.de/ws/DOCUMENTS.wsdl#followUp", ReplyAction="*")]
        System.IAsyncResult BeginfollowUp(easyDMSTool.Doc4SOAP.followUpRequest request, System.AsyncCallback callback, object asyncState);
        
        easyDMSTool.Doc4SOAP.followUpResponse EndfollowUp(System.IAsyncResult result);
        
        // CODEGEN: Generating message contract since the wrapper namespace (http://xml.otris.de/ws/DOCUMENTS.xsd) of message sendFileAdHocRequest does not match the default value (http://xml.otris.de/ws/DOCUMENTS-4.0.wsdl)
        [System.ServiceModel.OperationContractAttribute(Action="http://xml.otris.de/ws/DOCUMENTS.wsdl#sendFileAdHoc", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        easyDMSTool.Doc4SOAP.sendFileAdHocResponse sendFileAdHoc(easyDMSTool.Doc4SOAP.sendFileAdHocRequest request);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://xml.otris.de/ws/DOCUMENTS.wsdl#sendFileAdHoc", ReplyAction="*")]
        System.IAsyncResult BeginsendFileAdHoc(easyDMSTool.Doc4SOAP.sendFileAdHocRequest request, System.AsyncCallback callback, object asyncState);
        
        easyDMSTool.Doc4SOAP.sendFileAdHocResponse EndsendFileAdHoc(System.IAsyncResult result);
        
        // CODEGEN: Generating message contract since the wrapper namespace (http://xml.otris.de/ws/DOCUMENTS.xsd) of message getFileIdRequest does not match the default value (http://xml.otris.de/ws/DOCUMENTS-4.0.wsdl)
        [System.ServiceModel.OperationContractAttribute(Action="http://xml.otris.de/ws/DOCUMENTS.wsdl#getFileId", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        easyDMSTool.Doc4SOAP.getFileIdResponse getFileId(easyDMSTool.Doc4SOAP.getFileIdRequest request);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://xml.otris.de/ws/DOCUMENTS.wsdl#getFileId", ReplyAction="*")]
        System.IAsyncResult BegingetFileId(easyDMSTool.Doc4SOAP.getFileIdRequest request, System.AsyncCallback callback, object asyncState);
        
        easyDMSTool.Doc4SOAP.getFileIdResponse EndgetFileId(System.IAsyncResult result);
        
        // CODEGEN: Generating message contract since the wrapper namespace (http://xml.otris.de/ws/DOCUMENTS.xsd) of message listPublicFoldersRequest does not match the default value (http://xml.otris.de/ws/DOCUMENTS-4.0.wsdl)
        [System.ServiceModel.OperationContractAttribute(Action="", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        easyDMSTool.Doc4SOAP.listPublicFoldersResponse listPublicFolders(easyDMSTool.Doc4SOAP.listPublicFoldersRequest request);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="", ReplyAction="*")]
        System.IAsyncResult BeginlistPublicFolders(easyDMSTool.Doc4SOAP.listPublicFoldersRequest request, System.AsyncCallback callback, object asyncState);
        
        easyDMSTool.Doc4SOAP.listPublicFoldersResponse EndlistPublicFolders(System.IAsyncResult result);
        
        // CODEGEN: Generating message contract since the wrapper namespace (http://xml.otris.de/ws/DOCUMENTS.xsd) of message getFilingPlansRequest does not match the default value (http://xml.otris.de/ws/DOCUMENTS-4.0.wsdl)
        [System.ServiceModel.OperationContractAttribute(Action="http://xml.otris.de/ws/DOCUMENTS.wsdl#getFilingPlans", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        easyDMSTool.Doc4SOAP.getFilingPlansResponse getFilingPlans(easyDMSTool.Doc4SOAP.getFilingPlansRequest request);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://xml.otris.de/ws/DOCUMENTS.wsdl#getFilingPlans", ReplyAction="*")]
        System.IAsyncResult BegingetFilingPlans(easyDMSTool.Doc4SOAP.getFilingPlansRequest request, System.AsyncCallback callback, object asyncState);
        
        easyDMSTool.Doc4SOAP.getFilingPlansResponse EndgetFilingPlans(System.IAsyncResult result);
        
        // CODEGEN: Generating message contract since the wrapper namespace (http://xml.otris.de/ws/DOCUMENTS.xsd) of message getFilingPlanXMLRequest does not match the default value (http://xml.otris.de/ws/DOCUMENTS-4.0.wsdl)
        [System.ServiceModel.OperationContractAttribute(Action="http://xml.otris.de/ws/DOCUMENTS.wsdl#getFilingPlanXML", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        easyDMSTool.Doc4SOAP.getFilingPlanXMLResponse getFilingPlanXML(easyDMSTool.Doc4SOAP.getFilingPlanXMLRequest request);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://xml.otris.de/ws/DOCUMENTS.wsdl#getFilingPlanXML", ReplyAction="*")]
        System.IAsyncResult BegingetFilingPlanXML(easyDMSTool.Doc4SOAP.getFilingPlanXMLRequest request, System.AsyncCallback callback, object asyncState);
        
        easyDMSTool.Doc4SOAP.getFilingPlanXMLResponse EndgetFilingPlanXML(System.IAsyncResult result);
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
    [System.ServiceModel.MessageContractAttribute(WrapperName="login", WrapperNamespace="http://xml.otris.de/ws/DOCUMENTS.xsd", IsWrapped=true)]
    public partial class loginRequest {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://xml.otris.de/ws/DOCUMENTS.xsd", Order=0)]
        [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public string user;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://xml.otris.de/ws/DOCUMENTS.xsd", Order=1)]
        [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public string principal;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://xml.otris.de/ws/DOCUMENTS.xsd", Order=2)]
        [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public string passwd;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://xml.otris.de/ws/DOCUMENTS.xsd", Order=3)]
        [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public string code;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://xml.otris.de/ws/DOCUMENTS.xsd", Order=4)]
        [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public string locale;
        
        public loginRequest() {
        }
        
        public loginRequest(string user, string principal, string passwd, string code, string locale) {
            this.user = user;
            this.principal = principal;
            this.passwd = passwd;
            this.code = code;
            this.locale = locale;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
    [System.ServiceModel.MessageContractAttribute(WrapperName="loginResponse", WrapperNamespace="http://xml.otris.de/ws/DOCUMENTS.xsd", IsWrapped=true)]
    public partial class loginResponse {
        
        [System.ServiceModel.MessageHeaderAttribute(Namespace="http://xml.otris.de/ws/DOCUMENTS.xsd")]
        public string sessionID;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://xml.otris.de/ws/DOCUMENTS.xsd", Order=0)]
        [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public string session;
        
        public loginResponse() {
        }
        
        public loginResponse(string sessionID, string session) {
            this.sessionID = sessionID;
            this.session = session;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
    [System.ServiceModel.MessageContractAttribute(WrapperName="trustedLogin", WrapperNamespace="http://xml.otris.de/ws/DOCUMENTS.xsd", IsWrapped=true)]
    public partial class trustedLoginRequest {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://xml.otris.de/ws/DOCUMENTS.xsd", Order=0)]
        [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public string user;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://xml.otris.de/ws/DOCUMENTS.xsd", Order=1)]
        [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public string principal;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://xml.otris.de/ws/DOCUMENTS.xsd", Order=2)]
        [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public string passwd;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://xml.otris.de/ws/DOCUMENTS.xsd", Order=3)]
        [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public string asUser;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://xml.otris.de/ws/DOCUMENTS.xsd", Order=4)]
        [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public string code;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://xml.otris.de/ws/DOCUMENTS.xsd", Order=5)]
        [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public string locale;
        
        public trustedLoginRequest() {
        }
        
        public trustedLoginRequest(string user, string principal, string passwd, string asUser, string code, string locale) {
            this.user = user;
            this.principal = principal;
            this.passwd = passwd;
            this.asUser = asUser;
            this.code = code;
            this.locale = locale;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
    [System.ServiceModel.MessageContractAttribute(WrapperName="trustedLoginResponse", WrapperNamespace="http://xml.otris.de/ws/DOCUMENTS.xsd", IsWrapped=true)]
    public partial class trustedLoginResponse {
        
        [System.ServiceModel.MessageHeaderAttribute(Namespace="http://xml.otris.de/ws/DOCUMENTS.xsd")]
        public string sessionID;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://xml.otris.de/ws/DOCUMENTS.xsd", Order=0)]
        [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public string session;
        
        public trustedLoginResponse() {
        }
        
        public trustedLoginResponse(string sessionID, string session) {
            this.sessionID = sessionID;
            this.session = session;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
    [System.ServiceModel.MessageContractAttribute(WrapperName="logout", WrapperNamespace="http://xml.otris.de/ws/DOCUMENTS.xsd", IsWrapped=true)]
    public partial class logoutRequest {
        
        [System.ServiceModel.MessageHeaderAttribute(Namespace="http://xml.otris.de/ws/DOCUMENTS.xsd")]
        public string sessionID;
        
        public logoutRequest() {
        }
        
        public logoutRequest(string sessionID) {
            this.sessionID = sessionID;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
    [System.ServiceModel.MessageContractAttribute(WrapperName="logoutResponse", WrapperNamespace="http://xml.otris.de/ws/DOCUMENTS.xsd", IsWrapped=true)]
    public partial class logoutResponse {
        
        [System.ServiceModel.MessageHeaderAttribute(Namespace="http://xml.otris.de/ws/DOCUMENTS.xsd")]
        public string sessionID;
        
        public logoutResponse() {
        }
        
        public logoutResponse(string sessionID) {
            this.sessionID = sessionID;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
    [System.ServiceModel.MessageContractAttribute(WrapperName="testSession", WrapperNamespace="http://xml.otris.de/ws/DOCUMENTS.xsd", IsWrapped=true)]
    public partial class testSessionRequest {
        
        [System.ServiceModel.MessageHeaderAttribute(Namespace="http://xml.otris.de/ws/DOCUMENTS.xsd")]
        public string sessionID;
        
        public testSessionRequest() {
        }
        
        public testSessionRequest(string sessionID) {
            this.sessionID = sessionID;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
    [System.ServiceModel.MessageContractAttribute(WrapperName="testSessionResponse", WrapperNamespace="http://xml.otris.de/ws/DOCUMENTS.xsd", IsWrapped=true)]
    public partial class testSessionResponse {
        
        [System.ServiceModel.MessageHeaderAttribute(Namespace="http://xml.otris.de/ws/DOCUMENTS.xsd")]
        public string sessionID;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://xml.otris.de/ws/DOCUMENTS.xsd", Order=0)]
        [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public bool valid;
        
        public testSessionResponse() {
        }
        
        public testSessionResponse(string sessionID, bool valid) {
            this.sessionID = sessionID;
            this.valid = valid;
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.18408")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://xml.otris.de/ws/DOCUMENTS.xsd")]
    public partial class FileStatus : object, System.ComponentModel.INotifyPropertyChanged {
        
        private string fileIdField;
        
        private string idWorkflowStepField;
        
        private string statusField;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified, Order=0)]
        public string fileId {
            get {
                return this.fileIdField;
            }
            set {
                this.fileIdField = value;
                this.RaisePropertyChanged("fileId");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified, Order=1)]
        public string idWorkflowStep {
            get {
                return this.idWorkflowStepField;
            }
            set {
                this.idWorkflowStepField = value;
                this.RaisePropertyChanged("idWorkflowStep");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified, Order=2)]
        public string status {
            get {
                return this.statusField;
            }
            set {
                this.statusField = value;
                this.RaisePropertyChanged("status");
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.18408")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://xml.otris.de/ws/DOCUMENTS.xsd")]
    public partial class FilingPlan : object, System.ComponentModel.INotifyPropertyChanged {
        
        private string nameField;
        
        private string labelField;
        
        private string descriptionField;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified, Order=0)]
        public string name {
            get {
                return this.nameField;
            }
            set {
                this.nameField = value;
                this.RaisePropertyChanged("name");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified, Order=1)]
        public string label {
            get {
                return this.labelField;
            }
            set {
                this.labelField = value;
                this.RaisePropertyChanged("label");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified, Order=2)]
        public string description {
            get {
                return this.descriptionField;
            }
            set {
                this.descriptionField = value;
                this.RaisePropertyChanged("description");
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.18408")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://xml.otris.de/ws/DOCUMENTS.xsd")]
    public partial class FolderDescription2 : object, System.ComponentModel.INotifyPropertyChanged {
        
        private string idField;
        
        private string nameField;
        
        private string folderTypeField;
        
        private string labelField;
        
        private string labelMLField;
        
        private bool hasSubFoldersField;
        
        private FolderDescription2[] subFoldersField;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified, Order=0)]
        public string id {
            get {
                return this.idField;
            }
            set {
                this.idField = value;
                this.RaisePropertyChanged("id");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified, Order=1)]
        public string name {
            get {
                return this.nameField;
            }
            set {
                this.nameField = value;
                this.RaisePropertyChanged("name");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified, Order=2)]
        public string folderType {
            get {
                return this.folderTypeField;
            }
            set {
                this.folderTypeField = value;
                this.RaisePropertyChanged("folderType");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified, Order=3)]
        public string label {
            get {
                return this.labelField;
            }
            set {
                this.labelField = value;
                this.RaisePropertyChanged("label");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified, Order=4)]
        public string labelML {
            get {
                return this.labelMLField;
            }
            set {
                this.labelMLField = value;
                this.RaisePropertyChanged("labelML");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified, Order=5)]
        public bool hasSubFolders {
            get {
                return this.hasSubFoldersField;
            }
            set {
                this.hasSubFoldersField = value;
                this.RaisePropertyChanged("hasSubFolders");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlArrayAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified, IsNullable=true, Order=6)]
        [System.Xml.Serialization.XmlArrayItemAttribute("folder", Form=System.Xml.Schema.XmlSchemaForm.Unqualified, IsNullable=false)]
        public FolderDescription2[] subFolders {
            get {
                return this.subFoldersField;
            }
            set {
                this.subFoldersField = value;
                this.RaisePropertyChanged("subFolders");
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.18408")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://xml.otris.de/ws/DOCUMENTS.xsd")]
    public partial class WorkflowAction : object, System.ComponentModel.INotifyPropertyChanged {
        
        private string idField;
        
        private string labelField;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified, Order=0)]
        public string id {
            get {
                return this.idField;
            }
            set {
                this.idField = value;
                this.RaisePropertyChanged("id");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified, Order=1)]
        public string label {
            get {
                return this.labelField;
            }
            set {
                this.labelField = value;
                this.RaisePropertyChanged("label");
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.18408")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://xml.otris.de/ws/DOCUMENTS.xsd")]
    public partial class DeleteStatus : object, System.ComponentModel.INotifyPropertyChanged {
        
        private string idField;
        
        private bool deletedField;
        
        private string messagesField;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified, Order=0)]
        public string id {
            get {
                return this.idField;
            }
            set {
                this.idField = value;
                this.RaisePropertyChanged("id");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified, Order=1)]
        public bool deleted {
            get {
                return this.deletedField;
            }
            set {
                this.deletedField = value;
                this.RaisePropertyChanged("deleted");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified, Order=2)]
        public string messages {
            get {
                return this.messagesField;
            }
            set {
                this.messagesField = value;
                this.RaisePropertyChanged("messages");
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.18408")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://xml.otris.de/ws/DOCUMENTS.xsd")]
    public partial class ArchiveStatus : object, System.ComponentModel.INotifyPropertyChanged {
        
        private string fileIdField;
        
        private string messagesField;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified, Order=0)]
        public string fileId {
            get {
                return this.fileIdField;
            }
            set {
                this.fileIdField = value;
                this.RaisePropertyChanged("fileId");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified, Order=1)]
        public string messages {
            get {
                return this.messagesField;
            }
            set {
                this.messagesField = value;
                this.RaisePropertyChanged("messages");
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.18408")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://xml.otris.de/ws/DOCUMENTS.xsd")]
    public partial class FolderDescription : object, System.ComponentModel.INotifyPropertyChanged {
        
        private string idField;
        
        private string labelField;
        
        private bool hasSubFoldersField;
        
        private FolderDescription[] subFoldersField;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified, Order=0)]
        public string id {
            get {
                return this.idField;
            }
            set {
                this.idField = value;
                this.RaisePropertyChanged("id");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified, Order=1)]
        public string label {
            get {
                return this.labelField;
            }
            set {
                this.labelField = value;
                this.RaisePropertyChanged("label");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified, Order=2)]
        public bool hasSubFolders {
            get {
                return this.hasSubFoldersField;
            }
            set {
                this.hasSubFoldersField = value;
                this.RaisePropertyChanged("hasSubFolders");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlArrayAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified, IsNullable=true, Order=3)]
        [System.Xml.Serialization.XmlArrayItemAttribute("folder", Form=System.Xml.Schema.XmlSchemaForm.Unqualified, IsNullable=false)]
        public FolderDescription[] subFolders {
            get {
                return this.subFoldersField;
            }
            set {
                this.subFoldersField = value;
                this.RaisePropertyChanged("subFolders");
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.18408")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://xml.otris.de/ws/DOCUMENTS.xsd")]
    public partial class FolderFile : object, System.ComponentModel.INotifyPropertyChanged {
        
        private string idField;
        
        private string[] valuesField;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified, Order=0)]
        public string id {
            get {
                return this.idField;
            }
            set {
                this.idField = value;
                this.RaisePropertyChanged("id");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlArrayAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified, Order=1)]
        [System.Xml.Serialization.XmlArrayItemAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified, IsNullable=false)]
        public string[] values {
            get {
                return this.valuesField;
            }
            set {
                this.valuesField = value;
                this.RaisePropertyChanged("values");
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.18408")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://xml.otris.de/ws/DOCUMENTS.xsd")]
    public partial class FileTypeDescription2 : object, System.ComponentModel.INotifyPropertyChanged {
        
        private string nameField;
        
        private string labelField;
        
        private string idField;
        
        private FieldDescription[] fieldsField;
        
        private RegisterDescription[] docregistersField;
        
        private FileTypeArchiveInfo archiveinfoField;
        
        private FileTypeWorkflowInfo workflowinfoField;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified, IsNullable=true, Order=0)]
        public string name {
            get {
                return this.nameField;
            }
            set {
                this.nameField = value;
                this.RaisePropertyChanged("name");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified, IsNullable=true, Order=1)]
        public string label {
            get {
                return this.labelField;
            }
            set {
                this.labelField = value;
                this.RaisePropertyChanged("label");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified, IsNullable=true, Order=2)]
        public string id {
            get {
                return this.idField;
            }
            set {
                this.idField = value;
                this.RaisePropertyChanged("id");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlArrayAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified, IsNullable=true, Order=3)]
        [System.Xml.Serialization.XmlArrayItemAttribute("field", Form=System.Xml.Schema.XmlSchemaForm.Unqualified, IsNullable=false)]
        public FieldDescription[] fields {
            get {
                return this.fieldsField;
            }
            set {
                this.fieldsField = value;
                this.RaisePropertyChanged("fields");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlArrayAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified, IsNullable=true, Order=4)]
        [System.Xml.Serialization.XmlArrayItemAttribute("docregister", Form=System.Xml.Schema.XmlSchemaForm.Unqualified, IsNullable=false)]
        public RegisterDescription[] docregisters {
            get {
                return this.docregistersField;
            }
            set {
                this.docregistersField = value;
                this.RaisePropertyChanged("docregisters");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified, IsNullable=true, Order=5)]
        public FileTypeArchiveInfo archiveinfo {
            get {
                return this.archiveinfoField;
            }
            set {
                this.archiveinfoField = value;
                this.RaisePropertyChanged("archiveinfo");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified, IsNullable=true, Order=6)]
        public FileTypeWorkflowInfo workflowinfo {
            get {
                return this.workflowinfoField;
            }
            set {
                this.workflowinfoField = value;
                this.RaisePropertyChanged("workflowinfo");
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.18408")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://xml.otris.de/ws/DOCUMENTS.xsd")]
    public partial class FieldDescription : object, System.ComponentModel.INotifyPropertyChanged {
        
        private string nameField;
        
        private string idField;
        
        private string fieldlabelField;
        
        private string initialvalueField;
        
        private string typeField;
        
        private string[] enumField;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified, Order=0)]
        public string name {
            get {
                return this.nameField;
            }
            set {
                this.nameField = value;
                this.RaisePropertyChanged("name");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified, Order=1)]
        public string id {
            get {
                return this.idField;
            }
            set {
                this.idField = value;
                this.RaisePropertyChanged("id");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified, IsNullable=true, Order=2)]
        public string fieldlabel {
            get {
                return this.fieldlabelField;
            }
            set {
                this.fieldlabelField = value;
                this.RaisePropertyChanged("fieldlabel");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified, IsNullable=true, Order=3)]
        public string initialvalue {
            get {
                return this.initialvalueField;
            }
            set {
                this.initialvalueField = value;
                this.RaisePropertyChanged("initialvalue");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified, Order=4)]
        public string type {
            get {
                return this.typeField;
            }
            set {
                this.typeField = value;
                this.RaisePropertyChanged("type");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlArrayAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified, IsNullable=true, Order=5)]
        [System.Xml.Serialization.XmlArrayItemAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified, IsNullable=false)]
        public string[] @enum {
            get {
                return this.enumField;
            }
            set {
                this.enumField = value;
                this.RaisePropertyChanged("enum");
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.18408")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://xml.otris.de/ws/DOCUMENTS.xsd")]
    public partial class RegisterDescription : object, System.ComponentModel.INotifyPropertyChanged {
        
        private string nameField;
        
        private string idField;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified, Order=0)]
        public string name {
            get {
                return this.nameField;
            }
            set {
                this.nameField = value;
                this.RaisePropertyChanged("name");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified, Order=1)]
        public string id {
            get {
                return this.idField;
            }
            set {
                this.idField = value;
                this.RaisePropertyChanged("id");
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.18408")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://xml.otris.de/ws/DOCUMENTS.xsd")]
    public partial class FileTypeArchiveInfo : object, System.ComponentModel.INotifyPropertyChanged {
        
        private string nameDestField;
        
        private string idDestField;
        
        private string keyDestField;
        
        private SourceArchive[] arcSrcsField;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified, Order=0)]
        public string nameDest {
            get {
                return this.nameDestField;
            }
            set {
                this.nameDestField = value;
                this.RaisePropertyChanged("nameDest");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified, Order=1)]
        public string idDest {
            get {
                return this.idDestField;
            }
            set {
                this.idDestField = value;
                this.RaisePropertyChanged("idDest");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified, Order=2)]
        public string keyDest {
            get {
                return this.keyDestField;
            }
            set {
                this.keyDestField = value;
                this.RaisePropertyChanged("keyDest");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlArrayAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified, IsNullable=true, Order=3)]
        [System.Xml.Serialization.XmlArrayItemAttribute("arcSrc", Form=System.Xml.Schema.XmlSchemaForm.Unqualified, IsNullable=false)]
        public SourceArchive[] arcSrcs {
            get {
                return this.arcSrcsField;
            }
            set {
                this.arcSrcsField = value;
                this.RaisePropertyChanged("arcSrcs");
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.18408")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://xml.otris.de/ws/DOCUMENTS.xsd")]
    public partial class SourceArchive : object, System.ComponentModel.INotifyPropertyChanged {
        
        private string nameSrcField;
        
        private string idSrcField;
        
        private string keySrcField;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified, Order=0)]
        public string nameSrc {
            get {
                return this.nameSrcField;
            }
            set {
                this.nameSrcField = value;
                this.RaisePropertyChanged("nameSrc");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified, Order=1)]
        public string idSrc {
            get {
                return this.idSrcField;
            }
            set {
                this.idSrcField = value;
                this.RaisePropertyChanged("idSrc");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified, Order=2)]
        public string keySrc {
            get {
                return this.keySrcField;
            }
            set {
                this.keySrcField = value;
                this.RaisePropertyChanged("keySrc");
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.18408")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://xml.otris.de/ws/DOCUMENTS.xsd")]
    public partial class FileTypeWorkflowInfo : object, System.ComponentModel.INotifyPropertyChanged {
        
        private RegisterDescription stdForwardingField;
        
        private WorkflowIdent workflowField;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified, Order=0)]
        public RegisterDescription StdForwarding {
            get {
                return this.stdForwardingField;
            }
            set {
                this.stdForwardingField = value;
                this.RaisePropertyChanged("StdForwarding");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified, Order=1)]
        public WorkflowIdent Workflow {
            get {
                return this.workflowField;
            }
            set {
                this.workflowField = value;
                this.RaisePropertyChanged("Workflow");
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.18408")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://xml.otris.de/ws/DOCUMENTS.xsd")]
    public partial class WorkflowIdent : object, System.ComponentModel.INotifyPropertyChanged {
        
        private string versionField;
        
        private string idField;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified, Order=0)]
        public string version {
            get {
                return this.versionField;
            }
            set {
                this.versionField = value;
                this.RaisePropertyChanged("version");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified, Order=1)]
        public string id {
            get {
                return this.idField;
            }
            set {
                this.idField = value;
                this.RaisePropertyChanged("id");
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.18408")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://xml.otris.de/ws/DOCUMENTS.xsd")]
    public partial class FileTypeDescription : object, System.ComponentModel.INotifyPropertyChanged {
        
        private string nameField;
        
        private string idField;
        
        private FieldDescription[] fieldsField;
        
        private RegisterDescription[] docregistersField;
        
        private FileTypeArchiveInfo archiveinfoField;
        
        private FileTypeWorkflowInfo workflowinfoField;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified, IsNullable=true, Order=0)]
        public string name {
            get {
                return this.nameField;
            }
            set {
                this.nameField = value;
                this.RaisePropertyChanged("name");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified, IsNullable=true, Order=1)]
        public string id {
            get {
                return this.idField;
            }
            set {
                this.idField = value;
                this.RaisePropertyChanged("id");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlArrayAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified, IsNullable=true, Order=2)]
        [System.Xml.Serialization.XmlArrayItemAttribute("field", Form=System.Xml.Schema.XmlSchemaForm.Unqualified, IsNullable=false)]
        public FieldDescription[] fields {
            get {
                return this.fieldsField;
            }
            set {
                this.fieldsField = value;
                this.RaisePropertyChanged("fields");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlArrayAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified, IsNullable=true, Order=3)]
        [System.Xml.Serialization.XmlArrayItemAttribute("docregister", Form=System.Xml.Schema.XmlSchemaForm.Unqualified, IsNullable=false)]
        public RegisterDescription[] docregisters {
            get {
                return this.docregistersField;
            }
            set {
                this.docregistersField = value;
                this.RaisePropertyChanged("docregisters");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified, IsNullable=true, Order=4)]
        public FileTypeArchiveInfo archiveinfo {
            get {
                return this.archiveinfoField;
            }
            set {
                this.archiveinfoField = value;
                this.RaisePropertyChanged("archiveinfo");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified, IsNullable=true, Order=5)]
        public FileTypeWorkflowInfo workflowinfo {
            get {
                return this.workflowinfoField;
            }
            set {
                this.workflowinfoField = value;
                this.RaisePropertyChanged("workflowinfo");
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.18408")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://xml.otris.de/ws/DOCUMENTS.xsd")]
    public partial class FileTypeShortDescr : object, System.ComponentModel.INotifyPropertyChanged {
        
        private string idField;
        
        private string nameField;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified, Order=0)]
        public string id {
            get {
                return this.idField;
            }
            set {
                this.idField = value;
                this.RaisePropertyChanged("id");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified, Order=1)]
        public string name {
            get {
                return this.nameField;
            }
            set {
                this.nameField = value;
                this.RaisePropertyChanged("name");
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.18408")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://xml.otris.de/ws/DOCUMENTS.xsd")]
    public partial class DocUploadData : object, System.ComponentModel.INotifyPropertyChanged {
        
        private string nameField;
        
        private string registerField;
        
        private byte[] dataField;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified, Order=0)]
        public string name {
            get {
                return this.nameField;
            }
            set {
                this.nameField = value;
                this.RaisePropertyChanged("name");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified, Order=1)]
        public string register {
            get {
                return this.registerField;
            }
            set {
                this.registerField = value;
                this.RaisePropertyChanged("register");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified, DataType="base64Binary", IsNullable=true, Order=2)]
        public byte[] data {
            get {
                return this.dataField;
            }
            set {
                this.dataField = value;
                this.RaisePropertyChanged("data");
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.18408")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://xml.otris.de/ws/DOCUMENTS.xsd")]
    public partial class HitData : object, System.ComponentModel.INotifyPropertyChanged {
        
        private string[] columnField;
        
        private int reservedField;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute("column", Form=System.Xml.Schema.XmlSchemaForm.Unqualified, Order=0)]
        public string[] column {
            get {
                return this.columnField;
            }
            set {
                this.columnField = value;
                this.RaisePropertyChanged("column");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified, Order=1)]
        public int reserved {
            get {
                return this.reservedField;
            }
            set {
                this.reservedField = value;
                this.RaisePropertyChanged("reserved");
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.18408")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://xml.otris.de/ws/DOCUMENTS.xsd")]
    public partial class HitList : object, System.ComponentModel.INotifyPropertyChanged {
        
        private int rowsField;
        
        private int columnsField;
        
        private HitData[] hitField;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified, Order=0)]
        public int rows {
            get {
                return this.rowsField;
            }
            set {
                this.rowsField = value;
                this.RaisePropertyChanged("rows");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified, Order=1)]
        public int columns {
            get {
                return this.columnsField;
            }
            set {
                this.columnsField = value;
                this.RaisePropertyChanged("columns");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute("hit", Form=System.Xml.Schema.XmlSchemaForm.Unqualified, Order=2)]
        public HitData[] hit {
            get {
                return this.hitField;
            }
            set {
                this.hitField = value;
                this.RaisePropertyChanged("hit");
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.18408")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://xml.otris.de/ws/DOCUMENTS.xsd")]
    public partial class FileInfo : object, System.ComponentModel.INotifyPropertyChanged {
        
        private string idFileField;
        
        private bool hasErrorField;
        
        private FieldData[] fieldvaluesField;
        
        private DocInfo[] documentsField;
        
        private string filetypeIdField;
        
        private string filetypeNameField;
        
        private string filetypeLabelField;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified, Order=0)]
        public string idFile {
            get {
                return this.idFileField;
            }
            set {
                this.idFileField = value;
                this.RaisePropertyChanged("idFile");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified, Order=1)]
        public bool hasError {
            get {
                return this.hasErrorField;
            }
            set {
                this.hasErrorField = value;
                this.RaisePropertyChanged("hasError");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlArrayAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified, Order=2)]
        [System.Xml.Serialization.XmlArrayItemAttribute("field", Form=System.Xml.Schema.XmlSchemaForm.Unqualified, IsNullable=false)]
        public FieldData[] fieldvalues {
            get {
                return this.fieldvaluesField;
            }
            set {
                this.fieldvaluesField = value;
                this.RaisePropertyChanged("fieldvalues");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlArrayAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified, Order=3)]
        [System.Xml.Serialization.XmlArrayItemAttribute("document", Form=System.Xml.Schema.XmlSchemaForm.Unqualified, IsNullable=false)]
        public DocInfo[] documents {
            get {
                return this.documentsField;
            }
            set {
                this.documentsField = value;
                this.RaisePropertyChanged("documents");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified, Order=4)]
        public string filetypeId {
            get {
                return this.filetypeIdField;
            }
            set {
                this.filetypeIdField = value;
                this.RaisePropertyChanged("filetypeId");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified, Order=5)]
        public string filetypeName {
            get {
                return this.filetypeNameField;
            }
            set {
                this.filetypeNameField = value;
                this.RaisePropertyChanged("filetypeName");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified, Order=6)]
        public string filetypeLabel {
            get {
                return this.filetypeLabelField;
            }
            set {
                this.filetypeLabelField = value;
                this.RaisePropertyChanged("filetypeLabel");
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.18408")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://xml.otris.de/ws/DOCUMENTS.xsd")]
    public partial class FieldData : object, System.ComponentModel.INotifyPropertyChanged {
        
        private string nameField;
        
        private string valueField;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified, Order=0)]
        public string name {
            get {
                return this.nameField;
            }
            set {
                this.nameField = value;
                this.RaisePropertyChanged("name");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified, Order=1)]
        public string value {
            get {
                return this.valueField;
            }
            set {
                this.valueField = value;
                this.RaisePropertyChanged("value");
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.18408")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://xml.otris.de/ws/DOCUMENTS.xsd")]
    public partial class DocInfo : object, System.ComponentModel.INotifyPropertyChanged {
        
        private string idField;
        
        private string nameField;
        
        private string sizeField;
        
        private string commentField;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified, Order=0)]
        public string id {
            get {
                return this.idField;
            }
            set {
                this.idField = value;
                this.RaisePropertyChanged("id");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified, Order=1)]
        public string name {
            get {
                return this.nameField;
            }
            set {
                this.nameField = value;
                this.RaisePropertyChanged("name");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified, Order=2)]
        public string size {
            get {
                return this.sizeField;
            }
            set {
                this.sizeField = value;
                this.RaisePropertyChanged("size");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified, Order=3)]
        public string comment {
            get {
                return this.commentField;
            }
            set {
                this.commentField = value;
                this.RaisePropertyChanged("comment");
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.18408")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://xml.otris.de/ws/DOCUMENTS.xsd")]
    public partial class WorkflowPattern : object, System.ComponentModel.INotifyPropertyChanged {
        
        private string idWorkflowPatternField;
        
        private string nameWorkflowPatternField;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified, Order=0)]
        public string idWorkflowPattern {
            get {
                return this.idWorkflowPatternField;
            }
            set {
                this.idWorkflowPatternField = value;
                this.RaisePropertyChanged("idWorkflowPattern");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified, Order=1)]
        public string nameWorkflowPattern {
            get {
                return this.nameWorkflowPatternField;
            }
            set {
                this.nameWorkflowPatternField = value;
                this.RaisePropertyChanged("nameWorkflowPattern");
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.18408")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://xml.otris.de/ws/DOCUMENTS.xsd")]
    public partial class WorkflowStep : object, System.ComponentModel.INotifyPropertyChanged {
        
        private string idWorkflowStepField;
        
        private string statusField;
        
        private bool locksFileField;
        
        private bool hasAgentField;
        
        private bool wasRedirectedField;
        
        private bool groupFlagField;
        
        private string userField;
        
        private string entryDateField;
        
        private string finishDateField;
        
        private bool fileOkField;
        
        private string taskField;
        
        private string commentField;
        
        private string redirectionDescriptionField;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified, Order=0)]
        public string idWorkflowStep {
            get {
                return this.idWorkflowStepField;
            }
            set {
                this.idWorkflowStepField = value;
                this.RaisePropertyChanged("idWorkflowStep");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified, Order=1)]
        public string status {
            get {
                return this.statusField;
            }
            set {
                this.statusField = value;
                this.RaisePropertyChanged("status");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified, Order=2)]
        public bool locksFile {
            get {
                return this.locksFileField;
            }
            set {
                this.locksFileField = value;
                this.RaisePropertyChanged("locksFile");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified, Order=3)]
        public bool hasAgent {
            get {
                return this.hasAgentField;
            }
            set {
                this.hasAgentField = value;
                this.RaisePropertyChanged("hasAgent");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified, Order=4)]
        public bool wasRedirected {
            get {
                return this.wasRedirectedField;
            }
            set {
                this.wasRedirectedField = value;
                this.RaisePropertyChanged("wasRedirected");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified, Order=5)]
        public bool groupFlag {
            get {
                return this.groupFlagField;
            }
            set {
                this.groupFlagField = value;
                this.RaisePropertyChanged("groupFlag");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified, Order=6)]
        public string user {
            get {
                return this.userField;
            }
            set {
                this.userField = value;
                this.RaisePropertyChanged("user");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified, Order=7)]
        public string entryDate {
            get {
                return this.entryDateField;
            }
            set {
                this.entryDateField = value;
                this.RaisePropertyChanged("entryDate");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified, Order=8)]
        public string finishDate {
            get {
                return this.finishDateField;
            }
            set {
                this.finishDateField = value;
                this.RaisePropertyChanged("finishDate");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified, Order=9)]
        public bool fileOk {
            get {
                return this.fileOkField;
            }
            set {
                this.fileOkField = value;
                this.RaisePropertyChanged("fileOk");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified, Order=10)]
        public string task {
            get {
                return this.taskField;
            }
            set {
                this.taskField = value;
                this.RaisePropertyChanged("task");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified, Order=11)]
        public string comment {
            get {
                return this.commentField;
            }
            set {
                this.commentField = value;
                this.RaisePropertyChanged("comment");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified, Order=12)]
        public string redirectionDescription {
            get {
                return this.redirectionDescriptionField;
            }
            set {
                this.redirectionDescriptionField = value;
                this.RaisePropertyChanged("redirectionDescription");
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.18408")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://xml.otris.de/ws/DOCUMENTS.xsd")]
    public partial class MonitorEntry : object, System.ComponentModel.INotifyPropertyChanged {
        
        private string statusField;
        
        private string executiveField;
        
        private string entryDateField;
        
        private string responseDateField;
        
        private bool fileOkField;
        
        private string taskField;
        
        private string commentField;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified, Order=0)]
        public string status {
            get {
                return this.statusField;
            }
            set {
                this.statusField = value;
                this.RaisePropertyChanged("status");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified, Order=1)]
        public string executive {
            get {
                return this.executiveField;
            }
            set {
                this.executiveField = value;
                this.RaisePropertyChanged("executive");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified, Order=2)]
        public string entryDate {
            get {
                return this.entryDateField;
            }
            set {
                this.entryDateField = value;
                this.RaisePropertyChanged("entryDate");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified, Order=3)]
        public string responseDate {
            get {
                return this.responseDateField;
            }
            set {
                this.responseDateField = value;
                this.RaisePropertyChanged("responseDate");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified, Order=4)]
        public bool fileOk {
            get {
                return this.fileOkField;
            }
            set {
                this.fileOkField = value;
                this.RaisePropertyChanged("fileOk");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified, Order=5)]
        public string task {
            get {
                return this.taskField;
            }
            set {
                this.taskField = value;
                this.RaisePropertyChanged("task");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified, Order=6)]
        public string comment {
            get {
                return this.commentField;
            }
            set {
                this.commentField = value;
                this.RaisePropertyChanged("comment");
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
    [System.ServiceModel.MessageContractAttribute(WrapperName="getInbox", WrapperNamespace="http://xml.otris.de/ws/DOCUMENTS.xsd", IsWrapped=true)]
    public partial class getInboxRequest {
        
        [System.ServiceModel.MessageHeaderAttribute(Namespace="http://xml.otris.de/ws/DOCUMENTS.xsd")]
        public string sessionID;
        
        public getInboxRequest() {
        }
        
        public getInboxRequest(string sessionID) {
            this.sessionID = sessionID;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
    [System.ServiceModel.MessageContractAttribute(WrapperName="getInboxResponse", WrapperNamespace="http://xml.otris.de/ws/DOCUMENTS.xsd", IsWrapped=true)]
    public partial class getInboxResponse {
        
        [System.ServiceModel.MessageHeaderAttribute(Namespace="http://xml.otris.de/ws/DOCUMENTS.xsd")]
        public string sessionID;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://xml.otris.de/ws/DOCUMENTS.xsd", Order=0)]
        [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public string idFolder;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://xml.otris.de/ws/DOCUMENTS.xsd", Order=1)]
        [System.Xml.Serialization.XmlArrayAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        [System.Xml.Serialization.XmlArrayItemAttribute("fileStatus", Form=System.Xml.Schema.XmlSchemaForm.Unqualified, IsNullable=false)]
        public easyDMSTool.Doc4SOAP.FileStatus[] fileStatuses;
        
        public getInboxResponse() {
        }
        
        public getInboxResponse(string sessionID, string idFolder, easyDMSTool.Doc4SOAP.FileStatus[] fileStatuses) {
            this.sessionID = sessionID;
            this.idFolder = idFolder;
            this.fileStatuses = fileStatuses;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
    [System.ServiceModel.MessageContractAttribute(WrapperName="getSentFolder", WrapperNamespace="http://xml.otris.de/ws/DOCUMENTS.xsd", IsWrapped=true)]
    public partial class getSentFolderRequest {
        
        [System.ServiceModel.MessageHeaderAttribute(Namespace="http://xml.otris.de/ws/DOCUMENTS.xsd")]
        public string sessionID;
        
        public getSentFolderRequest() {
        }
        
        public getSentFolderRequest(string sessionID) {
            this.sessionID = sessionID;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
    [System.ServiceModel.MessageContractAttribute(WrapperName="getSentFolderResponse", WrapperNamespace="http://xml.otris.de/ws/DOCUMENTS.xsd", IsWrapped=true)]
    public partial class getSentFolderResponse {
        
        [System.ServiceModel.MessageHeaderAttribute(Namespace="http://xml.otris.de/ws/DOCUMENTS.xsd")]
        public string sessionID;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://xml.otris.de/ws/DOCUMENTS.xsd", Order=0)]
        [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public string idFolder;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://xml.otris.de/ws/DOCUMENTS.xsd", Order=1)]
        [System.Xml.Serialization.XmlArrayAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        [System.Xml.Serialization.XmlArrayItemAttribute("fileStatus", Form=System.Xml.Schema.XmlSchemaForm.Unqualified, IsNullable=false)]
        public easyDMSTool.Doc4SOAP.FileStatus[] fileStatuses;
        
        public getSentFolderResponse() {
        }
        
        public getSentFolderResponse(string sessionID, string idFolder, easyDMSTool.Doc4SOAP.FileStatus[] fileStatuses) {
            this.sessionID = sessionID;
            this.idFolder = idFolder;
            this.fileStatuses = fileStatuses;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
    [System.ServiceModel.MessageContractAttribute(WrapperName="getTasks", WrapperNamespace="http://xml.otris.de/ws/DOCUMENTS.xsd", IsWrapped=true)]
    public partial class getTasksRequest {
        
        [System.ServiceModel.MessageHeaderAttribute(Namespace="http://xml.otris.de/ws/DOCUMENTS.xsd")]
        public string sessionID;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://xml.otris.de/ws/DOCUMENTS.xsd", Order=0)]
        [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public string fileId;
        
        public getTasksRequest() {
        }
        
        public getTasksRequest(string sessionID, string fileId) {
            this.sessionID = sessionID;
            this.fileId = fileId;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
    [System.ServiceModel.MessageContractAttribute(WrapperName="getTasksResponse", WrapperNamespace="http://xml.otris.de/ws/DOCUMENTS.xsd", IsWrapped=true)]
    public partial class getTasksResponse {
        
        [System.ServiceModel.MessageHeaderAttribute(Namespace="http://xml.otris.de/ws/DOCUMENTS.xsd")]
        public string sessionID;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://xml.otris.de/ws/DOCUMENTS.xsd", Order=0)]
        [System.Xml.Serialization.XmlArrayAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        [System.Xml.Serialization.XmlArrayItemAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified, IsNullable=false)]
        public string[] tasks;
        
        public getTasksResponse() {
        }
        
        public getTasksResponse(string sessionID, string[] tasks) {
            this.sessionID = sessionID;
            this.tasks = tasks;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
    [System.ServiceModel.MessageContractAttribute(WrapperName="getMonitor", WrapperNamespace="http://xml.otris.de/ws/DOCUMENTS.xsd", IsWrapped=true)]
    public partial class getMonitorRequest {
        
        [System.ServiceModel.MessageHeaderAttribute(Namespace="http://xml.otris.de/ws/DOCUMENTS.xsd")]
        public string sessionID;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://xml.otris.de/ws/DOCUMENTS.xsd", Order=0)]
        [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public string fileId;
        
        public getMonitorRequest() {
        }
        
        public getMonitorRequest(string sessionID, string fileId) {
            this.sessionID = sessionID;
            this.fileId = fileId;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
    [System.ServiceModel.MessageContractAttribute(WrapperName="getMonitorResponse", WrapperNamespace="http://xml.otris.de/ws/DOCUMENTS.xsd", IsWrapped=true)]
    public partial class getMonitorResponse {
        
        [System.ServiceModel.MessageHeaderAttribute(Namespace="http://xml.otris.de/ws/DOCUMENTS.xsd")]
        public string sessionID;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://xml.otris.de/ws/DOCUMENTS.xsd", Order=0)]
        [System.Xml.Serialization.XmlArrayAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        [System.Xml.Serialization.XmlArrayItemAttribute("monitorEntry", Form=System.Xml.Schema.XmlSchemaForm.Unqualified, IsNullable=false)]
        public easyDMSTool.Doc4SOAP.MonitorEntry[] monitorEntries;
        
        public getMonitorResponse() {
        }
        
        public getMonitorResponse(string sessionID, easyDMSTool.Doc4SOAP.MonitorEntry[] monitorEntries) {
            this.sessionID = sessionID;
            this.monitorEntries = monitorEntries;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
    [System.ServiceModel.MessageContractAttribute(WrapperName="getWorkflowSteps", WrapperNamespace="http://xml.otris.de/ws/DOCUMENTS.xsd", IsWrapped=true)]
    public partial class getWorkflowStepsRequest {
        
        [System.ServiceModel.MessageHeaderAttribute(Namespace="http://xml.otris.de/ws/DOCUMENTS.xsd")]
        public string sessionID;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://xml.otris.de/ws/DOCUMENTS.xsd", Order=0)]
        [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public string fileId;
        
        public getWorkflowStepsRequest() {
        }
        
        public getWorkflowStepsRequest(string sessionID, string fileId) {
            this.sessionID = sessionID;
            this.fileId = fileId;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
    [System.ServiceModel.MessageContractAttribute(WrapperName="getWorkflowStepsResponse", WrapperNamespace="http://xml.otris.de/ws/DOCUMENTS.xsd", IsWrapped=true)]
    public partial class getWorkflowStepsResponse {
        
        [System.ServiceModel.MessageHeaderAttribute(Namespace="http://xml.otris.de/ws/DOCUMENTS.xsd")]
        public string sessionID;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://xml.otris.de/ws/DOCUMENTS.xsd", Order=0)]
        [System.Xml.Serialization.XmlArrayAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        [System.Xml.Serialization.XmlArrayItemAttribute("workflowStep", Form=System.Xml.Schema.XmlSchemaForm.Unqualified, IsNullable=false)]
        public easyDMSTool.Doc4SOAP.WorkflowStep[] workflowSteps;
        
        public getWorkflowStepsResponse() {
        }
        
        public getWorkflowStepsResponse(string sessionID, easyDMSTool.Doc4SOAP.WorkflowStep[] workflowSteps) {
            this.sessionID = sessionID;
            this.workflowSteps = workflowSteps;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
    [System.ServiceModel.MessageContractAttribute(WrapperName="getWorkflowPattern", WrapperNamespace="http://xml.otris.de/ws/DOCUMENTS.xsd", IsWrapped=true)]
    public partial class getWorkflowPatternRequest {
        
        [System.ServiceModel.MessageHeaderAttribute(Namespace="http://xml.otris.de/ws/DOCUMENTS.xsd")]
        public string sessionID;
        
        public getWorkflowPatternRequest() {
        }
        
        public getWorkflowPatternRequest(string sessionID) {
            this.sessionID = sessionID;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
    [System.ServiceModel.MessageContractAttribute(WrapperName="getWorkflowPatternResponse", WrapperNamespace="http://xml.otris.de/ws/DOCUMENTS.xsd", IsWrapped=true)]
    public partial class getWorkflowPatternResponse {
        
        [System.ServiceModel.MessageHeaderAttribute(Namespace="http://xml.otris.de/ws/DOCUMENTS.xsd")]
        public string sessionID;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://xml.otris.de/ws/DOCUMENTS.xsd", Order=0)]
        [System.Xml.Serialization.XmlArrayAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        [System.Xml.Serialization.XmlArrayItemAttribute("workflowPattern", Form=System.Xml.Schema.XmlSchemaForm.Unqualified, IsNullable=false)]
        public easyDMSTool.Doc4SOAP.WorkflowPattern[] workflowPattern;
        
        public getWorkflowPatternResponse() {
        }
        
        public getWorkflowPatternResponse(string sessionID, easyDMSTool.Doc4SOAP.WorkflowPattern[] workflowPattern) {
            this.sessionID = sessionID;
            this.workflowPattern = workflowPattern;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
    [System.ServiceModel.MessageContractAttribute(WrapperName="startWorkflow", WrapperNamespace="http://xml.otris.de/ws/DOCUMENTS.xsd", IsWrapped=true)]
    public partial class startWorkflowRequest {
        
        [System.ServiceModel.MessageHeaderAttribute(Namespace="http://xml.otris.de/ws/DOCUMENTS.xsd")]
        public string sessionID;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://xml.otris.de/ws/DOCUMENTS.xsd", Order=0)]
        [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public string fileId;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://xml.otris.de/ws/DOCUMENTS.xsd", Order=1)]
        [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public string idWorkflowPattern;
        
        public startWorkflowRequest() {
        }
        
        public startWorkflowRequest(string sessionID, string fileId, string idWorkflowPattern) {
            this.sessionID = sessionID;
            this.fileId = fileId;
            this.idWorkflowPattern = idWorkflowPattern;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
    [System.ServiceModel.MessageContractAttribute(WrapperName="startWorkflowResponse", WrapperNamespace="http://xml.otris.de/ws/DOCUMENTS.xsd", IsWrapped=true)]
    public partial class startWorkflowResponse {
        
        [System.ServiceModel.MessageHeaderAttribute(Namespace="http://xml.otris.de/ws/DOCUMENTS.xsd")]
        public string sessionID;
        
        public startWorkflowResponse() {
        }
        
        public startWorkflowResponse(string sessionID) {
            this.sessionID = sessionID;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
    [System.ServiceModel.MessageContractAttribute(WrapperName="cancelWorkflow", WrapperNamespace="http://xml.otris.de/ws/DOCUMENTS.xsd", IsWrapped=true)]
    public partial class cancelWorkflowRequest {
        
        [System.ServiceModel.MessageHeaderAttribute(Namespace="http://xml.otris.de/ws/DOCUMENTS.xsd")]
        public string sessionID;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://xml.otris.de/ws/DOCUMENTS.xsd", Order=0)]
        [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public string fileId;
        
        public cancelWorkflowRequest() {
        }
        
        public cancelWorkflowRequest(string sessionID, string fileId) {
            this.sessionID = sessionID;
            this.fileId = fileId;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
    [System.ServiceModel.MessageContractAttribute(WrapperName="cancelWorkflowResponse", WrapperNamespace="http://xml.otris.de/ws/DOCUMENTS.xsd", IsWrapped=true)]
    public partial class cancelWorkflowResponse {
        
        [System.ServiceModel.MessageHeaderAttribute(Namespace="http://xml.otris.de/ws/DOCUMENTS.xsd")]
        public string sessionID;
        
        public cancelWorkflowResponse() {
        }
        
        public cancelWorkflowResponse(string sessionID) {
            this.sessionID = sessionID;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
    [System.ServiceModel.MessageContractAttribute(WrapperName="getAutoText", WrapperNamespace="http://xml.otris.de/ws/DOCUMENTS.xsd", IsWrapped=true)]
    public partial class getAutoTextRequest {
        
        [System.ServiceModel.MessageHeaderAttribute(Namespace="http://xml.otris.de/ws/DOCUMENTS.xsd")]
        public string sessionID;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://xml.otris.de/ws/DOCUMENTS.xsd", Order=0)]
        [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public string fileId;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://xml.otris.de/ws/DOCUMENTS.xsd", Order=1)]
        [System.Xml.Serialization.XmlArrayAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        [System.Xml.Serialization.XmlArrayItemAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified, IsNullable=false)]
        public string[] autoTextNames;
        
        public getAutoTextRequest() {
        }
        
        public getAutoTextRequest(string sessionID, string fileId, string[] autoTextNames) {
            this.sessionID = sessionID;
            this.fileId = fileId;
            this.autoTextNames = autoTextNames;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
    [System.ServiceModel.MessageContractAttribute(WrapperName="getAutoTextResponse", WrapperNamespace="http://xml.otris.de/ws/DOCUMENTS.xsd", IsWrapped=true)]
    public partial class getAutoTextResponse {
        
        [System.ServiceModel.MessageHeaderAttribute(Namespace="http://xml.otris.de/ws/DOCUMENTS.xsd")]
        public string sessionID;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://xml.otris.de/ws/DOCUMENTS.xsd", Order=0)]
        [System.Xml.Serialization.XmlArrayAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        [System.Xml.Serialization.XmlArrayItemAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified, IsNullable=false)]
        public string[] autoTextValues;
        
        public getAutoTextResponse() {
        }
        
        public getAutoTextResponse(string sessionID, string[] autoTextValues) {
            this.sessionID = sessionID;
            this.autoTextValues = autoTextValues;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
    [System.ServiceModel.MessageContractAttribute(WrapperName="getProperty", WrapperNamespace="http://xml.otris.de/ws/DOCUMENTS.xsd", IsWrapped=true)]
    public partial class getPropertyRequest {
        
        [System.ServiceModel.MessageHeaderAttribute(Namespace="http://xml.otris.de/ws/DOCUMENTS.xsd")]
        public string sessionID;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://xml.otris.de/ws/DOCUMENTS.xsd", Order=0)]
        [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public string fileId;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://xml.otris.de/ws/DOCUMENTS.xsd", Order=1)]
        [System.Xml.Serialization.XmlArrayAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        [System.Xml.Serialization.XmlArrayItemAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified, IsNullable=false)]
        public string[] propertyNames;
        
        public getPropertyRequest() {
        }
        
        public getPropertyRequest(string sessionID, string fileId, string[] propertyNames) {
            this.sessionID = sessionID;
            this.fileId = fileId;
            this.propertyNames = propertyNames;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
    [System.ServiceModel.MessageContractAttribute(WrapperName="getPropertyResponse", WrapperNamespace="http://xml.otris.de/ws/DOCUMENTS.xsd", IsWrapped=true)]
    public partial class getPropertyResponse {
        
        [System.ServiceModel.MessageHeaderAttribute(Namespace="http://xml.otris.de/ws/DOCUMENTS.xsd")]
        public string sessionID;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://xml.otris.de/ws/DOCUMENTS.xsd", Order=0)]
        [System.Xml.Serialization.XmlArrayAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        [System.Xml.Serialization.XmlArrayItemAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified, IsNullable=false)]
        public string[] propertyValues;
        
        public getPropertyResponse() {
        }
        
        public getPropertyResponse(string sessionID, string[] propertyValues) {
            this.sessionID = sessionID;
            this.propertyValues = propertyValues;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
    [System.ServiceModel.MessageContractAttribute(WrapperName="getFileInfo", WrapperNamespace="http://xml.otris.de/ws/DOCUMENTS.xsd", IsWrapped=true)]
    public partial class getFileInfoRequest {
        
        [System.ServiceModel.MessageHeaderAttribute(Namespace="http://xml.otris.de/ws/DOCUMENTS.xsd")]
        public string sessionID;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://xml.otris.de/ws/DOCUMENTS.xsd", Order=0)]
        [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public string fileId;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://xml.otris.de/ws/DOCUMENTS.xsd", Order=1)]
        [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public bool allFields;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://xml.otris.de/ws/DOCUMENTS.xsd", Order=2)]
        [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public bool allAttributes;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://xml.otris.de/ws/DOCUMENTS.xsd", Order=3)]
        [System.Xml.Serialization.XmlArrayAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        [System.Xml.Serialization.XmlArrayItemAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified, IsNullable=false)]
        public string[] wishedFieldNames;
        
        public getFileInfoRequest() {
        }
        
        public getFileInfoRequest(string sessionID, string fileId, bool allFields, bool allAttributes, string[] wishedFieldNames) {
            this.sessionID = sessionID;
            this.fileId = fileId;
            this.allFields = allFields;
            this.allAttributes = allAttributes;
            this.wishedFieldNames = wishedFieldNames;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
    [System.ServiceModel.MessageContractAttribute(WrapperName="getFileInfoResponse", WrapperNamespace="http://xml.otris.de/ws/DOCUMENTS.xsd", IsWrapped=true)]
    public partial class getFileInfoResponse {
        
        [System.ServiceModel.MessageHeaderAttribute(Namespace="http://xml.otris.de/ws/DOCUMENTS.xsd")]
        public string sessionID;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://xml.otris.de/ws/DOCUMENTS.xsd", Order=0)]
        [System.Xml.Serialization.XmlArrayAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        [System.Xml.Serialization.XmlArrayItemAttribute("field", Form=System.Xml.Schema.XmlSchemaForm.Unqualified, IsNullable=false)]
        public easyDMSTool.Doc4SOAP.FieldData[] fieldvalues;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://xml.otris.de/ws/DOCUMENTS.xsd", Order=1)]
        [System.Xml.Serialization.XmlArrayAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        [System.Xml.Serialization.XmlArrayItemAttribute("document", Form=System.Xml.Schema.XmlSchemaForm.Unqualified, IsNullable=false)]
        public easyDMSTool.Doc4SOAP.DocInfo[] documents;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://xml.otris.de/ws/DOCUMENTS.xsd", Order=2)]
        [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public string filetypeId;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://xml.otris.de/ws/DOCUMENTS.xsd", Order=3)]
        [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public string filetypeName;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://xml.otris.de/ws/DOCUMENTS.xsd", Order=4)]
        [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public string filetypeLabel;
        
        public getFileInfoResponse() {
        }
        
        public getFileInfoResponse(string sessionID, easyDMSTool.Doc4SOAP.FieldData[] fieldvalues, easyDMSTool.Doc4SOAP.DocInfo[] documents, string filetypeId, string filetypeName, string filetypeLabel) {
            this.sessionID = sessionID;
            this.fieldvalues = fieldvalues;
            this.documents = documents;
            this.filetypeId = filetypeId;
            this.filetypeName = filetypeName;
            this.filetypeLabel = filetypeLabel;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
    [System.ServiceModel.MessageContractAttribute(WrapperName="getFilesInfo", WrapperNamespace="http://xml.otris.de/ws/DOCUMENTS.xsd", IsWrapped=true)]
    public partial class getFilesInfoRequest {
        
        [System.ServiceModel.MessageHeaderAttribute(Namespace="http://xml.otris.de/ws/DOCUMENTS.xsd")]
        public string sessionID;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://xml.otris.de/ws/DOCUMENTS.xsd", Order=0)]
        [System.Xml.Serialization.XmlArrayAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        [System.Xml.Serialization.XmlArrayItemAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified, IsNullable=false)]
        public string[] fileIds;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://xml.otris.de/ws/DOCUMENTS.xsd", Order=1)]
        [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public bool allFields;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://xml.otris.de/ws/DOCUMENTS.xsd", Order=2)]
        [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public bool allAttributes;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://xml.otris.de/ws/DOCUMENTS.xsd", Order=3)]
        [System.Xml.Serialization.XmlArrayAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        [System.Xml.Serialization.XmlArrayItemAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified, IsNullable=false)]
        public string[] wishedFieldNames;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://xml.otris.de/ws/DOCUMENTS.xsd", Order=4)]
        [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public bool failOnAllErrors;
        
        public getFilesInfoRequest() {
        }
        
        public getFilesInfoRequest(string sessionID, string[] fileIds, bool allFields, bool allAttributes, string[] wishedFieldNames, bool failOnAllErrors) {
            this.sessionID = sessionID;
            this.fileIds = fileIds;
            this.allFields = allFields;
            this.allAttributes = allAttributes;
            this.wishedFieldNames = wishedFieldNames;
            this.failOnAllErrors = failOnAllErrors;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
    [System.ServiceModel.MessageContractAttribute(WrapperName="getFilesInfoResponse", WrapperNamespace="http://xml.otris.de/ws/DOCUMENTS.xsd", IsWrapped=true)]
    public partial class getFilesInfoResponse {
        
        [System.ServiceModel.MessageHeaderAttribute(Namespace="http://xml.otris.de/ws/DOCUMENTS.xsd")]
        public string sessionID;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://xml.otris.de/ws/DOCUMENTS.xsd", Order=0)]
        [System.Xml.Serialization.XmlElementAttribute("file", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public easyDMSTool.Doc4SOAP.FileInfo[] file;
        
        public getFilesInfoResponse() {
        }
        
        public getFilesInfoResponse(string sessionID, easyDMSTool.Doc4SOAP.FileInfo[] file) {
            this.sessionID = sessionID;
            this.file = file;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
    [System.ServiceModel.MessageContractAttribute(WrapperName="report", WrapperNamespace="http://xml.otris.de/ws/DOCUMENTS.xsd", IsWrapped=true)]
    public partial class reportRequest {
        
        [System.ServiceModel.MessageHeaderAttribute(Namespace="http://xml.otris.de/ws/DOCUMENTS.xsd")]
        public string sessionID;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://xml.otris.de/ws/DOCUMENTS.xsd", Order=0)]
        [System.Xml.Serialization.XmlArrayAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        [System.Xml.Serialization.XmlArrayItemAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified, IsNullable=false)]
        public string[] filetypes;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://xml.otris.de/ws/DOCUMENTS.xsd", Order=1)]
        [System.Xml.Serialization.XmlArrayAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        [System.Xml.Serialization.XmlArrayItemAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified, IsNullable=false)]
        public string[] archives;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://xml.otris.de/ws/DOCUMENTS.xsd", Order=2)]
        [System.Xml.Serialization.XmlArrayAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        [System.Xml.Serialization.XmlArrayItemAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified, IsNullable=false)]
        public string[] columns;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://xml.otris.de/ws/DOCUMENTS.xsd", Order=3)]
        [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public string filter;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://xml.otris.de/ws/DOCUMENTS.xsd", Order=4)]
        [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public string sort;
        
        public reportRequest() {
        }
        
        public reportRequest(string sessionID, string[] filetypes, string[] archives, string[] columns, string filter, string sort) {
            this.sessionID = sessionID;
            this.filetypes = filetypes;
            this.archives = archives;
            this.columns = columns;
            this.filter = filter;
            this.sort = sort;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
    [System.ServiceModel.MessageContractAttribute(WrapperName="reportResponse", WrapperNamespace="http://xml.otris.de/ws/DOCUMENTS.xsd", IsWrapped=true)]
    public partial class reportResponse {
        
        [System.ServiceModel.MessageHeaderAttribute(Namespace="http://xml.otris.de/ws/DOCUMENTS.xsd")]
        public string sessionID;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://xml.otris.de/ws/DOCUMENTS.xsd", Order=0)]
        [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public string report;
        
        public reportResponse() {
        }
        
        public reportResponse(string sessionID, string report) {
            this.sessionID = sessionID;
            this.report = report;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
    [System.ServiceModel.MessageContractAttribute(WrapperName="report2", WrapperNamespace="http://xml.otris.de/ws/DOCUMENTS.xsd", IsWrapped=true)]
    public partial class report2Request {
        
        [System.ServiceModel.MessageHeaderAttribute(Namespace="http://xml.otris.de/ws/DOCUMENTS.xsd")]
        public string sessionID;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://xml.otris.de/ws/DOCUMENTS.xsd", Order=0)]
        [System.Xml.Serialization.XmlArrayAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        [System.Xml.Serialization.XmlArrayItemAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified, IsNullable=false)]
        public string[] filetypes;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://xml.otris.de/ws/DOCUMENTS.xsd", Order=1)]
        [System.Xml.Serialization.XmlArrayAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        [System.Xml.Serialization.XmlArrayItemAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified, IsNullable=false)]
        public string[] archives;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://xml.otris.de/ws/DOCUMENTS.xsd", Order=2)]
        [System.Xml.Serialization.XmlArrayAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        [System.Xml.Serialization.XmlArrayItemAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified, IsNullable=false)]
        public string[] columns;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://xml.otris.de/ws/DOCUMENTS.xsd", Order=3)]
        [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public string filter;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://xml.otris.de/ws/DOCUMENTS.xsd", Order=4)]
        [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public string sort;
        
        public report2Request() {
        }
        
        public report2Request(string sessionID, string[] filetypes, string[] archives, string[] columns, string filter, string sort) {
            this.sessionID = sessionID;
            this.filetypes = filetypes;
            this.archives = archives;
            this.columns = columns;
            this.filter = filter;
            this.sort = sort;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
    [System.ServiceModel.MessageContractAttribute(WrapperName="report2Respose", WrapperNamespace="http://xml.otris.de/ws/DOCUMENTS.xsd", IsWrapped=true)]
    public partial class report2Response {
        
        [System.ServiceModel.MessageHeaderAttribute(Namespace="http://xml.otris.de/ws/DOCUMENTS.xsd")]
        public string sessionID;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://xml.otris.de/ws/DOCUMENTS.xsd", Order=0)]
        [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public easyDMSTool.Doc4SOAP.HitList hitlist;
        
        public report2Response() {
        }
        
        public report2Response(string sessionID, easyDMSTool.Doc4SOAP.HitList hitlist) {
            this.sessionID = sessionID;
            this.hitlist = hitlist;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
    [System.ServiceModel.MessageContractAttribute(WrapperName="report3", WrapperNamespace="http://xml.otris.de/ws/DOCUMENTS.xsd", IsWrapped=true)]
    public partial class report3Request {
        
        [System.ServiceModel.MessageHeaderAttribute(Namespace="http://xml.otris.de/ws/DOCUMENTS.xsd")]
        public string sessionID;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://xml.otris.de/ws/DOCUMENTS.xsd", Order=0)]
        [System.Xml.Serialization.XmlArrayAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        [System.Xml.Serialization.XmlArrayItemAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified, IsNullable=false)]
        public string[] filetypes;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://xml.otris.de/ws/DOCUMENTS.xsd", Order=1)]
        [System.Xml.Serialization.XmlArrayAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        [System.Xml.Serialization.XmlArrayItemAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified, IsNullable=false)]
        public string[] archives;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://xml.otris.de/ws/DOCUMENTS.xsd", Order=2)]
        [System.Xml.Serialization.XmlArrayAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        [System.Xml.Serialization.XmlArrayItemAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified, IsNullable=false)]
        public string[] columns;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://xml.otris.de/ws/DOCUMENTS.xsd", Order=3)]
        [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public string filter;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://xml.otris.de/ws/DOCUMENTS.xsd", Order=4)]
        [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public string sort;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://xml.otris.de/ws/DOCUMENTS.xsd", Order=5)]
        [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified, IsNullable=true)]
        public string hitlistname;
        
        public report3Request() {
        }
        
        public report3Request(string sessionID, string[] filetypes, string[] archives, string[] columns, string filter, string sort, string hitlistname) {
            this.sessionID = sessionID;
            this.filetypes = filetypes;
            this.archives = archives;
            this.columns = columns;
            this.filter = filter;
            this.sort = sort;
            this.hitlistname = hitlistname;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
    [System.ServiceModel.MessageContractAttribute(WrapperName="report3Respose", WrapperNamespace="http://xml.otris.de/ws/DOCUMENTS.xsd", IsWrapped=true)]
    public partial class report3Response {
        
        [System.ServiceModel.MessageHeaderAttribute(Namespace="http://xml.otris.de/ws/DOCUMENTS.xsd")]
        public string sessionID;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://xml.otris.de/ws/DOCUMENTS.xsd", Order=0)]
        [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public easyDMSTool.Doc4SOAP.HitList hitlist;
        
        public report3Response() {
        }
        
        public report3Response(string sessionID, easyDMSTool.Doc4SOAP.HitList hitlist) {
            this.sessionID = sessionID;
            this.hitlist = hitlist;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
    [System.ServiceModel.MessageContractAttribute(WrapperName="getDocument", WrapperNamespace="http://xml.otris.de/ws/DOCUMENTS.xsd", IsWrapped=true)]
    public partial class getDocumentRequest {
        
        [System.ServiceModel.MessageHeaderAttribute(Namespace="http://xml.otris.de/ws/DOCUMENTS.xsd")]
        public string sessionID;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://xml.otris.de/ws/DOCUMENTS.xsd", Order=0)]
        [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public string fileId;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://xml.otris.de/ws/DOCUMENTS.xsd", Order=1)]
        [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public string docId;
        
        public getDocumentRequest() {
        }
        
        public getDocumentRequest(string sessionID, string fileId, string docId) {
            this.sessionID = sessionID;
            this.fileId = fileId;
            this.docId = docId;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
    [System.ServiceModel.MessageContractAttribute(WrapperName="getDocumentResponse", WrapperNamespace="http://xml.otris.de/ws/DOCUMENTS.xsd", IsWrapped=true)]
    public partial class getDocumentResponse {
        
        [System.ServiceModel.MessageHeaderAttribute(Namespace="http://xml.otris.de/ws/DOCUMENTS.xsd")]
        public string sessionID;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://xml.otris.de/ws/DOCUMENTS.xsd", Order=0)]
        [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public string name;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://xml.otris.de/ws/DOCUMENTS.xsd", Order=1)]
        [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public int size;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://xml.otris.de/ws/DOCUMENTS.xsd", Order=2)]
        [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public string mime;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://xml.otris.de/ws/DOCUMENTS.xsd", Order=3)]
        [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified, DataType="base64Binary", IsNullable=true)]
        public byte[] data;
        
        public getDocumentResponse() {
        }
        
        public getDocumentResponse(string sessionID, string name, int size, string mime, byte[] data) {
            this.sessionID = sessionID;
            this.name = name;
            this.size = size;
            this.mime = mime;
            this.data = data;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
    [System.ServiceModel.MessageContractAttribute(WrapperName="editFile", WrapperNamespace="http://xml.otris.de/ws/DOCUMENTS.xsd", IsWrapped=true)]
    public partial class editFileRequest {
        
        [System.ServiceModel.MessageHeaderAttribute(Namespace="http://xml.otris.de/ws/DOCUMENTS.xsd")]
        public string sessionID;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://xml.otris.de/ws/DOCUMENTS.xsd", Order=0)]
        [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified, IsNullable=true)]
        public string fileId;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://xml.otris.de/ws/DOCUMENTS.xsd", Order=1)]
        [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified, IsNullable=true)]
        public string fileType;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://xml.otris.de/ws/DOCUMENTS.xsd", Order=2)]
        [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified, IsNullable=true)]
        public string keyField;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://xml.otris.de/ws/DOCUMENTS.xsd", Order=3)]
        [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified, IsNullable=true)]
        public string keyValue;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://xml.otris.de/ws/DOCUMENTS.xsd", Order=4)]
        [System.Xml.Serialization.XmlArrayAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        [System.Xml.Serialization.XmlArrayItemAttribute("field", Form=System.Xml.Schema.XmlSchemaForm.Unqualified, IsNullable=false)]
        public easyDMSTool.Doc4SOAP.FieldData[] fields;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://xml.otris.de/ws/DOCUMENTS.xsd", Order=5)]
        [System.Xml.Serialization.XmlArrayAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        [System.Xml.Serialization.XmlArrayItemAttribute("document", Form=System.Xml.Schema.XmlSchemaForm.Unqualified, IsNullable=false)]
        public easyDMSTool.Doc4SOAP.DocUploadData[] addDocs;
        
        public editFileRequest() {
        }
        
        public editFileRequest(string sessionID, string fileId, string fileType, string keyField, string keyValue, easyDMSTool.Doc4SOAP.FieldData[] fields, easyDMSTool.Doc4SOAP.DocUploadData[] addDocs) {
            this.sessionID = sessionID;
            this.fileId = fileId;
            this.fileType = fileType;
            this.keyField = keyField;
            this.keyValue = keyValue;
            this.fields = fields;
            this.addDocs = addDocs;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
    [System.ServiceModel.MessageContractAttribute(WrapperName="editFileResponse", WrapperNamespace="http://xml.otris.de/ws/DOCUMENTS.xsd", IsWrapped=true)]
    public partial class editFileResponse {
        
        [System.ServiceModel.MessageHeaderAttribute(Namespace="http://xml.otris.de/ws/DOCUMENTS.xsd")]
        public string sessionID;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://xml.otris.de/ws/DOCUMENTS.xsd", Order=0)]
        [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public string newId;
        
        public editFileResponse() {
        }
        
        public editFileResponse(string sessionID, string newId) {
            this.sessionID = sessionID;
            this.newId = newId;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
    [System.ServiceModel.MessageContractAttribute(WrapperName="createFile", WrapperNamespace="http://xml.otris.de/ws/DOCUMENTS.xsd", IsWrapped=true)]
    public partial class createFileRequest {
        
        [System.ServiceModel.MessageHeaderAttribute(Namespace="http://xml.otris.de/ws/DOCUMENTS.xsd")]
        public string sessionID;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://xml.otris.de/ws/DOCUMENTS.xsd", Order=0)]
        [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public string fileType;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://xml.otris.de/ws/DOCUMENTS.xsd", Order=1)]
        [System.Xml.Serialization.XmlArrayAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        [System.Xml.Serialization.XmlArrayItemAttribute("field", Form=System.Xml.Schema.XmlSchemaForm.Unqualified, IsNullable=false)]
        public easyDMSTool.Doc4SOAP.FieldData[] fields;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://xml.otris.de/ws/DOCUMENTS.xsd", Order=2)]
        [System.Xml.Serialization.XmlArrayAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        [System.Xml.Serialization.XmlArrayItemAttribute("document", Form=System.Xml.Schema.XmlSchemaForm.Unqualified, IsNullable=false)]
        public easyDMSTool.Doc4SOAP.DocUploadData[] addDocs;
        
        public createFileRequest() {
        }
        
        public createFileRequest(string sessionID, string fileType, easyDMSTool.Doc4SOAP.FieldData[] fields, easyDMSTool.Doc4SOAP.DocUploadData[] addDocs) {
            this.sessionID = sessionID;
            this.fileType = fileType;
            this.fields = fields;
            this.addDocs = addDocs;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
    [System.ServiceModel.MessageContractAttribute(WrapperName="createFileResponse", WrapperNamespace="http://xml.otris.de/ws/DOCUMENTS.xsd", IsWrapped=true)]
    public partial class createFileResponse {
        
        [System.ServiceModel.MessageHeaderAttribute(Namespace="http://xml.otris.de/ws/DOCUMENTS.xsd")]
        public string sessionID;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://xml.otris.de/ws/DOCUMENTS.xsd", Order=0)]
        [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public string fileId;
        
        public createFileResponse() {
        }
        
        public createFileResponse(string sessionID, string fileId) {
            this.sessionID = sessionID;
            this.fileId = fileId;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
    [System.ServiceModel.MessageContractAttribute(WrapperName="createFile2", WrapperNamespace="http://xml.otris.de/ws/DOCUMENTS.xsd", IsWrapped=true)]
    public partial class createFile2Request {
        
        [System.ServiceModel.MessageHeaderAttribute(Namespace="http://xml.otris.de/ws/DOCUMENTS.xsd")]
        public string sessionID;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://xml.otris.de/ws/DOCUMENTS.xsd", Order=0)]
        [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public string fileType;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://xml.otris.de/ws/DOCUMENTS.xsd", Order=1)]
        [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public bool directEAS;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://xml.otris.de/ws/DOCUMENTS.xsd", Order=2)]
        [System.Xml.Serialization.XmlArrayAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        [System.Xml.Serialization.XmlArrayItemAttribute("field", Form=System.Xml.Schema.XmlSchemaForm.Unqualified, IsNullable=false)]
        public easyDMSTool.Doc4SOAP.FieldData[] fields;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://xml.otris.de/ws/DOCUMENTS.xsd", Order=3)]
        [System.Xml.Serialization.XmlArrayAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        [System.Xml.Serialization.XmlArrayItemAttribute("document", Form=System.Xml.Schema.XmlSchemaForm.Unqualified, IsNullable=false)]
        public easyDMSTool.Doc4SOAP.DocUploadData[] addDocs;
        
        public createFile2Request() {
        }
        
        public createFile2Request(string sessionID, string fileType, bool directEAS, easyDMSTool.Doc4SOAP.FieldData[] fields, easyDMSTool.Doc4SOAP.DocUploadData[] addDocs) {
            this.sessionID = sessionID;
            this.fileType = fileType;
            this.directEAS = directEAS;
            this.fields = fields;
            this.addDocs = addDocs;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
    [System.ServiceModel.MessageContractAttribute(WrapperName="createFile2Response", WrapperNamespace="http://xml.otris.de/ws/DOCUMENTS.xsd", IsWrapped=true)]
    public partial class createFile2Response {
        
        [System.ServiceModel.MessageHeaderAttribute(Namespace="http://xml.otris.de/ws/DOCUMENTS.xsd")]
        public string sessionID;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://xml.otris.de/ws/DOCUMENTS.xsd", Order=0)]
        [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public string fileId;
        
        public createFile2Response() {
        }
        
        public createFile2Response(string sessionID, string fileId) {
            this.sessionID = sessionID;
            this.fileId = fileId;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
    [System.ServiceModel.MessageContractAttribute(WrapperName="getFileTypes", WrapperNamespace="http://xml.otris.de/ws/DOCUMENTS.xsd", IsWrapped=true)]
    public partial class getFileTypesRequest {
        
        [System.ServiceModel.MessageHeaderAttribute(Namespace="http://xml.otris.de/ws/DOCUMENTS.xsd")]
        public string sessionID;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://xml.otris.de/ws/DOCUMENTS.xsd", Order=0)]
        [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public bool ignoreRight;
        
        public getFileTypesRequest() {
        }
        
        public getFileTypesRequest(string sessionID, bool ignoreRight) {
            this.sessionID = sessionID;
            this.ignoreRight = ignoreRight;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
    [System.ServiceModel.MessageContractAttribute(WrapperName="getFileTypesResponse", WrapperNamespace="http://xml.otris.de/ws/DOCUMENTS.xsd", IsWrapped=true)]
    public partial class getFileTypesResponse {
        
        [System.ServiceModel.MessageHeaderAttribute(Namespace="http://xml.otris.de/ws/DOCUMENTS.xsd")]
        public string sessionID;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://xml.otris.de/ws/DOCUMENTS.xsd", Order=0)]
        [System.Xml.Serialization.XmlElementAttribute("filetype", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public easyDMSTool.Doc4SOAP.FileTypeShortDescr[] filetype;
        
        public getFileTypesResponse() {
        }
        
        public getFileTypesResponse(string sessionID, easyDMSTool.Doc4SOAP.FileTypeShortDescr[] filetype) {
            this.sessionID = sessionID;
            this.filetype = filetype;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
    [System.ServiceModel.MessageContractAttribute(WrapperName="describeFileType", WrapperNamespace="http://xml.otris.de/ws/DOCUMENTS.xsd", IsWrapped=true)]
    public partial class describeFileTypeRequest {
        
        [System.ServiceModel.MessageHeaderAttribute(Namespace="http://xml.otris.de/ws/DOCUMENTS.xsd")]
        public string sessionID;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://xml.otris.de/ws/DOCUMENTS.xsd", Order=0)]
        [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified, IsNullable=true)]
        public string name;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://xml.otris.de/ws/DOCUMENTS.xsd", Order=1)]
        [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified, IsNullable=true)]
        public string id;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://xml.otris.de/ws/DOCUMENTS.xsd", Order=2)]
        [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public string categories;
        
        public describeFileTypeRequest() {
        }
        
        public describeFileTypeRequest(string sessionID, string name, string id, string categories) {
            this.sessionID = sessionID;
            this.name = name;
            this.id = id;
            this.categories = categories;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
    [System.ServiceModel.MessageContractAttribute(WrapperName="describeFileTypeResponse", WrapperNamespace="http://xml.otris.de/ws/DOCUMENTS.xsd", IsWrapped=true)]
    public partial class describeFileTypeResponse {
        
        [System.ServiceModel.MessageHeaderAttribute(Namespace="http://xml.otris.de/ws/DOCUMENTS.xsd")]
        public string sessionID;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://xml.otris.de/ws/DOCUMENTS.xsd", Order=0)]
        [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public easyDMSTool.Doc4SOAP.FileTypeDescription description;
        
        public describeFileTypeResponse() {
        }
        
        public describeFileTypeResponse(string sessionID, easyDMSTool.Doc4SOAP.FileTypeDescription description) {
            this.sessionID = sessionID;
            this.description = description;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
    [System.ServiceModel.MessageContractAttribute(WrapperName="describeFileType2", WrapperNamespace="http://xml.otris.de/ws/DOCUMENTS.xsd", IsWrapped=true)]
    public partial class describeFileType2Request {
        
        [System.ServiceModel.MessageHeaderAttribute(Namespace="http://xml.otris.de/ws/DOCUMENTS.xsd")]
        public string sessionID;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://xml.otris.de/ws/DOCUMENTS.xsd", Order=0)]
        [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified, IsNullable=true)]
        public string name;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://xml.otris.de/ws/DOCUMENTS.xsd", Order=1)]
        [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified, IsNullable=true)]
        public string id;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://xml.otris.de/ws/DOCUMENTS.xsd", Order=2)]
        [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public string categories;
        
        public describeFileType2Request() {
        }
        
        public describeFileType2Request(string sessionID, string name, string id, string categories) {
            this.sessionID = sessionID;
            this.name = name;
            this.id = id;
            this.categories = categories;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
    [System.ServiceModel.MessageContractAttribute(WrapperName="describeFileType2Response", WrapperNamespace="http://xml.otris.de/ws/DOCUMENTS.xsd", IsWrapped=true)]
    public partial class describeFileType2Response {
        
        [System.ServiceModel.MessageHeaderAttribute(Namespace="http://xml.otris.de/ws/DOCUMENTS.xsd")]
        public string sessionID;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://xml.otris.de/ws/DOCUMENTS.xsd", Order=0)]
        [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public easyDMSTool.Doc4SOAP.FileTypeDescription2 description;
        
        public describeFileType2Response() {
        }
        
        public describeFileType2Response(string sessionID, easyDMSTool.Doc4SOAP.FileTypeDescription2 description) {
            this.sessionID = sessionID;
            this.description = description;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
    [System.ServiceModel.MessageContractAttribute(WrapperName="browseFolder", WrapperNamespace="http://xml.otris.de/ws/DOCUMENTS.xsd", IsWrapped=true)]
    public partial class browseFolderRequest {
        
        [System.ServiceModel.MessageHeaderAttribute(Namespace="http://xml.otris.de/ws/DOCUMENTS.xsd")]
        public string sessionID;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://xml.otris.de/ws/DOCUMENTS.xsd", Order=0)]
        [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified, IsNullable=true)]
        public string folderName;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://xml.otris.de/ws/DOCUMENTS.xsd", Order=1)]
        [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified, IsNullable=true)]
        public string folderId;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://xml.otris.de/ws/DOCUMENTS.xsd", Order=2)]
        [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified, IsNullable=true)]
        public string folderType;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://xml.otris.de/ws/DOCUMENTS.xsd", Order=3)]
        [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public int startindex;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://xml.otris.de/ws/DOCUMENTS.xsd", Order=4)]
        [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified, IsNullable=true)]
        public System.Nullable<int> count;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://xml.otris.de/ws/DOCUMENTS.xsd", Order=5)]
        [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public bool preview;
        
        public browseFolderRequest() {
        }
        
        public browseFolderRequest(string sessionID, string folderName, string folderId, string folderType, int startindex, System.Nullable<int> count, bool preview) {
            this.sessionID = sessionID;
            this.folderName = folderName;
            this.folderId = folderId;
            this.folderType = folderType;
            this.startindex = startindex;
            this.count = count;
            this.preview = preview;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
    [System.ServiceModel.MessageContractAttribute(WrapperName="browseFolderResponse", WrapperNamespace="http://xml.otris.de/ws/DOCUMENTS.xsd", IsWrapped=true)]
    public partial class browseFolderResponse {
        
        [System.ServiceModel.MessageHeaderAttribute(Namespace="http://xml.otris.de/ws/DOCUMENTS.xsd")]
        public string sessionID;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://xml.otris.de/ws/DOCUMENTS.xsd", Order=0)]
        [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public string headline;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://xml.otris.de/ws/DOCUMENTS.xsd", Order=1)]
        [System.Xml.Serialization.XmlArrayAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        [System.Xml.Serialization.XmlArrayItemAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified, IsNullable=false)]
        public string[] fieldNames;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://xml.otris.de/ws/DOCUMENTS.xsd", Order=2)]
        [System.Xml.Serialization.XmlArrayAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        [System.Xml.Serialization.XmlArrayItemAttribute("file", Form=System.Xml.Schema.XmlSchemaForm.Unqualified, IsNullable=false)]
        public easyDMSTool.Doc4SOAP.FolderFile[] files;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://xml.otris.de/ws/DOCUMENTS.xsd", Order=3)]
        [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public int previousIndex;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://xml.otris.de/ws/DOCUMENTS.xsd", Order=4)]
        [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public int nextIndex;
        
        public browseFolderResponse() {
        }
        
        public browseFolderResponse(string sessionID, string headline, string[] fieldNames, easyDMSTool.Doc4SOAP.FolderFile[] files, int previousIndex, int nextIndex) {
            this.sessionID = sessionID;
            this.headline = headline;
            this.fieldNames = fieldNames;
            this.files = files;
            this.previousIndex = previousIndex;
            this.nextIndex = nextIndex;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
    [System.ServiceModel.MessageContractAttribute(WrapperName="getFolderStructure", WrapperNamespace="http://xml.otris.de/ws/DOCUMENTS.xsd", IsWrapped=true)]
    public partial class getFolderStructureRequest {
        
        [System.ServiceModel.MessageHeaderAttribute(Namespace="http://xml.otris.de/ws/DOCUMENTS.xsd")]
        public string sessionID;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://xml.otris.de/ws/DOCUMENTS.xsd", Order=0)]
        [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public string folderType;
        
        public getFolderStructureRequest() {
        }
        
        public getFolderStructureRequest(string sessionID, string folderType) {
            this.sessionID = sessionID;
            this.folderType = folderType;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
    [System.ServiceModel.MessageContractAttribute(WrapperName="getFolderStructureResponse", WrapperNamespace="http://xml.otris.de/ws/DOCUMENTS.xsd", IsWrapped=true)]
    public partial class getFolderStructureResponse {
        
        [System.ServiceModel.MessageHeaderAttribute(Namespace="http://xml.otris.de/ws/DOCUMENTS.xsd")]
        public string sessionID;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://xml.otris.de/ws/DOCUMENTS.xsd", Order=0)]
        [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public easyDMSTool.Doc4SOAP.FolderDescription baseFolder;
        
        public getFolderStructureResponse() {
        }
        
        public getFolderStructureResponse(string sessionID, easyDMSTool.Doc4SOAP.FolderDescription baseFolder) {
            this.sessionID = sessionID;
            this.baseFolder = baseFolder;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
    [System.ServiceModel.MessageContractAttribute(WrapperName="runScript", WrapperNamespace="http://xml.otris.de/ws/DOCUMENTS.xsd", IsWrapped=true)]
    public partial class runScriptRequest {
        
        [System.ServiceModel.MessageHeaderAttribute(Namespace="http://xml.otris.de/ws/DOCUMENTS.xsd")]
        public string sessionID;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://xml.otris.de/ws/DOCUMENTS.xsd", Order=0)]
        [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public string fileId;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://xml.otris.de/ws/DOCUMENTS.xsd", Order=1)]
        [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public string name;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://xml.otris.de/ws/DOCUMENTS.xsd", Order=2)]
        [System.Xml.Serialization.XmlArrayAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified, IsNullable=true)]
        [System.Xml.Serialization.XmlArrayItemAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified, IsNullable=false)]
        public string[] paramList;
        
        public runScriptRequest() {
        }
        
        public runScriptRequest(string sessionID, string fileId, string name, string[] paramList) {
            this.sessionID = sessionID;
            this.fileId = fileId;
            this.name = name;
            this.paramList = paramList;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
    [System.ServiceModel.MessageContractAttribute(WrapperName="runScriptResponse", WrapperNamespace="http://xml.otris.de/ws/DOCUMENTS.xsd", IsWrapped=true)]
    public partial class runScriptResponse {
        
        [System.ServiceModel.MessageHeaderAttribute(Namespace="http://xml.otris.de/ws/DOCUMENTS.xsd")]
        public string sessionID;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://xml.otris.de/ws/DOCUMENTS.xsd", Order=0)]
        [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public int returnStatus;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://xml.otris.de/ws/DOCUMENTS.xsd", Order=1)]
        [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public string errorMsg;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://xml.otris.de/ws/DOCUMENTS.xsd", Order=2)]
        [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public string returnValue;
        
        public runScriptResponse() {
        }
        
        public runScriptResponse(string sessionID, int returnStatus, string errorMsg, string returnValue) {
            this.sessionID = sessionID;
            this.returnStatus = returnStatus;
            this.errorMsg = errorMsg;
            this.returnValue = returnValue;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
    [System.ServiceModel.MessageContractAttribute(WrapperName="userInfo", WrapperNamespace="http://xml.otris.de/ws/DOCUMENTS.xsd", IsWrapped=true)]
    public partial class userInfoRequest {
        
        [System.ServiceModel.MessageHeaderAttribute(Namespace="http://xml.otris.de/ws/DOCUMENTS.xsd")]
        public string sessionID;
        
        public userInfoRequest() {
        }
        
        public userInfoRequest(string sessionID) {
            this.sessionID = sessionID;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
    [System.ServiceModel.MessageContractAttribute(WrapperName="userInfoResponse", WrapperNamespace="http://xml.otris.de/ws/DOCUMENTS.xsd", IsWrapped=true)]
    public partial class userInfoResponse {
        
        [System.ServiceModel.MessageHeaderAttribute(Namespace="http://xml.otris.de/ws/DOCUMENTS.xsd")]
        public string sessionID;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://xml.otris.de/ws/DOCUMENTS.xsd", Order=0)]
        [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public string name;
        
        public userInfoResponse() {
        }
        
        public userInfoResponse(string sessionID, string name) {
            this.sessionID = sessionID;
            this.name = name;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
    [System.ServiceModel.MessageContractAttribute(WrapperName="archiveFiles", WrapperNamespace="http://xml.otris.de/ws/DOCUMENTS.xsd", IsWrapped=true)]
    public partial class archiveFilesRequest {
        
        [System.ServiceModel.MessageHeaderAttribute(Namespace="http://xml.otris.de/ws/DOCUMENTS.xsd")]
        public string sessionID;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://xml.otris.de/ws/DOCUMENTS.xsd", Order=0)]
        [System.Xml.Serialization.XmlArrayAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        [System.Xml.Serialization.XmlArrayItemAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified, IsNullable=false)]
        public string[] fileIds;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://xml.otris.de/ws/DOCUMENTS.xsd", Order=1)]
        [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public bool deleteOnSuccess;
        
        public archiveFilesRequest() {
        }
        
        public archiveFilesRequest(string sessionID, string[] fileIds, bool deleteOnSuccess) {
            this.sessionID = sessionID;
            this.fileIds = fileIds;
            this.deleteOnSuccess = deleteOnSuccess;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
    [System.ServiceModel.MessageContractAttribute(WrapperName="archiveFilesResponse", WrapperNamespace="http://xml.otris.de/ws/DOCUMENTS.xsd", IsWrapped=true)]
    public partial class archiveFilesResponse {
        
        [System.ServiceModel.MessageHeaderAttribute(Namespace="http://xml.otris.de/ws/DOCUMENTS.xsd")]
        public string sessionID;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://xml.otris.de/ws/DOCUMENTS.xsd", Order=0)]
        [System.Xml.Serialization.XmlArrayAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        [System.Xml.Serialization.XmlArrayItemAttribute("status", Form=System.Xml.Schema.XmlSchemaForm.Unqualified, IsNullable=false)]
        public easyDMSTool.Doc4SOAP.ArchiveStatus[] statusList;
        
        public archiveFilesResponse() {
        }
        
        public archiveFilesResponse(string sessionID, easyDMSTool.Doc4SOAP.ArchiveStatus[] statusList) {
            this.sessionID = sessionID;
            this.statusList = statusList;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
    [System.ServiceModel.MessageContractAttribute(WrapperName="deleteFiles", WrapperNamespace="http://xml.otris.de/ws/DOCUMENTS.xsd", IsWrapped=true)]
    public partial class deleteFilesRequest {
        
        [System.ServiceModel.MessageHeaderAttribute(Namespace="http://xml.otris.de/ws/DOCUMENTS.xsd")]
        public string sessionID;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://xml.otris.de/ws/DOCUMENTS.xsd", Order=0)]
        [System.Xml.Serialization.XmlArrayAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        [System.Xml.Serialization.XmlArrayItemAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified, IsNullable=false)]
        public string[] fileIds;
        
        public deleteFilesRequest() {
        }
        
        public deleteFilesRequest(string sessionID, string[] fileIds) {
            this.sessionID = sessionID;
            this.fileIds = fileIds;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
    [System.ServiceModel.MessageContractAttribute(WrapperName="deleteFilesResponse", WrapperNamespace="http://xml.otris.de/ws/DOCUMENTS.xsd", IsWrapped=true)]
    public partial class deleteFilesResponse {
        
        [System.ServiceModel.MessageHeaderAttribute(Namespace="http://xml.otris.de/ws/DOCUMENTS.xsd")]
        public string sessionID;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://xml.otris.de/ws/DOCUMENTS.xsd", Order=0)]
        [System.Xml.Serialization.XmlArrayAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        [System.Xml.Serialization.XmlArrayItemAttribute("status", Form=System.Xml.Schema.XmlSchemaForm.Unqualified, IsNullable=false)]
        public easyDMSTool.Doc4SOAP.DeleteStatus[] statusList;
        
        public deleteFilesResponse() {
        }
        
        public deleteFilesResponse(string sessionID, easyDMSTool.Doc4SOAP.DeleteStatus[] statusList) {
            this.sessionID = sessionID;
            this.statusList = statusList;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
    [System.ServiceModel.MessageContractAttribute(WrapperName="deleteDocuments", WrapperNamespace="http://xml.otris.de/ws/DOCUMENTS.xsd", IsWrapped=true)]
    public partial class deleteDocumentsRequest {
        
        [System.ServiceModel.MessageHeaderAttribute(Namespace="http://xml.otris.de/ws/DOCUMENTS.xsd")]
        public string sessionID;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://xml.otris.de/ws/DOCUMENTS.xsd", Order=0)]
        [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public string fileId;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://xml.otris.de/ws/DOCUMENTS.xsd", Order=1)]
        [System.Xml.Serialization.XmlArrayAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        [System.Xml.Serialization.XmlArrayItemAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified, IsNullable=false)]
        public string[] docIds;
        
        public deleteDocumentsRequest() {
        }
        
        public deleteDocumentsRequest(string sessionID, string fileId, string[] docIds) {
            this.sessionID = sessionID;
            this.fileId = fileId;
            this.docIds = docIds;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
    [System.ServiceModel.MessageContractAttribute(WrapperName="deleteDocumentsResponse", WrapperNamespace="http://xml.otris.de/ws/DOCUMENTS.xsd", IsWrapped=true)]
    public partial class deleteDocumentsResponse {
        
        [System.ServiceModel.MessageHeaderAttribute(Namespace="http://xml.otris.de/ws/DOCUMENTS.xsd")]
        public string sessionID;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://xml.otris.de/ws/DOCUMENTS.xsd", Order=0)]
        [System.Xml.Serialization.XmlArrayAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        [System.Xml.Serialization.XmlArrayItemAttribute("status", Form=System.Xml.Schema.XmlSchemaForm.Unqualified, IsNullable=false)]
        public easyDMSTool.Doc4SOAP.DeleteStatus[] statusList;
        
        public deleteDocumentsResponse() {
        }
        
        public deleteDocumentsResponse(string sessionID, easyDMSTool.Doc4SOAP.DeleteStatus[] statusList) {
            this.sessionID = sessionID;
            this.statusList = statusList;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
    [System.ServiceModel.MessageContractAttribute(WrapperName="listPossibleActions", WrapperNamespace="http://xml.otris.de/ws/DOCUMENTS.xsd", IsWrapped=true)]
    public partial class listPossibleActionsRequest {
        
        [System.ServiceModel.MessageHeaderAttribute(Namespace="http://xml.otris.de/ws/DOCUMENTS.xsd")]
        public string sessionID;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://xml.otris.de/ws/DOCUMENTS.xsd", Order=0)]
        [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public string fileId;
        
        public listPossibleActionsRequest() {
        }
        
        public listPossibleActionsRequest(string sessionID, string fileId) {
            this.sessionID = sessionID;
            this.fileId = fileId;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
    [System.ServiceModel.MessageContractAttribute(WrapperName="listPossibleActionsResponse", WrapperNamespace="http://xml.otris.de/ws/DOCUMENTS.xsd", IsWrapped=true)]
    public partial class listPossibleActionsResponse {
        
        [System.ServiceModel.MessageHeaderAttribute(Namespace="http://xml.otris.de/ws/DOCUMENTS.xsd")]
        public string sessionID;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://xml.otris.de/ws/DOCUMENTS.xsd", Order=0)]
        [System.Xml.Serialization.XmlArrayAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        [System.Xml.Serialization.XmlArrayItemAttribute("action", Form=System.Xml.Schema.XmlSchemaForm.Unqualified, IsNullable=false)]
        public easyDMSTool.Doc4SOAP.WorkflowAction[] actions;
        
        public listPossibleActionsResponse() {
        }
        
        public listPossibleActionsResponse(string sessionID, easyDMSTool.Doc4SOAP.WorkflowAction[] actions) {
            this.sessionID = sessionID;
            this.actions = actions;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
    [System.ServiceModel.MessageContractAttribute(WrapperName="triggerAction", WrapperNamespace="http://xml.otris.de/ws/DOCUMENTS.xsd", IsWrapped=true)]
    public partial class triggerActionRequest {
        
        [System.ServiceModel.MessageHeaderAttribute(Namespace="http://xml.otris.de/ws/DOCUMENTS.xsd")]
        public string sessionID;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://xml.otris.de/ws/DOCUMENTS.xsd", Order=0)]
        [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public string fileId;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://xml.otris.de/ws/DOCUMENTS.xsd", Order=1)]
        [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public string actionId;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://xml.otris.de/ws/DOCUMENTS.xsd", Order=2)]
        [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified, IsNullable=true)]
        public string comment;
        
        public triggerActionRequest() {
        }
        
        public triggerActionRequest(string sessionID, string fileId, string actionId, string comment) {
            this.sessionID = sessionID;
            this.fileId = fileId;
            this.actionId = actionId;
            this.comment = comment;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
    [System.ServiceModel.MessageContractAttribute(WrapperName="triggerActionResponse", WrapperNamespace="http://xml.otris.de/ws/DOCUMENTS.xsd", IsWrapped=true)]
    public partial class triggerActionResponse {
        
        [System.ServiceModel.MessageHeaderAttribute(Namespace="http://xml.otris.de/ws/DOCUMENTS.xsd")]
        public string sessionID;
        
        public triggerActionResponse() {
        }
        
        public triggerActionResponse(string sessionID) {
            this.sessionID = sessionID;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
    [System.ServiceModel.MessageContractAttribute(WrapperName="followUp", WrapperNamespace="http://xml.otris.de/ws/DOCUMENTS.xsd", IsWrapped=true)]
    public partial class followUpRequest {
        
        [System.ServiceModel.MessageHeaderAttribute(Namespace="http://xml.otris.de/ws/DOCUMENTS.xsd")]
        public string sessionID;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://xml.otris.de/ws/DOCUMENTS.xsd", Order=0)]
        [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public string fileId;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://xml.otris.de/ws/DOCUMENTS.xsd", Order=1)]
        [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified, IsNullable=true)]
        public System.Nullable<System.DateTime> timeAbsolute;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://xml.otris.de/ws/DOCUMENTS.xsd", Order=2)]
        [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public bool isUTC;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://xml.otris.de/ws/DOCUMENTS.xsd", Order=3)]
        [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public string comment;
        
        public followUpRequest() {
        }
        
        public followUpRequest(string sessionID, string fileId, System.Nullable<System.DateTime> timeAbsolute, bool isUTC, string comment) {
            this.sessionID = sessionID;
            this.fileId = fileId;
            this.timeAbsolute = timeAbsolute;
            this.isUTC = isUTC;
            this.comment = comment;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
    [System.ServiceModel.MessageContractAttribute(WrapperName="followUpResponse", WrapperNamespace="http://xml.otris.de/ws/DOCUMENTS.xsd", IsWrapped=true)]
    public partial class followUpResponse {
        
        [System.ServiceModel.MessageHeaderAttribute(Namespace="http://xml.otris.de/ws/DOCUMENTS.xsd")]
        public string sessionID;
        
        public followUpResponse() {
        }
        
        public followUpResponse(string sessionID) {
            this.sessionID = sessionID;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
    [System.ServiceModel.MessageContractAttribute(WrapperName="sendFileAdHoc", WrapperNamespace="http://xml.otris.de/ws/DOCUMENTS.xsd", IsWrapped=true)]
    public partial class sendFileAdHocRequest {
        
        [System.ServiceModel.MessageHeaderAttribute(Namespace="http://xml.otris.de/ws/DOCUMENTS.xsd")]
        public string sessionID;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://xml.otris.de/ws/DOCUMENTS.xsd", Order=0)]
        [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public string fileId;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://xml.otris.de/ws/DOCUMENTS.xsd", Order=1)]
        [System.Xml.Serialization.XmlArrayAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        [System.Xml.Serialization.XmlArrayItemAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified, IsNullable=false)]
        public string[] receivers;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://xml.otris.de/ws/DOCUMENTS.xsd", Order=2)]
        [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public string sendMode;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://xml.otris.de/ws/DOCUMENTS.xsd", Order=3)]
        [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public string task;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://xml.otris.de/ws/DOCUMENTS.xsd", Order=4)]
        [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public bool backWhenFinished;
        
        public sendFileAdHocRequest() {
        }
        
        public sendFileAdHocRequest(string sessionID, string fileId, string[] receivers, string sendMode, string task, bool backWhenFinished) {
            this.sessionID = sessionID;
            this.fileId = fileId;
            this.receivers = receivers;
            this.sendMode = sendMode;
            this.task = task;
            this.backWhenFinished = backWhenFinished;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
    [System.ServiceModel.MessageContractAttribute(WrapperName="sendFileAdHocResponse", WrapperNamespace="http://xml.otris.de/ws/DOCUMENTS.xsd", IsWrapped=true)]
    public partial class sendFileAdHocResponse {
        
        [System.ServiceModel.MessageHeaderAttribute(Namespace="http://xml.otris.de/ws/DOCUMENTS.xsd")]
        public string sessionID;
        
        public sendFileAdHocResponse() {
        }
        
        public sendFileAdHocResponse(string sessionID) {
            this.sessionID = sessionID;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
    [System.ServiceModel.MessageContractAttribute(WrapperName="getFileId", WrapperNamespace="http://xml.otris.de/ws/DOCUMENTS.xsd", IsWrapped=true)]
    public partial class getFileIdRequest {
        
        [System.ServiceModel.MessageHeaderAttribute(Namespace="http://xml.otris.de/ws/DOCUMENTS.xsd")]
        public string sessionID;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://xml.otris.de/ws/DOCUMENTS.xsd", Order=0)]
        [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public string key;
        
        public getFileIdRequest() {
        }
        
        public getFileIdRequest(string sessionID, string key) {
            this.sessionID = sessionID;
            this.key = key;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
    [System.ServiceModel.MessageContractAttribute(WrapperName="getFileIdResponse", WrapperNamespace="http://xml.otris.de/ws/DOCUMENTS.xsd", IsWrapped=true)]
    public partial class getFileIdResponse {
        
        [System.ServiceModel.MessageHeaderAttribute(Namespace="http://xml.otris.de/ws/DOCUMENTS.xsd")]
        public string sessionID;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://xml.otris.de/ws/DOCUMENTS.xsd", Order=0)]
        [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public string fileId;
        
        public getFileIdResponse() {
        }
        
        public getFileIdResponse(string sessionID, string fileId) {
            this.sessionID = sessionID;
            this.fileId = fileId;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
    [System.ServiceModel.MessageContractAttribute(WrapperName="listPublicFolders", WrapperNamespace="http://xml.otris.de/ws/DOCUMENTS.xsd", IsWrapped=true)]
    public partial class listPublicFoldersRequest {
        
        [System.ServiceModel.MessageHeaderAttribute(Namespace="http://xml.otris.de/ws/DOCUMENTS.xsd")]
        public string sessionID;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://xml.otris.de/ws/DOCUMENTS.xsd", Order=0)]
        [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public int typeOption;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://xml.otris.de/ws/DOCUMENTS.xsd", Order=1)]
        [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public int sortOption;
        
        public listPublicFoldersRequest() {
        }
        
        public listPublicFoldersRequest(string sessionID, int typeOption, int sortOption) {
            this.sessionID = sessionID;
            this.typeOption = typeOption;
            this.sortOption = sortOption;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
    [System.ServiceModel.MessageContractAttribute(WrapperName="listPublicFoldersResponse", WrapperNamespace="http://xml.otris.de/ws/DOCUMENTS.xsd", IsWrapped=true)]
    public partial class listPublicFoldersResponse {
        
        [System.ServiceModel.MessageHeaderAttribute(Namespace="http://xml.otris.de/ws/DOCUMENTS.xsd")]
        public string sessionID;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://xml.otris.de/ws/DOCUMENTS.xsd", Order=0)]
        [System.Xml.Serialization.XmlArrayAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        [System.Xml.Serialization.XmlArrayItemAttribute("folder", Form=System.Xml.Schema.XmlSchemaForm.Unqualified, IsNullable=false)]
        public easyDMSTool.Doc4SOAP.FolderDescription2[] folders;
        
        public listPublicFoldersResponse() {
        }
        
        public listPublicFoldersResponse(string sessionID, easyDMSTool.Doc4SOAP.FolderDescription2[] folders) {
            this.sessionID = sessionID;
            this.folders = folders;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
    [System.ServiceModel.MessageContractAttribute(WrapperName="getFilingPlans", WrapperNamespace="http://xml.otris.de/ws/DOCUMENTS.xsd", IsWrapped=true)]
    public partial class getFilingPlansRequest {
        
        [System.ServiceModel.MessageHeaderAttribute(Namespace="http://xml.otris.de/ws/DOCUMENTS.xsd")]
        public string sessionID;
        
        public getFilingPlansRequest() {
        }
        
        public getFilingPlansRequest(string sessionID) {
            this.sessionID = sessionID;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
    [System.ServiceModel.MessageContractAttribute(WrapperName="getFilingPlansResponse", WrapperNamespace="http://xml.otris.de/ws/DOCUMENTS.xsd", IsWrapped=true)]
    public partial class getFilingPlansResponse {
        
        [System.ServiceModel.MessageHeaderAttribute(Namespace="http://xml.otris.de/ws/DOCUMENTS.xsd")]
        public string sessionID;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://xml.otris.de/ws/DOCUMENTS.xsd", Order=0)]
        [System.Xml.Serialization.XmlArrayAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        [System.Xml.Serialization.XmlArrayItemAttribute("filingPlans", Form=System.Xml.Schema.XmlSchemaForm.Unqualified, IsNullable=false)]
        public easyDMSTool.Doc4SOAP.FilingPlan[] filingPlans;
        
        public getFilingPlansResponse() {
        }
        
        public getFilingPlansResponse(string sessionID, easyDMSTool.Doc4SOAP.FilingPlan[] filingPlans) {
            this.sessionID = sessionID;
            this.filingPlans = filingPlans;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
    [System.ServiceModel.MessageContractAttribute(WrapperName="getFilingPlanXML", WrapperNamespace="http://xml.otris.de/ws/DOCUMENTS.xsd", IsWrapped=true)]
    public partial class getFilingPlanXMLRequest {
        
        [System.ServiceModel.MessageHeaderAttribute(Namespace="http://xml.otris.de/ws/DOCUMENTS.xsd")]
        public string sessionID;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://xml.otris.de/ws/DOCUMENTS.xsd", Order=0)]
        [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public string name;
        
        public getFilingPlanXMLRequest() {
        }
        
        public getFilingPlanXMLRequest(string sessionID, string name) {
            this.sessionID = sessionID;
            this.name = name;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
    [System.ServiceModel.MessageContractAttribute(WrapperName="getFilingPlanXMLResponse", WrapperNamespace="http://xml.otris.de/ws/DOCUMENTS.xsd", IsWrapped=true)]
    public partial class getFilingPlanXMLResponse {
        
        [System.ServiceModel.MessageHeaderAttribute(Namespace="http://xml.otris.de/ws/DOCUMENTS.xsd")]
        public string sessionID;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://xml.otris.de/ws/DOCUMENTS.xsd", Order=0)]
        [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public string filingPlanXml;
        
        public getFilingPlanXMLResponse() {
        }
        
        public getFilingPlanXMLResponse(string sessionID, string filingPlanXml) {
            this.sessionID = sessionID;
            this.filingPlanXml = filingPlanXml;
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface DOCUMENTSPortTypeChannel : easyDMSTool.Doc4SOAP.DOCUMENTSPortType, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class loginCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public loginCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public string session {
            get {
                base.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
        
        public string Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((string)(this.results[1]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class trustedLoginCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public trustedLoginCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public string session {
            get {
                base.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
        
        public string Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((string)(this.results[1]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class logoutCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public logoutCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public string Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class testSessionCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public testSessionCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public bool valid {
            get {
                base.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
        
        public string Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((string)(this.results[1]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class getInboxCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public getInboxCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public string idFolder {
            get {
                base.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
        
        public easyDMSTool.Doc4SOAP.FileStatus[] fileStatuses {
            get {
                base.RaiseExceptionIfNecessary();
                return ((easyDMSTool.Doc4SOAP.FileStatus[])(this.results[1]));
            }
        }
        
        public string Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((string)(this.results[2]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class getSentFolderCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public getSentFolderCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public string idFolder {
            get {
                base.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
        
        public easyDMSTool.Doc4SOAP.FileStatus[] fileStatuses {
            get {
                base.RaiseExceptionIfNecessary();
                return ((easyDMSTool.Doc4SOAP.FileStatus[])(this.results[1]));
            }
        }
        
        public string Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((string)(this.results[2]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class getTasksCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public getTasksCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public string[] tasks {
            get {
                base.RaiseExceptionIfNecessary();
                return ((string[])(this.results[0]));
            }
        }
        
        public string Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((string)(this.results[1]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class getMonitorCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public getMonitorCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public easyDMSTool.Doc4SOAP.MonitorEntry[] monitorEntries {
            get {
                base.RaiseExceptionIfNecessary();
                return ((easyDMSTool.Doc4SOAP.MonitorEntry[])(this.results[0]));
            }
        }
        
        public string Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((string)(this.results[1]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class getWorkflowStepsCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public getWorkflowStepsCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public easyDMSTool.Doc4SOAP.WorkflowStep[] workflowSteps {
            get {
                base.RaiseExceptionIfNecessary();
                return ((easyDMSTool.Doc4SOAP.WorkflowStep[])(this.results[0]));
            }
        }
        
        public string Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((string)(this.results[1]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class getWorkflowPatternCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public getWorkflowPatternCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public easyDMSTool.Doc4SOAP.WorkflowPattern[] workflowPattern {
            get {
                base.RaiseExceptionIfNecessary();
                return ((easyDMSTool.Doc4SOAP.WorkflowPattern[])(this.results[0]));
            }
        }
        
        public string Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((string)(this.results[1]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class startWorkflowCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public startWorkflowCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public string Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class cancelWorkflowCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public cancelWorkflowCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public string Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class getAutoTextCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public getAutoTextCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public string[] autoTextValues {
            get {
                base.RaiseExceptionIfNecessary();
                return ((string[])(this.results[0]));
            }
        }
        
        public string Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((string)(this.results[1]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class getPropertyCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public getPropertyCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public string[] propertyValues {
            get {
                base.RaiseExceptionIfNecessary();
                return ((string[])(this.results[0]));
            }
        }
        
        public string Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((string)(this.results[1]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class getFileInfoCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public getFileInfoCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public easyDMSTool.Doc4SOAP.FieldData[] fieldvalues {
            get {
                base.RaiseExceptionIfNecessary();
                return ((easyDMSTool.Doc4SOAP.FieldData[])(this.results[0]));
            }
        }
        
        public easyDMSTool.Doc4SOAP.DocInfo[] documents {
            get {
                base.RaiseExceptionIfNecessary();
                return ((easyDMSTool.Doc4SOAP.DocInfo[])(this.results[1]));
            }
        }
        
        public string filetypeId {
            get {
                base.RaiseExceptionIfNecessary();
                return ((string)(this.results[2]));
            }
        }
        
        public string filetypeName {
            get {
                base.RaiseExceptionIfNecessary();
                return ((string)(this.results[3]));
            }
        }
        
        public string filetypeLabel {
            get {
                base.RaiseExceptionIfNecessary();
                return ((string)(this.results[4]));
            }
        }
        
        public string Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((string)(this.results[5]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class getFilesInfoCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public getFilesInfoCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public easyDMSTool.Doc4SOAP.FileInfo[] file {
            get {
                base.RaiseExceptionIfNecessary();
                return ((easyDMSTool.Doc4SOAP.FileInfo[])(this.results[0]));
            }
        }
        
        public string Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((string)(this.results[1]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class reportCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public reportCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public string report {
            get {
                base.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
        
        public string Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((string)(this.results[1]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class report2CompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public report2CompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public easyDMSTool.Doc4SOAP.HitList hitlist {
            get {
                base.RaiseExceptionIfNecessary();
                return ((easyDMSTool.Doc4SOAP.HitList)(this.results[0]));
            }
        }
        
        public string Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((string)(this.results[1]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class report3CompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public report3CompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public easyDMSTool.Doc4SOAP.HitList hitlist {
            get {
                base.RaiseExceptionIfNecessary();
                return ((easyDMSTool.Doc4SOAP.HitList)(this.results[0]));
            }
        }
        
        public string Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((string)(this.results[1]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class getDocumentCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public getDocumentCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public string name {
            get {
                base.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
        
        public int size {
            get {
                base.RaiseExceptionIfNecessary();
                return ((int)(this.results[1]));
            }
        }
        
        public string mime {
            get {
                base.RaiseExceptionIfNecessary();
                return ((string)(this.results[2]));
            }
        }
        
        public byte[] data {
            get {
                base.RaiseExceptionIfNecessary();
                return ((byte[])(this.results[3]));
            }
        }
        
        public string Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((string)(this.results[4]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class editFileCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public editFileCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public string newId {
            get {
                base.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
        
        public string Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((string)(this.results[1]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class createFileCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public createFileCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public string fileId {
            get {
                base.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
        
        public string Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((string)(this.results[1]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class createFile2CompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public createFile2CompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public string fileId {
            get {
                base.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
        
        public string Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((string)(this.results[1]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class getFileTypesCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public getFileTypesCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public easyDMSTool.Doc4SOAP.FileTypeShortDescr[] filetype {
            get {
                base.RaiseExceptionIfNecessary();
                return ((easyDMSTool.Doc4SOAP.FileTypeShortDescr[])(this.results[0]));
            }
        }
        
        public string Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((string)(this.results[1]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class describeFileTypeCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public describeFileTypeCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public easyDMSTool.Doc4SOAP.FileTypeDescription description {
            get {
                base.RaiseExceptionIfNecessary();
                return ((easyDMSTool.Doc4SOAP.FileTypeDescription)(this.results[0]));
            }
        }
        
        public string Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((string)(this.results[1]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class describeFileType2CompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public describeFileType2CompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public easyDMSTool.Doc4SOAP.FileTypeDescription2 description {
            get {
                base.RaiseExceptionIfNecessary();
                return ((easyDMSTool.Doc4SOAP.FileTypeDescription2)(this.results[0]));
            }
        }
        
        public string Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((string)(this.results[1]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class browseFolderCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public browseFolderCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public string headline {
            get {
                base.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
        
        public string[] fieldNames {
            get {
                base.RaiseExceptionIfNecessary();
                return ((string[])(this.results[1]));
            }
        }
        
        public easyDMSTool.Doc4SOAP.FolderFile[] files {
            get {
                base.RaiseExceptionIfNecessary();
                return ((easyDMSTool.Doc4SOAP.FolderFile[])(this.results[2]));
            }
        }
        
        public int previousIndex {
            get {
                base.RaiseExceptionIfNecessary();
                return ((int)(this.results[3]));
            }
        }
        
        public int nextIndex {
            get {
                base.RaiseExceptionIfNecessary();
                return ((int)(this.results[4]));
            }
        }
        
        public string Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((string)(this.results[5]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class getFolderStructureCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public getFolderStructureCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public easyDMSTool.Doc4SOAP.FolderDescription baseFolder {
            get {
                base.RaiseExceptionIfNecessary();
                return ((easyDMSTool.Doc4SOAP.FolderDescription)(this.results[0]));
            }
        }
        
        public string Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((string)(this.results[1]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class runScriptCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public runScriptCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public int returnStatus {
            get {
                base.RaiseExceptionIfNecessary();
                return ((int)(this.results[0]));
            }
        }
        
        public string errorMsg {
            get {
                base.RaiseExceptionIfNecessary();
                return ((string)(this.results[1]));
            }
        }
        
        public string returnValue {
            get {
                base.RaiseExceptionIfNecessary();
                return ((string)(this.results[2]));
            }
        }
        
        public string Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((string)(this.results[3]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class userInfoCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public userInfoCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public string name {
            get {
                base.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
        
        public string Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((string)(this.results[1]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class archiveFilesCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public archiveFilesCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public easyDMSTool.Doc4SOAP.ArchiveStatus[] statusList {
            get {
                base.RaiseExceptionIfNecessary();
                return ((easyDMSTool.Doc4SOAP.ArchiveStatus[])(this.results[0]));
            }
        }
        
        public string Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((string)(this.results[1]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class deleteFilesCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public deleteFilesCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public easyDMSTool.Doc4SOAP.DeleteStatus[] statusList {
            get {
                base.RaiseExceptionIfNecessary();
                return ((easyDMSTool.Doc4SOAP.DeleteStatus[])(this.results[0]));
            }
        }
        
        public string Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((string)(this.results[1]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class deleteDocumentsCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public deleteDocumentsCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public easyDMSTool.Doc4SOAP.DeleteStatus[] statusList {
            get {
                base.RaiseExceptionIfNecessary();
                return ((easyDMSTool.Doc4SOAP.DeleteStatus[])(this.results[0]));
            }
        }
        
        public string Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((string)(this.results[1]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class listPossibleActionsCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public listPossibleActionsCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public easyDMSTool.Doc4SOAP.WorkflowAction[] actions {
            get {
                base.RaiseExceptionIfNecessary();
                return ((easyDMSTool.Doc4SOAP.WorkflowAction[])(this.results[0]));
            }
        }
        
        public string Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((string)(this.results[1]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class triggerActionCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public triggerActionCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public string Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class followUpCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public followUpCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public string Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class sendFileAdHocCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public sendFileAdHocCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public string Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class getFileIdCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public getFileIdCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public string fileId {
            get {
                base.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
        
        public string Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((string)(this.results[1]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class listPublicFoldersCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public listPublicFoldersCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public easyDMSTool.Doc4SOAP.FolderDescription2[] folders {
            get {
                base.RaiseExceptionIfNecessary();
                return ((easyDMSTool.Doc4SOAP.FolderDescription2[])(this.results[0]));
            }
        }
        
        public string Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((string)(this.results[1]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class getFilingPlansCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public getFilingPlansCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public easyDMSTool.Doc4SOAP.FilingPlan[] filingPlans {
            get {
                base.RaiseExceptionIfNecessary();
                return ((easyDMSTool.Doc4SOAP.FilingPlan[])(this.results[0]));
            }
        }
        
        public string Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((string)(this.results[1]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class getFilingPlanXMLCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public getFilingPlanXMLCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public string filingPlanXml {
            get {
                base.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
        
        public string Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((string)(this.results[1]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class DOCUMENTSPortTypeClient : System.ServiceModel.ClientBase<easyDMSTool.Doc4SOAP.DOCUMENTSPortType>, easyDMSTool.Doc4SOAP.DOCUMENTSPortType {
        
        private BeginOperationDelegate onBeginloginDelegate;
        
        private EndOperationDelegate onEndloginDelegate;
        
        private System.Threading.SendOrPostCallback onloginCompletedDelegate;
        
        private BeginOperationDelegate onBegintrustedLoginDelegate;
        
        private EndOperationDelegate onEndtrustedLoginDelegate;
        
        private System.Threading.SendOrPostCallback ontrustedLoginCompletedDelegate;
        
        private BeginOperationDelegate onBeginlogoutDelegate;
        
        private EndOperationDelegate onEndlogoutDelegate;
        
        private System.Threading.SendOrPostCallback onlogoutCompletedDelegate;
        
        private BeginOperationDelegate onBegintestSessionDelegate;
        
        private EndOperationDelegate onEndtestSessionDelegate;
        
        private System.Threading.SendOrPostCallback ontestSessionCompletedDelegate;
        
        private BeginOperationDelegate onBegingetInboxDelegate;
        
        private EndOperationDelegate onEndgetInboxDelegate;
        
        private System.Threading.SendOrPostCallback ongetInboxCompletedDelegate;
        
        private BeginOperationDelegate onBegingetSentFolderDelegate;
        
        private EndOperationDelegate onEndgetSentFolderDelegate;
        
        private System.Threading.SendOrPostCallback ongetSentFolderCompletedDelegate;
        
        private BeginOperationDelegate onBegingetTasksDelegate;
        
        private EndOperationDelegate onEndgetTasksDelegate;
        
        private System.Threading.SendOrPostCallback ongetTasksCompletedDelegate;
        
        private BeginOperationDelegate onBegingetMonitorDelegate;
        
        private EndOperationDelegate onEndgetMonitorDelegate;
        
        private System.Threading.SendOrPostCallback ongetMonitorCompletedDelegate;
        
        private BeginOperationDelegate onBegingetWorkflowStepsDelegate;
        
        private EndOperationDelegate onEndgetWorkflowStepsDelegate;
        
        private System.Threading.SendOrPostCallback ongetWorkflowStepsCompletedDelegate;
        
        private BeginOperationDelegate onBegingetWorkflowPatternDelegate;
        
        private EndOperationDelegate onEndgetWorkflowPatternDelegate;
        
        private System.Threading.SendOrPostCallback ongetWorkflowPatternCompletedDelegate;
        
        private BeginOperationDelegate onBeginstartWorkflowDelegate;
        
        private EndOperationDelegate onEndstartWorkflowDelegate;
        
        private System.Threading.SendOrPostCallback onstartWorkflowCompletedDelegate;
        
        private BeginOperationDelegate onBegincancelWorkflowDelegate;
        
        private EndOperationDelegate onEndcancelWorkflowDelegate;
        
        private System.Threading.SendOrPostCallback oncancelWorkflowCompletedDelegate;
        
        private BeginOperationDelegate onBegingetAutoTextDelegate;
        
        private EndOperationDelegate onEndgetAutoTextDelegate;
        
        private System.Threading.SendOrPostCallback ongetAutoTextCompletedDelegate;
        
        private BeginOperationDelegate onBegingetPropertyDelegate;
        
        private EndOperationDelegate onEndgetPropertyDelegate;
        
        private System.Threading.SendOrPostCallback ongetPropertyCompletedDelegate;
        
        private BeginOperationDelegate onBegingetFileInfoDelegate;
        
        private EndOperationDelegate onEndgetFileInfoDelegate;
        
        private System.Threading.SendOrPostCallback ongetFileInfoCompletedDelegate;
        
        private BeginOperationDelegate onBegingetFilesInfoDelegate;
        
        private EndOperationDelegate onEndgetFilesInfoDelegate;
        
        private System.Threading.SendOrPostCallback ongetFilesInfoCompletedDelegate;
        
        private BeginOperationDelegate onBeginreportDelegate;
        
        private EndOperationDelegate onEndreportDelegate;
        
        private System.Threading.SendOrPostCallback onreportCompletedDelegate;
        
        private BeginOperationDelegate onBeginreport2Delegate;
        
        private EndOperationDelegate onEndreport2Delegate;
        
        private System.Threading.SendOrPostCallback onreport2CompletedDelegate;
        
        private BeginOperationDelegate onBeginreport3Delegate;
        
        private EndOperationDelegate onEndreport3Delegate;
        
        private System.Threading.SendOrPostCallback onreport3CompletedDelegate;
        
        private BeginOperationDelegate onBegingetDocumentDelegate;
        
        private EndOperationDelegate onEndgetDocumentDelegate;
        
        private System.Threading.SendOrPostCallback ongetDocumentCompletedDelegate;
        
        private BeginOperationDelegate onBegineditFileDelegate;
        
        private EndOperationDelegate onEndeditFileDelegate;
        
        private System.Threading.SendOrPostCallback oneditFileCompletedDelegate;
        
        private BeginOperationDelegate onBegincreateFileDelegate;
        
        private EndOperationDelegate onEndcreateFileDelegate;
        
        private System.Threading.SendOrPostCallback oncreateFileCompletedDelegate;
        
        private BeginOperationDelegate onBegincreateFile2Delegate;
        
        private EndOperationDelegate onEndcreateFile2Delegate;
        
        private System.Threading.SendOrPostCallback oncreateFile2CompletedDelegate;
        
        private BeginOperationDelegate onBegingetFileTypesDelegate;
        
        private EndOperationDelegate onEndgetFileTypesDelegate;
        
        private System.Threading.SendOrPostCallback ongetFileTypesCompletedDelegate;
        
        private BeginOperationDelegate onBegindescribeFileTypeDelegate;
        
        private EndOperationDelegate onEnddescribeFileTypeDelegate;
        
        private System.Threading.SendOrPostCallback ondescribeFileTypeCompletedDelegate;
        
        private BeginOperationDelegate onBegindescribeFileType2Delegate;
        
        private EndOperationDelegate onEnddescribeFileType2Delegate;
        
        private System.Threading.SendOrPostCallback ondescribeFileType2CompletedDelegate;
        
        private BeginOperationDelegate onBeginbrowseFolderDelegate;
        
        private EndOperationDelegate onEndbrowseFolderDelegate;
        
        private System.Threading.SendOrPostCallback onbrowseFolderCompletedDelegate;
        
        private BeginOperationDelegate onBegingetFolderStructureDelegate;
        
        private EndOperationDelegate onEndgetFolderStructureDelegate;
        
        private System.Threading.SendOrPostCallback ongetFolderStructureCompletedDelegate;
        
        private BeginOperationDelegate onBeginrunScriptDelegate;
        
        private EndOperationDelegate onEndrunScriptDelegate;
        
        private System.Threading.SendOrPostCallback onrunScriptCompletedDelegate;
        
        private BeginOperationDelegate onBeginuserInfoDelegate;
        
        private EndOperationDelegate onEnduserInfoDelegate;
        
        private System.Threading.SendOrPostCallback onuserInfoCompletedDelegate;
        
        private BeginOperationDelegate onBeginarchiveFilesDelegate;
        
        private EndOperationDelegate onEndarchiveFilesDelegate;
        
        private System.Threading.SendOrPostCallback onarchiveFilesCompletedDelegate;
        
        private BeginOperationDelegate onBegindeleteFilesDelegate;
        
        private EndOperationDelegate onEnddeleteFilesDelegate;
        
        private System.Threading.SendOrPostCallback ondeleteFilesCompletedDelegate;
        
        private BeginOperationDelegate onBegindeleteDocumentsDelegate;
        
        private EndOperationDelegate onEnddeleteDocumentsDelegate;
        
        private System.Threading.SendOrPostCallback ondeleteDocumentsCompletedDelegate;
        
        private BeginOperationDelegate onBeginlistPossibleActionsDelegate;
        
        private EndOperationDelegate onEndlistPossibleActionsDelegate;
        
        private System.Threading.SendOrPostCallback onlistPossibleActionsCompletedDelegate;
        
        private BeginOperationDelegate onBegintriggerActionDelegate;
        
        private EndOperationDelegate onEndtriggerActionDelegate;
        
        private System.Threading.SendOrPostCallback ontriggerActionCompletedDelegate;
        
        private BeginOperationDelegate onBeginfollowUpDelegate;
        
        private EndOperationDelegate onEndfollowUpDelegate;
        
        private System.Threading.SendOrPostCallback onfollowUpCompletedDelegate;
        
        private BeginOperationDelegate onBeginsendFileAdHocDelegate;
        
        private EndOperationDelegate onEndsendFileAdHocDelegate;
        
        private System.Threading.SendOrPostCallback onsendFileAdHocCompletedDelegate;
        
        private BeginOperationDelegate onBegingetFileIdDelegate;
        
        private EndOperationDelegate onEndgetFileIdDelegate;
        
        private System.Threading.SendOrPostCallback ongetFileIdCompletedDelegate;
        
        private BeginOperationDelegate onBeginlistPublicFoldersDelegate;
        
        private EndOperationDelegate onEndlistPublicFoldersDelegate;
        
        private System.Threading.SendOrPostCallback onlistPublicFoldersCompletedDelegate;
        
        private BeginOperationDelegate onBegingetFilingPlansDelegate;
        
        private EndOperationDelegate onEndgetFilingPlansDelegate;
        
        private System.Threading.SendOrPostCallback ongetFilingPlansCompletedDelegate;
        
        private BeginOperationDelegate onBegingetFilingPlanXMLDelegate;
        
        private EndOperationDelegate onEndgetFilingPlanXMLDelegate;
        
        private System.Threading.SendOrPostCallback ongetFilingPlanXMLCompletedDelegate;
        
        public DOCUMENTSPortTypeClient() {
        }
        
        public DOCUMENTSPortTypeClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public DOCUMENTSPortTypeClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public DOCUMENTSPortTypeClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public DOCUMENTSPortTypeClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public event System.EventHandler<loginCompletedEventArgs> loginCompleted;
        
        public event System.EventHandler<trustedLoginCompletedEventArgs> trustedLoginCompleted;
        
        public event System.EventHandler<logoutCompletedEventArgs> logoutCompleted;
        
        public event System.EventHandler<testSessionCompletedEventArgs> testSessionCompleted;
        
        public event System.EventHandler<getInboxCompletedEventArgs> getInboxCompleted;
        
        public event System.EventHandler<getSentFolderCompletedEventArgs> getSentFolderCompleted;
        
        public event System.EventHandler<getTasksCompletedEventArgs> getTasksCompleted;
        
        public event System.EventHandler<getMonitorCompletedEventArgs> getMonitorCompleted;
        
        public event System.EventHandler<getWorkflowStepsCompletedEventArgs> getWorkflowStepsCompleted;
        
        public event System.EventHandler<getWorkflowPatternCompletedEventArgs> getWorkflowPatternCompleted;
        
        public event System.EventHandler<startWorkflowCompletedEventArgs> startWorkflowCompleted;
        
        public event System.EventHandler<cancelWorkflowCompletedEventArgs> cancelWorkflowCompleted;
        
        public event System.EventHandler<getAutoTextCompletedEventArgs> getAutoTextCompleted;
        
        public event System.EventHandler<getPropertyCompletedEventArgs> getPropertyCompleted;
        
        public event System.EventHandler<getFileInfoCompletedEventArgs> getFileInfoCompleted;
        
        public event System.EventHandler<getFilesInfoCompletedEventArgs> getFilesInfoCompleted;
        
        public event System.EventHandler<reportCompletedEventArgs> reportCompleted;
        
        public event System.EventHandler<report2CompletedEventArgs> report2Completed;
        
        public event System.EventHandler<report3CompletedEventArgs> report3Completed;
        
        public event System.EventHandler<getDocumentCompletedEventArgs> getDocumentCompleted;
        
        public event System.EventHandler<editFileCompletedEventArgs> editFileCompleted;
        
        public event System.EventHandler<createFileCompletedEventArgs> createFileCompleted;
        
        public event System.EventHandler<createFile2CompletedEventArgs> createFile2Completed;
        
        public event System.EventHandler<getFileTypesCompletedEventArgs> getFileTypesCompleted;
        
        public event System.EventHandler<describeFileTypeCompletedEventArgs> describeFileTypeCompleted;
        
        public event System.EventHandler<describeFileType2CompletedEventArgs> describeFileType2Completed;
        
        public event System.EventHandler<browseFolderCompletedEventArgs> browseFolderCompleted;
        
        public event System.EventHandler<getFolderStructureCompletedEventArgs> getFolderStructureCompleted;
        
        public event System.EventHandler<runScriptCompletedEventArgs> runScriptCompleted;
        
        public event System.EventHandler<userInfoCompletedEventArgs> userInfoCompleted;
        
        public event System.EventHandler<archiveFilesCompletedEventArgs> archiveFilesCompleted;
        
        public event System.EventHandler<deleteFilesCompletedEventArgs> deleteFilesCompleted;
        
        public event System.EventHandler<deleteDocumentsCompletedEventArgs> deleteDocumentsCompleted;
        
        public event System.EventHandler<listPossibleActionsCompletedEventArgs> listPossibleActionsCompleted;
        
        public event System.EventHandler<triggerActionCompletedEventArgs> triggerActionCompleted;
        
        public event System.EventHandler<followUpCompletedEventArgs> followUpCompleted;
        
        public event System.EventHandler<sendFileAdHocCompletedEventArgs> sendFileAdHocCompleted;
        
        public event System.EventHandler<getFileIdCompletedEventArgs> getFileIdCompleted;
        
        public event System.EventHandler<listPublicFoldersCompletedEventArgs> listPublicFoldersCompleted;
        
        public event System.EventHandler<getFilingPlansCompletedEventArgs> getFilingPlansCompleted;
        
        public event System.EventHandler<getFilingPlanXMLCompletedEventArgs> getFilingPlanXMLCompleted;
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        easyDMSTool.Doc4SOAP.loginResponse easyDMSTool.Doc4SOAP.DOCUMENTSPortType.login(easyDMSTool.Doc4SOAP.loginRequest request) {
            return base.Channel.login(request);
        }
        
        public string login(string user, string principal, string passwd, string code, string locale, out string session) {
            easyDMSTool.Doc4SOAP.loginRequest inValue = new easyDMSTool.Doc4SOAP.loginRequest();
            inValue.user = user;
            inValue.principal = principal;
            inValue.passwd = passwd;
            inValue.code = code;
            inValue.locale = locale;
            easyDMSTool.Doc4SOAP.loginResponse retVal = ((easyDMSTool.Doc4SOAP.DOCUMENTSPortType)(this)).login(inValue);
            session = retVal.session;
            return retVal.sessionID;
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult easyDMSTool.Doc4SOAP.DOCUMENTSPortType.Beginlogin(easyDMSTool.Doc4SOAP.loginRequest request, System.AsyncCallback callback, object asyncState) {
            return base.Channel.Beginlogin(request, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult Beginlogin(string user, string principal, string passwd, string code, string locale, System.AsyncCallback callback, object asyncState) {
            easyDMSTool.Doc4SOAP.loginRequest inValue = new easyDMSTool.Doc4SOAP.loginRequest();
            inValue.user = user;
            inValue.principal = principal;
            inValue.passwd = passwd;
            inValue.code = code;
            inValue.locale = locale;
            return ((easyDMSTool.Doc4SOAP.DOCUMENTSPortType)(this)).Beginlogin(inValue, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        easyDMSTool.Doc4SOAP.loginResponse easyDMSTool.Doc4SOAP.DOCUMENTSPortType.Endlogin(System.IAsyncResult result) {
            return base.Channel.Endlogin(result);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public string Endlogin(System.IAsyncResult result, out string session) {
            easyDMSTool.Doc4SOAP.loginResponse retVal = ((easyDMSTool.Doc4SOAP.DOCUMENTSPortType)(this)).Endlogin(result);
            session = retVal.session;
            return retVal.sessionID;
        }
        
        private System.IAsyncResult OnBeginlogin(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string user = ((string)(inValues[0]));
            string principal = ((string)(inValues[1]));
            string passwd = ((string)(inValues[2]));
            string code = ((string)(inValues[3]));
            string locale = ((string)(inValues[4]));
            return this.Beginlogin(user, principal, passwd, code, locale, callback, asyncState);
        }
        
        private object[] OnEndlogin(System.IAsyncResult result) {
            string session = this.GetDefaultValueForInitialization<string>();
            string retVal = this.Endlogin(result, out session);
            return new object[] {
                    session,
                    retVal};
        }
        
        private void OnloginCompleted(object state) {
            if ((this.loginCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.loginCompleted(this, new loginCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void loginAsync(string user, string principal, string passwd, string code, string locale) {
            this.loginAsync(user, principal, passwd, code, locale, null);
        }
        
        public void loginAsync(string user, string principal, string passwd, string code, string locale, object userState) {
            if ((this.onBeginloginDelegate == null)) {
                this.onBeginloginDelegate = new BeginOperationDelegate(this.OnBeginlogin);
            }
            if ((this.onEndloginDelegate == null)) {
                this.onEndloginDelegate = new EndOperationDelegate(this.OnEndlogin);
            }
            if ((this.onloginCompletedDelegate == null)) {
                this.onloginCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnloginCompleted);
            }
            base.InvokeAsync(this.onBeginloginDelegate, new object[] {
                        user,
                        principal,
                        passwd,
                        code,
                        locale}, this.onEndloginDelegate, this.onloginCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        easyDMSTool.Doc4SOAP.trustedLoginResponse easyDMSTool.Doc4SOAP.DOCUMENTSPortType.trustedLogin(easyDMSTool.Doc4SOAP.trustedLoginRequest request) {
            return base.Channel.trustedLogin(request);
        }
        
        public string trustedLogin(string user, string principal, string passwd, string asUser, string code, string locale, out string session) {
            easyDMSTool.Doc4SOAP.trustedLoginRequest inValue = new easyDMSTool.Doc4SOAP.trustedLoginRequest();
            inValue.user = user;
            inValue.principal = principal;
            inValue.passwd = passwd;
            inValue.asUser = asUser;
            inValue.code = code;
            inValue.locale = locale;
            easyDMSTool.Doc4SOAP.trustedLoginResponse retVal = ((easyDMSTool.Doc4SOAP.DOCUMENTSPortType)(this)).trustedLogin(inValue);
            session = retVal.session;
            return retVal.sessionID;
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult easyDMSTool.Doc4SOAP.DOCUMENTSPortType.BegintrustedLogin(easyDMSTool.Doc4SOAP.trustedLoginRequest request, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BegintrustedLogin(request, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BegintrustedLogin(string user, string principal, string passwd, string asUser, string code, string locale, System.AsyncCallback callback, object asyncState) {
            easyDMSTool.Doc4SOAP.trustedLoginRequest inValue = new easyDMSTool.Doc4SOAP.trustedLoginRequest();
            inValue.user = user;
            inValue.principal = principal;
            inValue.passwd = passwd;
            inValue.asUser = asUser;
            inValue.code = code;
            inValue.locale = locale;
            return ((easyDMSTool.Doc4SOAP.DOCUMENTSPortType)(this)).BegintrustedLogin(inValue, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        easyDMSTool.Doc4SOAP.trustedLoginResponse easyDMSTool.Doc4SOAP.DOCUMENTSPortType.EndtrustedLogin(System.IAsyncResult result) {
            return base.Channel.EndtrustedLogin(result);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public string EndtrustedLogin(System.IAsyncResult result, out string session) {
            easyDMSTool.Doc4SOAP.trustedLoginResponse retVal = ((easyDMSTool.Doc4SOAP.DOCUMENTSPortType)(this)).EndtrustedLogin(result);
            session = retVal.session;
            return retVal.sessionID;
        }
        
        private System.IAsyncResult OnBegintrustedLogin(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string user = ((string)(inValues[0]));
            string principal = ((string)(inValues[1]));
            string passwd = ((string)(inValues[2]));
            string asUser = ((string)(inValues[3]));
            string code = ((string)(inValues[4]));
            string locale = ((string)(inValues[5]));
            return this.BegintrustedLogin(user, principal, passwd, asUser, code, locale, callback, asyncState);
        }
        
        private object[] OnEndtrustedLogin(System.IAsyncResult result) {
            string session = this.GetDefaultValueForInitialization<string>();
            string retVal = this.EndtrustedLogin(result, out session);
            return new object[] {
                    session,
                    retVal};
        }
        
        private void OntrustedLoginCompleted(object state) {
            if ((this.trustedLoginCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.trustedLoginCompleted(this, new trustedLoginCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void trustedLoginAsync(string user, string principal, string passwd, string asUser, string code, string locale) {
            this.trustedLoginAsync(user, principal, passwd, asUser, code, locale, null);
        }
        
        public void trustedLoginAsync(string user, string principal, string passwd, string asUser, string code, string locale, object userState) {
            if ((this.onBegintrustedLoginDelegate == null)) {
                this.onBegintrustedLoginDelegate = new BeginOperationDelegate(this.OnBegintrustedLogin);
            }
            if ((this.onEndtrustedLoginDelegate == null)) {
                this.onEndtrustedLoginDelegate = new EndOperationDelegate(this.OnEndtrustedLogin);
            }
            if ((this.ontrustedLoginCompletedDelegate == null)) {
                this.ontrustedLoginCompletedDelegate = new System.Threading.SendOrPostCallback(this.OntrustedLoginCompleted);
            }
            base.InvokeAsync(this.onBegintrustedLoginDelegate, new object[] {
                        user,
                        principal,
                        passwd,
                        asUser,
                        code,
                        locale}, this.onEndtrustedLoginDelegate, this.ontrustedLoginCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        easyDMSTool.Doc4SOAP.logoutResponse easyDMSTool.Doc4SOAP.DOCUMENTSPortType.logout(easyDMSTool.Doc4SOAP.logoutRequest request) {
            return base.Channel.logout(request);
        }
        
        public void logout(ref string sessionID) {
            easyDMSTool.Doc4SOAP.logoutRequest inValue = new easyDMSTool.Doc4SOAP.logoutRequest();
            inValue.sessionID = sessionID;
            easyDMSTool.Doc4SOAP.logoutResponse retVal = ((easyDMSTool.Doc4SOAP.DOCUMENTSPortType)(this)).logout(inValue);
            sessionID = retVal.sessionID;
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult easyDMSTool.Doc4SOAP.DOCUMENTSPortType.Beginlogout(easyDMSTool.Doc4SOAP.logoutRequest request, System.AsyncCallback callback, object asyncState) {
            return base.Channel.Beginlogout(request, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult Beginlogout(string sessionID, System.AsyncCallback callback, object asyncState) {
            easyDMSTool.Doc4SOAP.logoutRequest inValue = new easyDMSTool.Doc4SOAP.logoutRequest();
            inValue.sessionID = sessionID;
            return ((easyDMSTool.Doc4SOAP.DOCUMENTSPortType)(this)).Beginlogout(inValue, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        easyDMSTool.Doc4SOAP.logoutResponse easyDMSTool.Doc4SOAP.DOCUMENTSPortType.Endlogout(System.IAsyncResult result) {
            return base.Channel.Endlogout(result);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public string Endlogout(System.IAsyncResult result) {
            easyDMSTool.Doc4SOAP.logoutResponse retVal = ((easyDMSTool.Doc4SOAP.DOCUMENTSPortType)(this)).Endlogout(result);
            return retVal.sessionID;
        }
        
        private System.IAsyncResult OnBeginlogout(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string sessionID = ((string)(inValues[0]));
            return this.Beginlogout(sessionID, callback, asyncState);
        }
        
        private object[] OnEndlogout(System.IAsyncResult result) {
            string retVal = this.Endlogout(result);
            return new object[] {
                    retVal};
        }
        
        private void OnlogoutCompleted(object state) {
            if ((this.logoutCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.logoutCompleted(this, new logoutCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void logoutAsync(string sessionID) {
            this.logoutAsync(sessionID, null);
        }
        
        public void logoutAsync(string sessionID, object userState) {
            if ((this.onBeginlogoutDelegate == null)) {
                this.onBeginlogoutDelegate = new BeginOperationDelegate(this.OnBeginlogout);
            }
            if ((this.onEndlogoutDelegate == null)) {
                this.onEndlogoutDelegate = new EndOperationDelegate(this.OnEndlogout);
            }
            if ((this.onlogoutCompletedDelegate == null)) {
                this.onlogoutCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnlogoutCompleted);
            }
            base.InvokeAsync(this.onBeginlogoutDelegate, new object[] {
                        sessionID}, this.onEndlogoutDelegate, this.onlogoutCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        easyDMSTool.Doc4SOAP.testSessionResponse easyDMSTool.Doc4SOAP.DOCUMENTSPortType.testSession(easyDMSTool.Doc4SOAP.testSessionRequest request) {
            return base.Channel.testSession(request);
        }
        
        public bool testSession(ref string sessionID) {
            easyDMSTool.Doc4SOAP.testSessionRequest inValue = new easyDMSTool.Doc4SOAP.testSessionRequest();
            inValue.sessionID = sessionID;
            easyDMSTool.Doc4SOAP.testSessionResponse retVal = ((easyDMSTool.Doc4SOAP.DOCUMENTSPortType)(this)).testSession(inValue);
            sessionID = retVal.sessionID;
            return retVal.valid;
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult easyDMSTool.Doc4SOAP.DOCUMENTSPortType.BegintestSession(easyDMSTool.Doc4SOAP.testSessionRequest request, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BegintestSession(request, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BegintestSession(string sessionID, System.AsyncCallback callback, object asyncState) {
            easyDMSTool.Doc4SOAP.testSessionRequest inValue = new easyDMSTool.Doc4SOAP.testSessionRequest();
            inValue.sessionID = sessionID;
            return ((easyDMSTool.Doc4SOAP.DOCUMENTSPortType)(this)).BegintestSession(inValue, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        easyDMSTool.Doc4SOAP.testSessionResponse easyDMSTool.Doc4SOAP.DOCUMENTSPortType.EndtestSession(System.IAsyncResult result) {
            return base.Channel.EndtestSession(result);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public string EndtestSession(System.IAsyncResult result, out bool valid) {
            easyDMSTool.Doc4SOAP.testSessionResponse retVal = ((easyDMSTool.Doc4SOAP.DOCUMENTSPortType)(this)).EndtestSession(result);
            valid = retVal.valid;
            return retVal.sessionID;
        }
        
        private System.IAsyncResult OnBegintestSession(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string sessionID = ((string)(inValues[0]));
            return this.BegintestSession(sessionID, callback, asyncState);
        }
        
        private object[] OnEndtestSession(System.IAsyncResult result) {
            bool valid = this.GetDefaultValueForInitialization<bool>();
            string retVal = this.EndtestSession(result, out valid);
            return new object[] {
                    valid,
                    retVal};
        }
        
        private void OntestSessionCompleted(object state) {
            if ((this.testSessionCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.testSessionCompleted(this, new testSessionCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void testSessionAsync(string sessionID) {
            this.testSessionAsync(sessionID, null);
        }
        
        public void testSessionAsync(string sessionID, object userState) {
            if ((this.onBegintestSessionDelegate == null)) {
                this.onBegintestSessionDelegate = new BeginOperationDelegate(this.OnBegintestSession);
            }
            if ((this.onEndtestSessionDelegate == null)) {
                this.onEndtestSessionDelegate = new EndOperationDelegate(this.OnEndtestSession);
            }
            if ((this.ontestSessionCompletedDelegate == null)) {
                this.ontestSessionCompletedDelegate = new System.Threading.SendOrPostCallback(this.OntestSessionCompleted);
            }
            base.InvokeAsync(this.onBegintestSessionDelegate, new object[] {
                        sessionID}, this.onEndtestSessionDelegate, this.ontestSessionCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        easyDMSTool.Doc4SOAP.getInboxResponse easyDMSTool.Doc4SOAP.DOCUMENTSPortType.getInbox(easyDMSTool.Doc4SOAP.getInboxRequest request) {
            return base.Channel.getInbox(request);
        }
        
        public string getInbox(ref string sessionID, out easyDMSTool.Doc4SOAP.FileStatus[] fileStatuses) {
            easyDMSTool.Doc4SOAP.getInboxRequest inValue = new easyDMSTool.Doc4SOAP.getInboxRequest();
            inValue.sessionID = sessionID;
            easyDMSTool.Doc4SOAP.getInboxResponse retVal = ((easyDMSTool.Doc4SOAP.DOCUMENTSPortType)(this)).getInbox(inValue);
            sessionID = retVal.sessionID;
            fileStatuses = retVal.fileStatuses;
            return retVal.idFolder;
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult easyDMSTool.Doc4SOAP.DOCUMENTSPortType.BegingetInbox(easyDMSTool.Doc4SOAP.getInboxRequest request, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BegingetInbox(request, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BegingetInbox(string sessionID, System.AsyncCallback callback, object asyncState) {
            easyDMSTool.Doc4SOAP.getInboxRequest inValue = new easyDMSTool.Doc4SOAP.getInboxRequest();
            inValue.sessionID = sessionID;
            return ((easyDMSTool.Doc4SOAP.DOCUMENTSPortType)(this)).BegingetInbox(inValue, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        easyDMSTool.Doc4SOAP.getInboxResponse easyDMSTool.Doc4SOAP.DOCUMENTSPortType.EndgetInbox(System.IAsyncResult result) {
            return base.Channel.EndgetInbox(result);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public string EndgetInbox(System.IAsyncResult result, out string idFolder, out easyDMSTool.Doc4SOAP.FileStatus[] fileStatuses) {
            easyDMSTool.Doc4SOAP.getInboxResponse retVal = ((easyDMSTool.Doc4SOAP.DOCUMENTSPortType)(this)).EndgetInbox(result);
            idFolder = retVal.idFolder;
            fileStatuses = retVal.fileStatuses;
            return retVal.sessionID;
        }
        
        private System.IAsyncResult OnBegingetInbox(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string sessionID = ((string)(inValues[0]));
            return this.BegingetInbox(sessionID, callback, asyncState);
        }
        
        private object[] OnEndgetInbox(System.IAsyncResult result) {
            string idFolder = this.GetDefaultValueForInitialization<string>();
            easyDMSTool.Doc4SOAP.FileStatus[] fileStatuses = this.GetDefaultValueForInitialization<easyDMSTool.Doc4SOAP.FileStatus[]>();
            string retVal = this.EndgetInbox(result, out idFolder, out fileStatuses);
            return new object[] {
                    idFolder,
                    fileStatuses,
                    retVal};
        }
        
        private void OngetInboxCompleted(object state) {
            if ((this.getInboxCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.getInboxCompleted(this, new getInboxCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void getInboxAsync(string sessionID) {
            this.getInboxAsync(sessionID, null);
        }
        
        public void getInboxAsync(string sessionID, object userState) {
            if ((this.onBegingetInboxDelegate == null)) {
                this.onBegingetInboxDelegate = new BeginOperationDelegate(this.OnBegingetInbox);
            }
            if ((this.onEndgetInboxDelegate == null)) {
                this.onEndgetInboxDelegate = new EndOperationDelegate(this.OnEndgetInbox);
            }
            if ((this.ongetInboxCompletedDelegate == null)) {
                this.ongetInboxCompletedDelegate = new System.Threading.SendOrPostCallback(this.OngetInboxCompleted);
            }
            base.InvokeAsync(this.onBegingetInboxDelegate, new object[] {
                        sessionID}, this.onEndgetInboxDelegate, this.ongetInboxCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        easyDMSTool.Doc4SOAP.getSentFolderResponse easyDMSTool.Doc4SOAP.DOCUMENTSPortType.getSentFolder(easyDMSTool.Doc4SOAP.getSentFolderRequest request) {
            return base.Channel.getSentFolder(request);
        }
        
        public string getSentFolder(ref string sessionID, out easyDMSTool.Doc4SOAP.FileStatus[] fileStatuses) {
            easyDMSTool.Doc4SOAP.getSentFolderRequest inValue = new easyDMSTool.Doc4SOAP.getSentFolderRequest();
            inValue.sessionID = sessionID;
            easyDMSTool.Doc4SOAP.getSentFolderResponse retVal = ((easyDMSTool.Doc4SOAP.DOCUMENTSPortType)(this)).getSentFolder(inValue);
            sessionID = retVal.sessionID;
            fileStatuses = retVal.fileStatuses;
            return retVal.idFolder;
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult easyDMSTool.Doc4SOAP.DOCUMENTSPortType.BegingetSentFolder(easyDMSTool.Doc4SOAP.getSentFolderRequest request, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BegingetSentFolder(request, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BegingetSentFolder(string sessionID, System.AsyncCallback callback, object asyncState) {
            easyDMSTool.Doc4SOAP.getSentFolderRequest inValue = new easyDMSTool.Doc4SOAP.getSentFolderRequest();
            inValue.sessionID = sessionID;
            return ((easyDMSTool.Doc4SOAP.DOCUMENTSPortType)(this)).BegingetSentFolder(inValue, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        easyDMSTool.Doc4SOAP.getSentFolderResponse easyDMSTool.Doc4SOAP.DOCUMENTSPortType.EndgetSentFolder(System.IAsyncResult result) {
            return base.Channel.EndgetSentFolder(result);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public string EndgetSentFolder(System.IAsyncResult result, out string idFolder, out easyDMSTool.Doc4SOAP.FileStatus[] fileStatuses) {
            easyDMSTool.Doc4SOAP.getSentFolderResponse retVal = ((easyDMSTool.Doc4SOAP.DOCUMENTSPortType)(this)).EndgetSentFolder(result);
            idFolder = retVal.idFolder;
            fileStatuses = retVal.fileStatuses;
            return retVal.sessionID;
        }
        
        private System.IAsyncResult OnBegingetSentFolder(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string sessionID = ((string)(inValues[0]));
            return this.BegingetSentFolder(sessionID, callback, asyncState);
        }
        
        private object[] OnEndgetSentFolder(System.IAsyncResult result) {
            string idFolder = this.GetDefaultValueForInitialization<string>();
            easyDMSTool.Doc4SOAP.FileStatus[] fileStatuses = this.GetDefaultValueForInitialization<easyDMSTool.Doc4SOAP.FileStatus[]>();
            string retVal = this.EndgetSentFolder(result, out idFolder, out fileStatuses);
            return new object[] {
                    idFolder,
                    fileStatuses,
                    retVal};
        }
        
        private void OngetSentFolderCompleted(object state) {
            if ((this.getSentFolderCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.getSentFolderCompleted(this, new getSentFolderCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void getSentFolderAsync(string sessionID) {
            this.getSentFolderAsync(sessionID, null);
        }
        
        public void getSentFolderAsync(string sessionID, object userState) {
            if ((this.onBegingetSentFolderDelegate == null)) {
                this.onBegingetSentFolderDelegate = new BeginOperationDelegate(this.OnBegingetSentFolder);
            }
            if ((this.onEndgetSentFolderDelegate == null)) {
                this.onEndgetSentFolderDelegate = new EndOperationDelegate(this.OnEndgetSentFolder);
            }
            if ((this.ongetSentFolderCompletedDelegate == null)) {
                this.ongetSentFolderCompletedDelegate = new System.Threading.SendOrPostCallback(this.OngetSentFolderCompleted);
            }
            base.InvokeAsync(this.onBegingetSentFolderDelegate, new object[] {
                        sessionID}, this.onEndgetSentFolderDelegate, this.ongetSentFolderCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        easyDMSTool.Doc4SOAP.getTasksResponse easyDMSTool.Doc4SOAP.DOCUMENTSPortType.getTasks(easyDMSTool.Doc4SOAP.getTasksRequest request) {
            return base.Channel.getTasks(request);
        }
        
        public string[] getTasks(ref string sessionID, string fileId) {
            easyDMSTool.Doc4SOAP.getTasksRequest inValue = new easyDMSTool.Doc4SOAP.getTasksRequest();
            inValue.sessionID = sessionID;
            inValue.fileId = fileId;
            easyDMSTool.Doc4SOAP.getTasksResponse retVal = ((easyDMSTool.Doc4SOAP.DOCUMENTSPortType)(this)).getTasks(inValue);
            sessionID = retVal.sessionID;
            return retVal.tasks;
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult easyDMSTool.Doc4SOAP.DOCUMENTSPortType.BegingetTasks(easyDMSTool.Doc4SOAP.getTasksRequest request, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BegingetTasks(request, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BegingetTasks(string sessionID, string fileId, System.AsyncCallback callback, object asyncState) {
            easyDMSTool.Doc4SOAP.getTasksRequest inValue = new easyDMSTool.Doc4SOAP.getTasksRequest();
            inValue.sessionID = sessionID;
            inValue.fileId = fileId;
            return ((easyDMSTool.Doc4SOAP.DOCUMENTSPortType)(this)).BegingetTasks(inValue, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        easyDMSTool.Doc4SOAP.getTasksResponse easyDMSTool.Doc4SOAP.DOCUMENTSPortType.EndgetTasks(System.IAsyncResult result) {
            return base.Channel.EndgetTasks(result);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public string EndgetTasks(System.IAsyncResult result, out string[] tasks) {
            easyDMSTool.Doc4SOAP.getTasksResponse retVal = ((easyDMSTool.Doc4SOAP.DOCUMENTSPortType)(this)).EndgetTasks(result);
            tasks = retVal.tasks;
            return retVal.sessionID;
        }
        
        private System.IAsyncResult OnBegingetTasks(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string sessionID = ((string)(inValues[0]));
            string fileId = ((string)(inValues[1]));
            return this.BegingetTasks(sessionID, fileId, callback, asyncState);
        }
        
        private object[] OnEndgetTasks(System.IAsyncResult result) {
            string[] tasks = this.GetDefaultValueForInitialization<string[]>();
            string retVal = this.EndgetTasks(result, out tasks);
            return new object[] {
                    tasks,
                    retVal};
        }
        
        private void OngetTasksCompleted(object state) {
            if ((this.getTasksCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.getTasksCompleted(this, new getTasksCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void getTasksAsync(string sessionID, string fileId) {
            this.getTasksAsync(sessionID, fileId, null);
        }
        
        public void getTasksAsync(string sessionID, string fileId, object userState) {
            if ((this.onBegingetTasksDelegate == null)) {
                this.onBegingetTasksDelegate = new BeginOperationDelegate(this.OnBegingetTasks);
            }
            if ((this.onEndgetTasksDelegate == null)) {
                this.onEndgetTasksDelegate = new EndOperationDelegate(this.OnEndgetTasks);
            }
            if ((this.ongetTasksCompletedDelegate == null)) {
                this.ongetTasksCompletedDelegate = new System.Threading.SendOrPostCallback(this.OngetTasksCompleted);
            }
            base.InvokeAsync(this.onBegingetTasksDelegate, new object[] {
                        sessionID,
                        fileId}, this.onEndgetTasksDelegate, this.ongetTasksCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        easyDMSTool.Doc4SOAP.getMonitorResponse easyDMSTool.Doc4SOAP.DOCUMENTSPortType.getMonitor(easyDMSTool.Doc4SOAP.getMonitorRequest request) {
            return base.Channel.getMonitor(request);
        }
        
        public easyDMSTool.Doc4SOAP.MonitorEntry[] getMonitor(ref string sessionID, string fileId) {
            easyDMSTool.Doc4SOAP.getMonitorRequest inValue = new easyDMSTool.Doc4SOAP.getMonitorRequest();
            inValue.sessionID = sessionID;
            inValue.fileId = fileId;
            easyDMSTool.Doc4SOAP.getMonitorResponse retVal = ((easyDMSTool.Doc4SOAP.DOCUMENTSPortType)(this)).getMonitor(inValue);
            sessionID = retVal.sessionID;
            return retVal.monitorEntries;
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult easyDMSTool.Doc4SOAP.DOCUMENTSPortType.BegingetMonitor(easyDMSTool.Doc4SOAP.getMonitorRequest request, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BegingetMonitor(request, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BegingetMonitor(string sessionID, string fileId, System.AsyncCallback callback, object asyncState) {
            easyDMSTool.Doc4SOAP.getMonitorRequest inValue = new easyDMSTool.Doc4SOAP.getMonitorRequest();
            inValue.sessionID = sessionID;
            inValue.fileId = fileId;
            return ((easyDMSTool.Doc4SOAP.DOCUMENTSPortType)(this)).BegingetMonitor(inValue, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        easyDMSTool.Doc4SOAP.getMonitorResponse easyDMSTool.Doc4SOAP.DOCUMENTSPortType.EndgetMonitor(System.IAsyncResult result) {
            return base.Channel.EndgetMonitor(result);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public string EndgetMonitor(System.IAsyncResult result, out easyDMSTool.Doc4SOAP.MonitorEntry[] monitorEntries) {
            easyDMSTool.Doc4SOAP.getMonitorResponse retVal = ((easyDMSTool.Doc4SOAP.DOCUMENTSPortType)(this)).EndgetMonitor(result);
            monitorEntries = retVal.monitorEntries;
            return retVal.sessionID;
        }
        
        private System.IAsyncResult OnBegingetMonitor(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string sessionID = ((string)(inValues[0]));
            string fileId = ((string)(inValues[1]));
            return this.BegingetMonitor(sessionID, fileId, callback, asyncState);
        }
        
        private object[] OnEndgetMonitor(System.IAsyncResult result) {
            easyDMSTool.Doc4SOAP.MonitorEntry[] monitorEntries = this.GetDefaultValueForInitialization<easyDMSTool.Doc4SOAP.MonitorEntry[]>();
            string retVal = this.EndgetMonitor(result, out monitorEntries);
            return new object[] {
                    monitorEntries,
                    retVal};
        }
        
        private void OngetMonitorCompleted(object state) {
            if ((this.getMonitorCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.getMonitorCompleted(this, new getMonitorCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void getMonitorAsync(string sessionID, string fileId) {
            this.getMonitorAsync(sessionID, fileId, null);
        }
        
        public void getMonitorAsync(string sessionID, string fileId, object userState) {
            if ((this.onBegingetMonitorDelegate == null)) {
                this.onBegingetMonitorDelegate = new BeginOperationDelegate(this.OnBegingetMonitor);
            }
            if ((this.onEndgetMonitorDelegate == null)) {
                this.onEndgetMonitorDelegate = new EndOperationDelegate(this.OnEndgetMonitor);
            }
            if ((this.ongetMonitorCompletedDelegate == null)) {
                this.ongetMonitorCompletedDelegate = new System.Threading.SendOrPostCallback(this.OngetMonitorCompleted);
            }
            base.InvokeAsync(this.onBegingetMonitorDelegate, new object[] {
                        sessionID,
                        fileId}, this.onEndgetMonitorDelegate, this.ongetMonitorCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        easyDMSTool.Doc4SOAP.getWorkflowStepsResponse easyDMSTool.Doc4SOAP.DOCUMENTSPortType.getWorkflowSteps(easyDMSTool.Doc4SOAP.getWorkflowStepsRequest request) {
            return base.Channel.getWorkflowSteps(request);
        }
        
        public easyDMSTool.Doc4SOAP.WorkflowStep[] getWorkflowSteps(ref string sessionID, string fileId) {
            easyDMSTool.Doc4SOAP.getWorkflowStepsRequest inValue = new easyDMSTool.Doc4SOAP.getWorkflowStepsRequest();
            inValue.sessionID = sessionID;
            inValue.fileId = fileId;
            easyDMSTool.Doc4SOAP.getWorkflowStepsResponse retVal = ((easyDMSTool.Doc4SOAP.DOCUMENTSPortType)(this)).getWorkflowSteps(inValue);
            sessionID = retVal.sessionID;
            return retVal.workflowSteps;
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult easyDMSTool.Doc4SOAP.DOCUMENTSPortType.BegingetWorkflowSteps(easyDMSTool.Doc4SOAP.getWorkflowStepsRequest request, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BegingetWorkflowSteps(request, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BegingetWorkflowSteps(string sessionID, string fileId, System.AsyncCallback callback, object asyncState) {
            easyDMSTool.Doc4SOAP.getWorkflowStepsRequest inValue = new easyDMSTool.Doc4SOAP.getWorkflowStepsRequest();
            inValue.sessionID = sessionID;
            inValue.fileId = fileId;
            return ((easyDMSTool.Doc4SOAP.DOCUMENTSPortType)(this)).BegingetWorkflowSteps(inValue, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        easyDMSTool.Doc4SOAP.getWorkflowStepsResponse easyDMSTool.Doc4SOAP.DOCUMENTSPortType.EndgetWorkflowSteps(System.IAsyncResult result) {
            return base.Channel.EndgetWorkflowSteps(result);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public string EndgetWorkflowSteps(System.IAsyncResult result, out easyDMSTool.Doc4SOAP.WorkflowStep[] workflowSteps) {
            easyDMSTool.Doc4SOAP.getWorkflowStepsResponse retVal = ((easyDMSTool.Doc4SOAP.DOCUMENTSPortType)(this)).EndgetWorkflowSteps(result);
            workflowSteps = retVal.workflowSteps;
            return retVal.sessionID;
        }
        
        private System.IAsyncResult OnBegingetWorkflowSteps(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string sessionID = ((string)(inValues[0]));
            string fileId = ((string)(inValues[1]));
            return this.BegingetWorkflowSteps(sessionID, fileId, callback, asyncState);
        }
        
        private object[] OnEndgetWorkflowSteps(System.IAsyncResult result) {
            easyDMSTool.Doc4SOAP.WorkflowStep[] workflowSteps = this.GetDefaultValueForInitialization<easyDMSTool.Doc4SOAP.WorkflowStep[]>();
            string retVal = this.EndgetWorkflowSteps(result, out workflowSteps);
            return new object[] {
                    workflowSteps,
                    retVal};
        }
        
        private void OngetWorkflowStepsCompleted(object state) {
            if ((this.getWorkflowStepsCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.getWorkflowStepsCompleted(this, new getWorkflowStepsCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void getWorkflowStepsAsync(string sessionID, string fileId) {
            this.getWorkflowStepsAsync(sessionID, fileId, null);
        }
        
        public void getWorkflowStepsAsync(string sessionID, string fileId, object userState) {
            if ((this.onBegingetWorkflowStepsDelegate == null)) {
                this.onBegingetWorkflowStepsDelegate = new BeginOperationDelegate(this.OnBegingetWorkflowSteps);
            }
            if ((this.onEndgetWorkflowStepsDelegate == null)) {
                this.onEndgetWorkflowStepsDelegate = new EndOperationDelegate(this.OnEndgetWorkflowSteps);
            }
            if ((this.ongetWorkflowStepsCompletedDelegate == null)) {
                this.ongetWorkflowStepsCompletedDelegate = new System.Threading.SendOrPostCallback(this.OngetWorkflowStepsCompleted);
            }
            base.InvokeAsync(this.onBegingetWorkflowStepsDelegate, new object[] {
                        sessionID,
                        fileId}, this.onEndgetWorkflowStepsDelegate, this.ongetWorkflowStepsCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        easyDMSTool.Doc4SOAP.getWorkflowPatternResponse easyDMSTool.Doc4SOAP.DOCUMENTSPortType.getWorkflowPattern(easyDMSTool.Doc4SOAP.getWorkflowPatternRequest request) {
            return base.Channel.getWorkflowPattern(request);
        }
        
        public easyDMSTool.Doc4SOAP.WorkflowPattern[] getWorkflowPattern(ref string sessionID) {
            easyDMSTool.Doc4SOAP.getWorkflowPatternRequest inValue = new easyDMSTool.Doc4SOAP.getWorkflowPatternRequest();
            inValue.sessionID = sessionID;
            easyDMSTool.Doc4SOAP.getWorkflowPatternResponse retVal = ((easyDMSTool.Doc4SOAP.DOCUMENTSPortType)(this)).getWorkflowPattern(inValue);
            sessionID = retVal.sessionID;
            return retVal.workflowPattern;
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult easyDMSTool.Doc4SOAP.DOCUMENTSPortType.BegingetWorkflowPattern(easyDMSTool.Doc4SOAP.getWorkflowPatternRequest request, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BegingetWorkflowPattern(request, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BegingetWorkflowPattern(string sessionID, System.AsyncCallback callback, object asyncState) {
            easyDMSTool.Doc4SOAP.getWorkflowPatternRequest inValue = new easyDMSTool.Doc4SOAP.getWorkflowPatternRequest();
            inValue.sessionID = sessionID;
            return ((easyDMSTool.Doc4SOAP.DOCUMENTSPortType)(this)).BegingetWorkflowPattern(inValue, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        easyDMSTool.Doc4SOAP.getWorkflowPatternResponse easyDMSTool.Doc4SOAP.DOCUMENTSPortType.EndgetWorkflowPattern(System.IAsyncResult result) {
            return base.Channel.EndgetWorkflowPattern(result);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public string EndgetWorkflowPattern(System.IAsyncResult result, out easyDMSTool.Doc4SOAP.WorkflowPattern[] workflowPattern) {
            easyDMSTool.Doc4SOAP.getWorkflowPatternResponse retVal = ((easyDMSTool.Doc4SOAP.DOCUMENTSPortType)(this)).EndgetWorkflowPattern(result);
            workflowPattern = retVal.workflowPattern;
            return retVal.sessionID;
        }
        
        private System.IAsyncResult OnBegingetWorkflowPattern(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string sessionID = ((string)(inValues[0]));
            return this.BegingetWorkflowPattern(sessionID, callback, asyncState);
        }
        
        private object[] OnEndgetWorkflowPattern(System.IAsyncResult result) {
            easyDMSTool.Doc4SOAP.WorkflowPattern[] workflowPattern = this.GetDefaultValueForInitialization<easyDMSTool.Doc4SOAP.WorkflowPattern[]>();
            string retVal = this.EndgetWorkflowPattern(result, out workflowPattern);
            return new object[] {
                    workflowPattern,
                    retVal};
        }
        
        private void OngetWorkflowPatternCompleted(object state) {
            if ((this.getWorkflowPatternCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.getWorkflowPatternCompleted(this, new getWorkflowPatternCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void getWorkflowPatternAsync(string sessionID) {
            this.getWorkflowPatternAsync(sessionID, null);
        }
        
        public void getWorkflowPatternAsync(string sessionID, object userState) {
            if ((this.onBegingetWorkflowPatternDelegate == null)) {
                this.onBegingetWorkflowPatternDelegate = new BeginOperationDelegate(this.OnBegingetWorkflowPattern);
            }
            if ((this.onEndgetWorkflowPatternDelegate == null)) {
                this.onEndgetWorkflowPatternDelegate = new EndOperationDelegate(this.OnEndgetWorkflowPattern);
            }
            if ((this.ongetWorkflowPatternCompletedDelegate == null)) {
                this.ongetWorkflowPatternCompletedDelegate = new System.Threading.SendOrPostCallback(this.OngetWorkflowPatternCompleted);
            }
            base.InvokeAsync(this.onBegingetWorkflowPatternDelegate, new object[] {
                        sessionID}, this.onEndgetWorkflowPatternDelegate, this.ongetWorkflowPatternCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        easyDMSTool.Doc4SOAP.startWorkflowResponse easyDMSTool.Doc4SOAP.DOCUMENTSPortType.startWorkflow(easyDMSTool.Doc4SOAP.startWorkflowRequest request) {
            return base.Channel.startWorkflow(request);
        }
        
        public void startWorkflow(ref string sessionID, string fileId, string idWorkflowPattern) {
            easyDMSTool.Doc4SOAP.startWorkflowRequest inValue = new easyDMSTool.Doc4SOAP.startWorkflowRequest();
            inValue.sessionID = sessionID;
            inValue.fileId = fileId;
            inValue.idWorkflowPattern = idWorkflowPattern;
            easyDMSTool.Doc4SOAP.startWorkflowResponse retVal = ((easyDMSTool.Doc4SOAP.DOCUMENTSPortType)(this)).startWorkflow(inValue);
            sessionID = retVal.sessionID;
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult easyDMSTool.Doc4SOAP.DOCUMENTSPortType.BeginstartWorkflow(easyDMSTool.Doc4SOAP.startWorkflowRequest request, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginstartWorkflow(request, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginstartWorkflow(string sessionID, string fileId, string idWorkflowPattern, System.AsyncCallback callback, object asyncState) {
            easyDMSTool.Doc4SOAP.startWorkflowRequest inValue = new easyDMSTool.Doc4SOAP.startWorkflowRequest();
            inValue.sessionID = sessionID;
            inValue.fileId = fileId;
            inValue.idWorkflowPattern = idWorkflowPattern;
            return ((easyDMSTool.Doc4SOAP.DOCUMENTSPortType)(this)).BeginstartWorkflow(inValue, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        easyDMSTool.Doc4SOAP.startWorkflowResponse easyDMSTool.Doc4SOAP.DOCUMENTSPortType.EndstartWorkflow(System.IAsyncResult result) {
            return base.Channel.EndstartWorkflow(result);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public string EndstartWorkflow(System.IAsyncResult result) {
            easyDMSTool.Doc4SOAP.startWorkflowResponse retVal = ((easyDMSTool.Doc4SOAP.DOCUMENTSPortType)(this)).EndstartWorkflow(result);
            return retVal.sessionID;
        }
        
        private System.IAsyncResult OnBeginstartWorkflow(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string sessionID = ((string)(inValues[0]));
            string fileId = ((string)(inValues[1]));
            string idWorkflowPattern = ((string)(inValues[2]));
            return this.BeginstartWorkflow(sessionID, fileId, idWorkflowPattern, callback, asyncState);
        }
        
        private object[] OnEndstartWorkflow(System.IAsyncResult result) {
            string retVal = this.EndstartWorkflow(result);
            return new object[] {
                    retVal};
        }
        
        private void OnstartWorkflowCompleted(object state) {
            if ((this.startWorkflowCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.startWorkflowCompleted(this, new startWorkflowCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void startWorkflowAsync(string sessionID, string fileId, string idWorkflowPattern) {
            this.startWorkflowAsync(sessionID, fileId, idWorkflowPattern, null);
        }
        
        public void startWorkflowAsync(string sessionID, string fileId, string idWorkflowPattern, object userState) {
            if ((this.onBeginstartWorkflowDelegate == null)) {
                this.onBeginstartWorkflowDelegate = new BeginOperationDelegate(this.OnBeginstartWorkflow);
            }
            if ((this.onEndstartWorkflowDelegate == null)) {
                this.onEndstartWorkflowDelegate = new EndOperationDelegate(this.OnEndstartWorkflow);
            }
            if ((this.onstartWorkflowCompletedDelegate == null)) {
                this.onstartWorkflowCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnstartWorkflowCompleted);
            }
            base.InvokeAsync(this.onBeginstartWorkflowDelegate, new object[] {
                        sessionID,
                        fileId,
                        idWorkflowPattern}, this.onEndstartWorkflowDelegate, this.onstartWorkflowCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        easyDMSTool.Doc4SOAP.cancelWorkflowResponse easyDMSTool.Doc4SOAP.DOCUMENTSPortType.cancelWorkflow(easyDMSTool.Doc4SOAP.cancelWorkflowRequest request) {
            return base.Channel.cancelWorkflow(request);
        }
        
        public void cancelWorkflow(ref string sessionID, string fileId) {
            easyDMSTool.Doc4SOAP.cancelWorkflowRequest inValue = new easyDMSTool.Doc4SOAP.cancelWorkflowRequest();
            inValue.sessionID = sessionID;
            inValue.fileId = fileId;
            easyDMSTool.Doc4SOAP.cancelWorkflowResponse retVal = ((easyDMSTool.Doc4SOAP.DOCUMENTSPortType)(this)).cancelWorkflow(inValue);
            sessionID = retVal.sessionID;
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult easyDMSTool.Doc4SOAP.DOCUMENTSPortType.BegincancelWorkflow(easyDMSTool.Doc4SOAP.cancelWorkflowRequest request, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BegincancelWorkflow(request, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BegincancelWorkflow(string sessionID, string fileId, System.AsyncCallback callback, object asyncState) {
            easyDMSTool.Doc4SOAP.cancelWorkflowRequest inValue = new easyDMSTool.Doc4SOAP.cancelWorkflowRequest();
            inValue.sessionID = sessionID;
            inValue.fileId = fileId;
            return ((easyDMSTool.Doc4SOAP.DOCUMENTSPortType)(this)).BegincancelWorkflow(inValue, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        easyDMSTool.Doc4SOAP.cancelWorkflowResponse easyDMSTool.Doc4SOAP.DOCUMENTSPortType.EndcancelWorkflow(System.IAsyncResult result) {
            return base.Channel.EndcancelWorkflow(result);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public string EndcancelWorkflow(System.IAsyncResult result) {
            easyDMSTool.Doc4SOAP.cancelWorkflowResponse retVal = ((easyDMSTool.Doc4SOAP.DOCUMENTSPortType)(this)).EndcancelWorkflow(result);
            return retVal.sessionID;
        }
        
        private System.IAsyncResult OnBegincancelWorkflow(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string sessionID = ((string)(inValues[0]));
            string fileId = ((string)(inValues[1]));
            return this.BegincancelWorkflow(sessionID, fileId, callback, asyncState);
        }
        
        private object[] OnEndcancelWorkflow(System.IAsyncResult result) {
            string retVal = this.EndcancelWorkflow(result);
            return new object[] {
                    retVal};
        }
        
        private void OncancelWorkflowCompleted(object state) {
            if ((this.cancelWorkflowCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.cancelWorkflowCompleted(this, new cancelWorkflowCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void cancelWorkflowAsync(string sessionID, string fileId) {
            this.cancelWorkflowAsync(sessionID, fileId, null);
        }
        
        public void cancelWorkflowAsync(string sessionID, string fileId, object userState) {
            if ((this.onBegincancelWorkflowDelegate == null)) {
                this.onBegincancelWorkflowDelegate = new BeginOperationDelegate(this.OnBegincancelWorkflow);
            }
            if ((this.onEndcancelWorkflowDelegate == null)) {
                this.onEndcancelWorkflowDelegate = new EndOperationDelegate(this.OnEndcancelWorkflow);
            }
            if ((this.oncancelWorkflowCompletedDelegate == null)) {
                this.oncancelWorkflowCompletedDelegate = new System.Threading.SendOrPostCallback(this.OncancelWorkflowCompleted);
            }
            base.InvokeAsync(this.onBegincancelWorkflowDelegate, new object[] {
                        sessionID,
                        fileId}, this.onEndcancelWorkflowDelegate, this.oncancelWorkflowCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        easyDMSTool.Doc4SOAP.getAutoTextResponse easyDMSTool.Doc4SOAP.DOCUMENTSPortType.getAutoText(easyDMSTool.Doc4SOAP.getAutoTextRequest request) {
            return base.Channel.getAutoText(request);
        }
        
        public string[] getAutoText(ref string sessionID, string fileId, string[] autoTextNames) {
            easyDMSTool.Doc4SOAP.getAutoTextRequest inValue = new easyDMSTool.Doc4SOAP.getAutoTextRequest();
            inValue.sessionID = sessionID;
            inValue.fileId = fileId;
            inValue.autoTextNames = autoTextNames;
            easyDMSTool.Doc4SOAP.getAutoTextResponse retVal = ((easyDMSTool.Doc4SOAP.DOCUMENTSPortType)(this)).getAutoText(inValue);
            sessionID = retVal.sessionID;
            return retVal.autoTextValues;
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult easyDMSTool.Doc4SOAP.DOCUMENTSPortType.BegingetAutoText(easyDMSTool.Doc4SOAP.getAutoTextRequest request, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BegingetAutoText(request, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BegingetAutoText(string sessionID, string fileId, string[] autoTextNames, System.AsyncCallback callback, object asyncState) {
            easyDMSTool.Doc4SOAP.getAutoTextRequest inValue = new easyDMSTool.Doc4SOAP.getAutoTextRequest();
            inValue.sessionID = sessionID;
            inValue.fileId = fileId;
            inValue.autoTextNames = autoTextNames;
            return ((easyDMSTool.Doc4SOAP.DOCUMENTSPortType)(this)).BegingetAutoText(inValue, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        easyDMSTool.Doc4SOAP.getAutoTextResponse easyDMSTool.Doc4SOAP.DOCUMENTSPortType.EndgetAutoText(System.IAsyncResult result) {
            return base.Channel.EndgetAutoText(result);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public string EndgetAutoText(System.IAsyncResult result, out string[] autoTextValues) {
            easyDMSTool.Doc4SOAP.getAutoTextResponse retVal = ((easyDMSTool.Doc4SOAP.DOCUMENTSPortType)(this)).EndgetAutoText(result);
            autoTextValues = retVal.autoTextValues;
            return retVal.sessionID;
        }
        
        private System.IAsyncResult OnBegingetAutoText(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string sessionID = ((string)(inValues[0]));
            string fileId = ((string)(inValues[1]));
            string[] autoTextNames = ((string[])(inValues[2]));
            return this.BegingetAutoText(sessionID, fileId, autoTextNames, callback, asyncState);
        }
        
        private object[] OnEndgetAutoText(System.IAsyncResult result) {
            string[] autoTextValues = this.GetDefaultValueForInitialization<string[]>();
            string retVal = this.EndgetAutoText(result, out autoTextValues);
            return new object[] {
                    autoTextValues,
                    retVal};
        }
        
        private void OngetAutoTextCompleted(object state) {
            if ((this.getAutoTextCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.getAutoTextCompleted(this, new getAutoTextCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void getAutoTextAsync(string sessionID, string fileId, string[] autoTextNames) {
            this.getAutoTextAsync(sessionID, fileId, autoTextNames, null);
        }
        
        public void getAutoTextAsync(string sessionID, string fileId, string[] autoTextNames, object userState) {
            if ((this.onBegingetAutoTextDelegate == null)) {
                this.onBegingetAutoTextDelegate = new BeginOperationDelegate(this.OnBegingetAutoText);
            }
            if ((this.onEndgetAutoTextDelegate == null)) {
                this.onEndgetAutoTextDelegate = new EndOperationDelegate(this.OnEndgetAutoText);
            }
            if ((this.ongetAutoTextCompletedDelegate == null)) {
                this.ongetAutoTextCompletedDelegate = new System.Threading.SendOrPostCallback(this.OngetAutoTextCompleted);
            }
            base.InvokeAsync(this.onBegingetAutoTextDelegate, new object[] {
                        sessionID,
                        fileId,
                        autoTextNames}, this.onEndgetAutoTextDelegate, this.ongetAutoTextCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        easyDMSTool.Doc4SOAP.getPropertyResponse easyDMSTool.Doc4SOAP.DOCUMENTSPortType.getProperty(easyDMSTool.Doc4SOAP.getPropertyRequest request) {
            return base.Channel.getProperty(request);
        }
        
        public string[] getProperty(ref string sessionID, string fileId, string[] propertyNames) {
            easyDMSTool.Doc4SOAP.getPropertyRequest inValue = new easyDMSTool.Doc4SOAP.getPropertyRequest();
            inValue.sessionID = sessionID;
            inValue.fileId = fileId;
            inValue.propertyNames = propertyNames;
            easyDMSTool.Doc4SOAP.getPropertyResponse retVal = ((easyDMSTool.Doc4SOAP.DOCUMENTSPortType)(this)).getProperty(inValue);
            sessionID = retVal.sessionID;
            return retVal.propertyValues;
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult easyDMSTool.Doc4SOAP.DOCUMENTSPortType.BegingetProperty(easyDMSTool.Doc4SOAP.getPropertyRequest request, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BegingetProperty(request, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BegingetProperty(string sessionID, string fileId, string[] propertyNames, System.AsyncCallback callback, object asyncState) {
            easyDMSTool.Doc4SOAP.getPropertyRequest inValue = new easyDMSTool.Doc4SOAP.getPropertyRequest();
            inValue.sessionID = sessionID;
            inValue.fileId = fileId;
            inValue.propertyNames = propertyNames;
            return ((easyDMSTool.Doc4SOAP.DOCUMENTSPortType)(this)).BegingetProperty(inValue, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        easyDMSTool.Doc4SOAP.getPropertyResponse easyDMSTool.Doc4SOAP.DOCUMENTSPortType.EndgetProperty(System.IAsyncResult result) {
            return base.Channel.EndgetProperty(result);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public string EndgetProperty(System.IAsyncResult result, out string[] propertyValues) {
            easyDMSTool.Doc4SOAP.getPropertyResponse retVal = ((easyDMSTool.Doc4SOAP.DOCUMENTSPortType)(this)).EndgetProperty(result);
            propertyValues = retVal.propertyValues;
            return retVal.sessionID;
        }
        
        private System.IAsyncResult OnBegingetProperty(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string sessionID = ((string)(inValues[0]));
            string fileId = ((string)(inValues[1]));
            string[] propertyNames = ((string[])(inValues[2]));
            return this.BegingetProperty(sessionID, fileId, propertyNames, callback, asyncState);
        }
        
        private object[] OnEndgetProperty(System.IAsyncResult result) {
            string[] propertyValues = this.GetDefaultValueForInitialization<string[]>();
            string retVal = this.EndgetProperty(result, out propertyValues);
            return new object[] {
                    propertyValues,
                    retVal};
        }
        
        private void OngetPropertyCompleted(object state) {
            if ((this.getPropertyCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.getPropertyCompleted(this, new getPropertyCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void getPropertyAsync(string sessionID, string fileId, string[] propertyNames) {
            this.getPropertyAsync(sessionID, fileId, propertyNames, null);
        }
        
        public void getPropertyAsync(string sessionID, string fileId, string[] propertyNames, object userState) {
            if ((this.onBegingetPropertyDelegate == null)) {
                this.onBegingetPropertyDelegate = new BeginOperationDelegate(this.OnBegingetProperty);
            }
            if ((this.onEndgetPropertyDelegate == null)) {
                this.onEndgetPropertyDelegate = new EndOperationDelegate(this.OnEndgetProperty);
            }
            if ((this.ongetPropertyCompletedDelegate == null)) {
                this.ongetPropertyCompletedDelegate = new System.Threading.SendOrPostCallback(this.OngetPropertyCompleted);
            }
            base.InvokeAsync(this.onBegingetPropertyDelegate, new object[] {
                        sessionID,
                        fileId,
                        propertyNames}, this.onEndgetPropertyDelegate, this.ongetPropertyCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        easyDMSTool.Doc4SOAP.getFileInfoResponse easyDMSTool.Doc4SOAP.DOCUMENTSPortType.getFileInfo(easyDMSTool.Doc4SOAP.getFileInfoRequest request) {
            return base.Channel.getFileInfo(request);
        }
        
        public easyDMSTool.Doc4SOAP.FieldData[] getFileInfo(ref string sessionID, string fileId, bool allFields, bool allAttributes, string[] wishedFieldNames, out easyDMSTool.Doc4SOAP.DocInfo[] documents, out string filetypeId, out string filetypeName, out string filetypeLabel) {
            easyDMSTool.Doc4SOAP.getFileInfoRequest inValue = new easyDMSTool.Doc4SOAP.getFileInfoRequest();
            inValue.sessionID = sessionID;
            inValue.fileId = fileId;
            inValue.allFields = allFields;
            inValue.allAttributes = allAttributes;
            inValue.wishedFieldNames = wishedFieldNames;
            easyDMSTool.Doc4SOAP.getFileInfoResponse retVal = ((easyDMSTool.Doc4SOAP.DOCUMENTSPortType)(this)).getFileInfo(inValue);
            sessionID = retVal.sessionID;
            documents = retVal.documents;
            filetypeId = retVal.filetypeId;
            filetypeName = retVal.filetypeName;
            filetypeLabel = retVal.filetypeLabel;
            return retVal.fieldvalues;
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult easyDMSTool.Doc4SOAP.DOCUMENTSPortType.BegingetFileInfo(easyDMSTool.Doc4SOAP.getFileInfoRequest request, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BegingetFileInfo(request, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BegingetFileInfo(string sessionID, string fileId, bool allFields, bool allAttributes, string[] wishedFieldNames, System.AsyncCallback callback, object asyncState) {
            easyDMSTool.Doc4SOAP.getFileInfoRequest inValue = new easyDMSTool.Doc4SOAP.getFileInfoRequest();
            inValue.sessionID = sessionID;
            inValue.fileId = fileId;
            inValue.allFields = allFields;
            inValue.allAttributes = allAttributes;
            inValue.wishedFieldNames = wishedFieldNames;
            return ((easyDMSTool.Doc4SOAP.DOCUMENTSPortType)(this)).BegingetFileInfo(inValue, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        easyDMSTool.Doc4SOAP.getFileInfoResponse easyDMSTool.Doc4SOAP.DOCUMENTSPortType.EndgetFileInfo(System.IAsyncResult result) {
            return base.Channel.EndgetFileInfo(result);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public string EndgetFileInfo(System.IAsyncResult result, out easyDMSTool.Doc4SOAP.FieldData[] fieldvalues, out easyDMSTool.Doc4SOAP.DocInfo[] documents, out string filetypeId, out string filetypeName, out string filetypeLabel) {
            easyDMSTool.Doc4SOAP.getFileInfoResponse retVal = ((easyDMSTool.Doc4SOAP.DOCUMENTSPortType)(this)).EndgetFileInfo(result);
            fieldvalues = retVal.fieldvalues;
            documents = retVal.documents;
            filetypeId = retVal.filetypeId;
            filetypeName = retVal.filetypeName;
            filetypeLabel = retVal.filetypeLabel;
            return retVal.sessionID;
        }
        
        private System.IAsyncResult OnBegingetFileInfo(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string sessionID = ((string)(inValues[0]));
            string fileId = ((string)(inValues[1]));
            bool allFields = ((bool)(inValues[2]));
            bool allAttributes = ((bool)(inValues[3]));
            string[] wishedFieldNames = ((string[])(inValues[4]));
            return this.BegingetFileInfo(sessionID, fileId, allFields, allAttributes, wishedFieldNames, callback, asyncState);
        }
        
        private object[] OnEndgetFileInfo(System.IAsyncResult result) {
            easyDMSTool.Doc4SOAP.FieldData[] fieldvalues = this.GetDefaultValueForInitialization<easyDMSTool.Doc4SOAP.FieldData[]>();
            easyDMSTool.Doc4SOAP.DocInfo[] documents = this.GetDefaultValueForInitialization<easyDMSTool.Doc4SOAP.DocInfo[]>();
            string filetypeId = this.GetDefaultValueForInitialization<string>();
            string filetypeName = this.GetDefaultValueForInitialization<string>();
            string filetypeLabel = this.GetDefaultValueForInitialization<string>();
            string retVal = this.EndgetFileInfo(result, out fieldvalues, out documents, out filetypeId, out filetypeName, out filetypeLabel);
            return new object[] {
                    fieldvalues,
                    documents,
                    filetypeId,
                    filetypeName,
                    filetypeLabel,
                    retVal};
        }
        
        private void OngetFileInfoCompleted(object state) {
            if ((this.getFileInfoCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.getFileInfoCompleted(this, new getFileInfoCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void getFileInfoAsync(string sessionID, string fileId, bool allFields, bool allAttributes, string[] wishedFieldNames) {
            this.getFileInfoAsync(sessionID, fileId, allFields, allAttributes, wishedFieldNames, null);
        }
        
        public void getFileInfoAsync(string sessionID, string fileId, bool allFields, bool allAttributes, string[] wishedFieldNames, object userState) {
            if ((this.onBegingetFileInfoDelegate == null)) {
                this.onBegingetFileInfoDelegate = new BeginOperationDelegate(this.OnBegingetFileInfo);
            }
            if ((this.onEndgetFileInfoDelegate == null)) {
                this.onEndgetFileInfoDelegate = new EndOperationDelegate(this.OnEndgetFileInfo);
            }
            if ((this.ongetFileInfoCompletedDelegate == null)) {
                this.ongetFileInfoCompletedDelegate = new System.Threading.SendOrPostCallback(this.OngetFileInfoCompleted);
            }
            base.InvokeAsync(this.onBegingetFileInfoDelegate, new object[] {
                        sessionID,
                        fileId,
                        allFields,
                        allAttributes,
                        wishedFieldNames}, this.onEndgetFileInfoDelegate, this.ongetFileInfoCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        easyDMSTool.Doc4SOAP.getFilesInfoResponse easyDMSTool.Doc4SOAP.DOCUMENTSPortType.getFilesInfo(easyDMSTool.Doc4SOAP.getFilesInfoRequest request) {
            return base.Channel.getFilesInfo(request);
        }
        
        public easyDMSTool.Doc4SOAP.FileInfo[] getFilesInfo(ref string sessionID, string[] fileIds, bool allFields, bool allAttributes, string[] wishedFieldNames, bool failOnAllErrors) {
            easyDMSTool.Doc4SOAP.getFilesInfoRequest inValue = new easyDMSTool.Doc4SOAP.getFilesInfoRequest();
            inValue.sessionID = sessionID;
            inValue.fileIds = fileIds;
            inValue.allFields = allFields;
            inValue.allAttributes = allAttributes;
            inValue.wishedFieldNames = wishedFieldNames;
            inValue.failOnAllErrors = failOnAllErrors;
            easyDMSTool.Doc4SOAP.getFilesInfoResponse retVal = ((easyDMSTool.Doc4SOAP.DOCUMENTSPortType)(this)).getFilesInfo(inValue);
            sessionID = retVal.sessionID;
            return retVal.file;
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult easyDMSTool.Doc4SOAP.DOCUMENTSPortType.BegingetFilesInfo(easyDMSTool.Doc4SOAP.getFilesInfoRequest request, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BegingetFilesInfo(request, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BegingetFilesInfo(string sessionID, string[] fileIds, bool allFields, bool allAttributes, string[] wishedFieldNames, bool failOnAllErrors, System.AsyncCallback callback, object asyncState) {
            easyDMSTool.Doc4SOAP.getFilesInfoRequest inValue = new easyDMSTool.Doc4SOAP.getFilesInfoRequest();
            inValue.sessionID = sessionID;
            inValue.fileIds = fileIds;
            inValue.allFields = allFields;
            inValue.allAttributes = allAttributes;
            inValue.wishedFieldNames = wishedFieldNames;
            inValue.failOnAllErrors = failOnAllErrors;
            return ((easyDMSTool.Doc4SOAP.DOCUMENTSPortType)(this)).BegingetFilesInfo(inValue, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        easyDMSTool.Doc4SOAP.getFilesInfoResponse easyDMSTool.Doc4SOAP.DOCUMENTSPortType.EndgetFilesInfo(System.IAsyncResult result) {
            return base.Channel.EndgetFilesInfo(result);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public string EndgetFilesInfo(System.IAsyncResult result, out easyDMSTool.Doc4SOAP.FileInfo[] file) {
            easyDMSTool.Doc4SOAP.getFilesInfoResponse retVal = ((easyDMSTool.Doc4SOAP.DOCUMENTSPortType)(this)).EndgetFilesInfo(result);
            file = retVal.file;
            return retVal.sessionID;
        }
        
        private System.IAsyncResult OnBegingetFilesInfo(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string sessionID = ((string)(inValues[0]));
            string[] fileIds = ((string[])(inValues[1]));
            bool allFields = ((bool)(inValues[2]));
            bool allAttributes = ((bool)(inValues[3]));
            string[] wishedFieldNames = ((string[])(inValues[4]));
            bool failOnAllErrors = ((bool)(inValues[5]));
            return this.BegingetFilesInfo(sessionID, fileIds, allFields, allAttributes, wishedFieldNames, failOnAllErrors, callback, asyncState);
        }
        
        private object[] OnEndgetFilesInfo(System.IAsyncResult result) {
            easyDMSTool.Doc4SOAP.FileInfo[] file = this.GetDefaultValueForInitialization<easyDMSTool.Doc4SOAP.FileInfo[]>();
            string retVal = this.EndgetFilesInfo(result, out file);
            return new object[] {
                    file,
                    retVal};
        }
        
        private void OngetFilesInfoCompleted(object state) {
            if ((this.getFilesInfoCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.getFilesInfoCompleted(this, new getFilesInfoCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void getFilesInfoAsync(string sessionID, string[] fileIds, bool allFields, bool allAttributes, string[] wishedFieldNames, bool failOnAllErrors) {
            this.getFilesInfoAsync(sessionID, fileIds, allFields, allAttributes, wishedFieldNames, failOnAllErrors, null);
        }
        
        public void getFilesInfoAsync(string sessionID, string[] fileIds, bool allFields, bool allAttributes, string[] wishedFieldNames, bool failOnAllErrors, object userState) {
            if ((this.onBegingetFilesInfoDelegate == null)) {
                this.onBegingetFilesInfoDelegate = new BeginOperationDelegate(this.OnBegingetFilesInfo);
            }
            if ((this.onEndgetFilesInfoDelegate == null)) {
                this.onEndgetFilesInfoDelegate = new EndOperationDelegate(this.OnEndgetFilesInfo);
            }
            if ((this.ongetFilesInfoCompletedDelegate == null)) {
                this.ongetFilesInfoCompletedDelegate = new System.Threading.SendOrPostCallback(this.OngetFilesInfoCompleted);
            }
            base.InvokeAsync(this.onBegingetFilesInfoDelegate, new object[] {
                        sessionID,
                        fileIds,
                        allFields,
                        allAttributes,
                        wishedFieldNames,
                        failOnAllErrors}, this.onEndgetFilesInfoDelegate, this.ongetFilesInfoCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        easyDMSTool.Doc4SOAP.reportResponse easyDMSTool.Doc4SOAP.DOCUMENTSPortType.report(easyDMSTool.Doc4SOAP.reportRequest request) {
            return base.Channel.report(request);
        }
        
        public string report(ref string sessionID, string[] filetypes, string[] archives, string[] columns, string filter, string sort) {
            easyDMSTool.Doc4SOAP.reportRequest inValue = new easyDMSTool.Doc4SOAP.reportRequest();
            inValue.sessionID = sessionID;
            inValue.filetypes = filetypes;
            inValue.archives = archives;
            inValue.columns = columns;
            inValue.filter = filter;
            inValue.sort = sort;
            easyDMSTool.Doc4SOAP.reportResponse retVal = ((easyDMSTool.Doc4SOAP.DOCUMENTSPortType)(this)).report(inValue);
            sessionID = retVal.sessionID;
            return retVal.report;
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult easyDMSTool.Doc4SOAP.DOCUMENTSPortType.Beginreport(easyDMSTool.Doc4SOAP.reportRequest request, System.AsyncCallback callback, object asyncState) {
            return base.Channel.Beginreport(request, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult Beginreport(string sessionID, string[] filetypes, string[] archives, string[] columns, string filter, string sort, System.AsyncCallback callback, object asyncState) {
            easyDMSTool.Doc4SOAP.reportRequest inValue = new easyDMSTool.Doc4SOAP.reportRequest();
            inValue.sessionID = sessionID;
            inValue.filetypes = filetypes;
            inValue.archives = archives;
            inValue.columns = columns;
            inValue.filter = filter;
            inValue.sort = sort;
            return ((easyDMSTool.Doc4SOAP.DOCUMENTSPortType)(this)).Beginreport(inValue, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        easyDMSTool.Doc4SOAP.reportResponse easyDMSTool.Doc4SOAP.DOCUMENTSPortType.Endreport(System.IAsyncResult result) {
            return base.Channel.Endreport(result);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public string Endreport(System.IAsyncResult result, out string report) {
            easyDMSTool.Doc4SOAP.reportResponse retVal = ((easyDMSTool.Doc4SOAP.DOCUMENTSPortType)(this)).Endreport(result);
            report = retVal.report;
            return retVal.sessionID;
        }
        
        private System.IAsyncResult OnBeginreport(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string sessionID = ((string)(inValues[0]));
            string[] filetypes = ((string[])(inValues[1]));
            string[] archives = ((string[])(inValues[2]));
            string[] columns = ((string[])(inValues[3]));
            string filter = ((string)(inValues[4]));
            string sort = ((string)(inValues[5]));
            return this.Beginreport(sessionID, filetypes, archives, columns, filter, sort, callback, asyncState);
        }
        
        private object[] OnEndreport(System.IAsyncResult result) {
            string report = this.GetDefaultValueForInitialization<string>();
            string retVal = this.Endreport(result, out report);
            return new object[] {
                    report,
                    retVal};
        }
        
        private void OnreportCompleted(object state) {
            if ((this.reportCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.reportCompleted(this, new reportCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void reportAsync(string sessionID, string[] filetypes, string[] archives, string[] columns, string filter, string sort) {
            this.reportAsync(sessionID, filetypes, archives, columns, filter, sort, null);
        }
        
        public void reportAsync(string sessionID, string[] filetypes, string[] archives, string[] columns, string filter, string sort, object userState) {
            if ((this.onBeginreportDelegate == null)) {
                this.onBeginreportDelegate = new BeginOperationDelegate(this.OnBeginreport);
            }
            if ((this.onEndreportDelegate == null)) {
                this.onEndreportDelegate = new EndOperationDelegate(this.OnEndreport);
            }
            if ((this.onreportCompletedDelegate == null)) {
                this.onreportCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnreportCompleted);
            }
            base.InvokeAsync(this.onBeginreportDelegate, new object[] {
                        sessionID,
                        filetypes,
                        archives,
                        columns,
                        filter,
                        sort}, this.onEndreportDelegate, this.onreportCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        easyDMSTool.Doc4SOAP.report2Response easyDMSTool.Doc4SOAP.DOCUMENTSPortType.report2(easyDMSTool.Doc4SOAP.report2Request request) {
            return base.Channel.report2(request);
        }
        
        public easyDMSTool.Doc4SOAP.HitList report2(ref string sessionID, string[] filetypes, string[] archives, string[] columns, string filter, string sort) {
            easyDMSTool.Doc4SOAP.report2Request inValue = new easyDMSTool.Doc4SOAP.report2Request();
            inValue.sessionID = sessionID;
            inValue.filetypes = filetypes;
            inValue.archives = archives;
            inValue.columns = columns;
            inValue.filter = filter;
            inValue.sort = sort;
            easyDMSTool.Doc4SOAP.report2Response retVal = ((easyDMSTool.Doc4SOAP.DOCUMENTSPortType)(this)).report2(inValue);
            sessionID = retVal.sessionID;
            return retVal.hitlist;
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult easyDMSTool.Doc4SOAP.DOCUMENTSPortType.Beginreport2(easyDMSTool.Doc4SOAP.report2Request request, System.AsyncCallback callback, object asyncState) {
            return base.Channel.Beginreport2(request, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult Beginreport2(string sessionID, string[] filetypes, string[] archives, string[] columns, string filter, string sort, System.AsyncCallback callback, object asyncState) {
            easyDMSTool.Doc4SOAP.report2Request inValue = new easyDMSTool.Doc4SOAP.report2Request();
            inValue.sessionID = sessionID;
            inValue.filetypes = filetypes;
            inValue.archives = archives;
            inValue.columns = columns;
            inValue.filter = filter;
            inValue.sort = sort;
            return ((easyDMSTool.Doc4SOAP.DOCUMENTSPortType)(this)).Beginreport2(inValue, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        easyDMSTool.Doc4SOAP.report2Response easyDMSTool.Doc4SOAP.DOCUMENTSPortType.Endreport2(System.IAsyncResult result) {
            return base.Channel.Endreport2(result);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public string Endreport2(System.IAsyncResult result, out easyDMSTool.Doc4SOAP.HitList hitlist) {
            easyDMSTool.Doc4SOAP.report2Response retVal = ((easyDMSTool.Doc4SOAP.DOCUMENTSPortType)(this)).Endreport2(result);
            hitlist = retVal.hitlist;
            return retVal.sessionID;
        }
        
        private System.IAsyncResult OnBeginreport2(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string sessionID = ((string)(inValues[0]));
            string[] filetypes = ((string[])(inValues[1]));
            string[] archives = ((string[])(inValues[2]));
            string[] columns = ((string[])(inValues[3]));
            string filter = ((string)(inValues[4]));
            string sort = ((string)(inValues[5]));
            return this.Beginreport2(sessionID, filetypes, archives, columns, filter, sort, callback, asyncState);
        }
        
        private object[] OnEndreport2(System.IAsyncResult result) {
            easyDMSTool.Doc4SOAP.HitList hitlist = this.GetDefaultValueForInitialization<easyDMSTool.Doc4SOAP.HitList>();
            string retVal = this.Endreport2(result, out hitlist);
            return new object[] {
                    hitlist,
                    retVal};
        }
        
        private void Onreport2Completed(object state) {
            if ((this.report2Completed != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.report2Completed(this, new report2CompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void report2Async(string sessionID, string[] filetypes, string[] archives, string[] columns, string filter, string sort) {
            this.report2Async(sessionID, filetypes, archives, columns, filter, sort, null);
        }
        
        public void report2Async(string sessionID, string[] filetypes, string[] archives, string[] columns, string filter, string sort, object userState) {
            if ((this.onBeginreport2Delegate == null)) {
                this.onBeginreport2Delegate = new BeginOperationDelegate(this.OnBeginreport2);
            }
            if ((this.onEndreport2Delegate == null)) {
                this.onEndreport2Delegate = new EndOperationDelegate(this.OnEndreport2);
            }
            if ((this.onreport2CompletedDelegate == null)) {
                this.onreport2CompletedDelegate = new System.Threading.SendOrPostCallback(this.Onreport2Completed);
            }
            base.InvokeAsync(this.onBeginreport2Delegate, new object[] {
                        sessionID,
                        filetypes,
                        archives,
                        columns,
                        filter,
                        sort}, this.onEndreport2Delegate, this.onreport2CompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        easyDMSTool.Doc4SOAP.report3Response easyDMSTool.Doc4SOAP.DOCUMENTSPortType.report3(easyDMSTool.Doc4SOAP.report3Request request) {
            return base.Channel.report3(request);
        }
        
        public easyDMSTool.Doc4SOAP.HitList report3(ref string sessionID, string[] filetypes, string[] archives, string[] columns, string filter, string sort, string hitlistname) {
            easyDMSTool.Doc4SOAP.report3Request inValue = new easyDMSTool.Doc4SOAP.report3Request();
            inValue.sessionID = sessionID;
            inValue.filetypes = filetypes;
            inValue.archives = archives;
            inValue.columns = columns;
            inValue.filter = filter;
            inValue.sort = sort;
            inValue.hitlistname = hitlistname;
            easyDMSTool.Doc4SOAP.report3Response retVal = ((easyDMSTool.Doc4SOAP.DOCUMENTSPortType)(this)).report3(inValue);
            sessionID = retVal.sessionID;
            return retVal.hitlist;
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult easyDMSTool.Doc4SOAP.DOCUMENTSPortType.Beginreport3(easyDMSTool.Doc4SOAP.report3Request request, System.AsyncCallback callback, object asyncState) {
            return base.Channel.Beginreport3(request, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult Beginreport3(string sessionID, string[] filetypes, string[] archives, string[] columns, string filter, string sort, string hitlistname, System.AsyncCallback callback, object asyncState) {
            easyDMSTool.Doc4SOAP.report3Request inValue = new easyDMSTool.Doc4SOAP.report3Request();
            inValue.sessionID = sessionID;
            inValue.filetypes = filetypes;
            inValue.archives = archives;
            inValue.columns = columns;
            inValue.filter = filter;
            inValue.sort = sort;
            inValue.hitlistname = hitlistname;
            return ((easyDMSTool.Doc4SOAP.DOCUMENTSPortType)(this)).Beginreport3(inValue, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        easyDMSTool.Doc4SOAP.report3Response easyDMSTool.Doc4SOAP.DOCUMENTSPortType.Endreport3(System.IAsyncResult result) {
            return base.Channel.Endreport3(result);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public string Endreport3(System.IAsyncResult result, out easyDMSTool.Doc4SOAP.HitList hitlist) {
            easyDMSTool.Doc4SOAP.report3Response retVal = ((easyDMSTool.Doc4SOAP.DOCUMENTSPortType)(this)).Endreport3(result);
            hitlist = retVal.hitlist;
            return retVal.sessionID;
        }
        
        private System.IAsyncResult OnBeginreport3(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string sessionID = ((string)(inValues[0]));
            string[] filetypes = ((string[])(inValues[1]));
            string[] archives = ((string[])(inValues[2]));
            string[] columns = ((string[])(inValues[3]));
            string filter = ((string)(inValues[4]));
            string sort = ((string)(inValues[5]));
            string hitlistname = ((string)(inValues[6]));
            return this.Beginreport3(sessionID, filetypes, archives, columns, filter, sort, hitlistname, callback, asyncState);
        }
        
        private object[] OnEndreport3(System.IAsyncResult result) {
            easyDMSTool.Doc4SOAP.HitList hitlist = this.GetDefaultValueForInitialization<easyDMSTool.Doc4SOAP.HitList>();
            string retVal = this.Endreport3(result, out hitlist);
            return new object[] {
                    hitlist,
                    retVal};
        }
        
        private void Onreport3Completed(object state) {
            if ((this.report3Completed != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.report3Completed(this, new report3CompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void report3Async(string sessionID, string[] filetypes, string[] archives, string[] columns, string filter, string sort, string hitlistname) {
            this.report3Async(sessionID, filetypes, archives, columns, filter, sort, hitlistname, null);
        }
        
        public void report3Async(string sessionID, string[] filetypes, string[] archives, string[] columns, string filter, string sort, string hitlistname, object userState) {
            if ((this.onBeginreport3Delegate == null)) {
                this.onBeginreport3Delegate = new BeginOperationDelegate(this.OnBeginreport3);
            }
            if ((this.onEndreport3Delegate == null)) {
                this.onEndreport3Delegate = new EndOperationDelegate(this.OnEndreport3);
            }
            if ((this.onreport3CompletedDelegate == null)) {
                this.onreport3CompletedDelegate = new System.Threading.SendOrPostCallback(this.Onreport3Completed);
            }
            base.InvokeAsync(this.onBeginreport3Delegate, new object[] {
                        sessionID,
                        filetypes,
                        archives,
                        columns,
                        filter,
                        sort,
                        hitlistname}, this.onEndreport3Delegate, this.onreport3CompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        easyDMSTool.Doc4SOAP.getDocumentResponse easyDMSTool.Doc4SOAP.DOCUMENTSPortType.getDocument(easyDMSTool.Doc4SOAP.getDocumentRequest request) {
            return base.Channel.getDocument(request);
        }
        
        public string getDocument(ref string sessionID, string fileId, string docId, out int size, out string mime, out byte[] data) {
            easyDMSTool.Doc4SOAP.getDocumentRequest inValue = new easyDMSTool.Doc4SOAP.getDocumentRequest();
            inValue.sessionID = sessionID;
            inValue.fileId = fileId;
            inValue.docId = docId;
            easyDMSTool.Doc4SOAP.getDocumentResponse retVal = ((easyDMSTool.Doc4SOAP.DOCUMENTSPortType)(this)).getDocument(inValue);
            sessionID = retVal.sessionID;
            size = retVal.size;
            mime = retVal.mime;
            data = retVal.data;
            return retVal.name;
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult easyDMSTool.Doc4SOAP.DOCUMENTSPortType.BegingetDocument(easyDMSTool.Doc4SOAP.getDocumentRequest request, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BegingetDocument(request, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BegingetDocument(string sessionID, string fileId, string docId, System.AsyncCallback callback, object asyncState) {
            easyDMSTool.Doc4SOAP.getDocumentRequest inValue = new easyDMSTool.Doc4SOAP.getDocumentRequest();
            inValue.sessionID = sessionID;
            inValue.fileId = fileId;
            inValue.docId = docId;
            return ((easyDMSTool.Doc4SOAP.DOCUMENTSPortType)(this)).BegingetDocument(inValue, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        easyDMSTool.Doc4SOAP.getDocumentResponse easyDMSTool.Doc4SOAP.DOCUMENTSPortType.EndgetDocument(System.IAsyncResult result) {
            return base.Channel.EndgetDocument(result);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public string EndgetDocument(System.IAsyncResult result, out string name, out int size, out string mime, out byte[] data) {
            easyDMSTool.Doc4SOAP.getDocumentResponse retVal = ((easyDMSTool.Doc4SOAP.DOCUMENTSPortType)(this)).EndgetDocument(result);
            name = retVal.name;
            size = retVal.size;
            mime = retVal.mime;
            data = retVal.data;
            return retVal.sessionID;
        }
        
        private System.IAsyncResult OnBegingetDocument(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string sessionID = ((string)(inValues[0]));
            string fileId = ((string)(inValues[1]));
            string docId = ((string)(inValues[2]));
            return this.BegingetDocument(sessionID, fileId, docId, callback, asyncState);
        }
        
        private object[] OnEndgetDocument(System.IAsyncResult result) {
            string name = this.GetDefaultValueForInitialization<string>();
            int size = this.GetDefaultValueForInitialization<int>();
            string mime = this.GetDefaultValueForInitialization<string>();
            byte[] data = this.GetDefaultValueForInitialization<byte[]>();
            string retVal = this.EndgetDocument(result, out name, out size, out mime, out data);
            return new object[] {
                    name,
                    size,
                    mime,
                    data,
                    retVal};
        }
        
        private void OngetDocumentCompleted(object state) {
            if ((this.getDocumentCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.getDocumentCompleted(this, new getDocumentCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void getDocumentAsync(string sessionID, string fileId, string docId) {
            this.getDocumentAsync(sessionID, fileId, docId, null);
        }
        
        public void getDocumentAsync(string sessionID, string fileId, string docId, object userState) {
            if ((this.onBegingetDocumentDelegate == null)) {
                this.onBegingetDocumentDelegate = new BeginOperationDelegate(this.OnBegingetDocument);
            }
            if ((this.onEndgetDocumentDelegate == null)) {
                this.onEndgetDocumentDelegate = new EndOperationDelegate(this.OnEndgetDocument);
            }
            if ((this.ongetDocumentCompletedDelegate == null)) {
                this.ongetDocumentCompletedDelegate = new System.Threading.SendOrPostCallback(this.OngetDocumentCompleted);
            }
            base.InvokeAsync(this.onBegingetDocumentDelegate, new object[] {
                        sessionID,
                        fileId,
                        docId}, this.onEndgetDocumentDelegate, this.ongetDocumentCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        easyDMSTool.Doc4SOAP.editFileResponse easyDMSTool.Doc4SOAP.DOCUMENTSPortType.editFile(easyDMSTool.Doc4SOAP.editFileRequest request) {
            return base.Channel.editFile(request);
        }
        
        public string editFile(ref string sessionID, string fileId, string fileType, string keyField, string keyValue, easyDMSTool.Doc4SOAP.FieldData[] fields, easyDMSTool.Doc4SOAP.DocUploadData[] addDocs) {
            easyDMSTool.Doc4SOAP.editFileRequest inValue = new easyDMSTool.Doc4SOAP.editFileRequest();
            inValue.sessionID = sessionID;
            inValue.fileId = fileId;
            inValue.fileType = fileType;
            inValue.keyField = keyField;
            inValue.keyValue = keyValue;
            inValue.fields = fields;
            inValue.addDocs = addDocs;
            easyDMSTool.Doc4SOAP.editFileResponse retVal = ((easyDMSTool.Doc4SOAP.DOCUMENTSPortType)(this)).editFile(inValue);
            sessionID = retVal.sessionID;
            return retVal.newId;
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult easyDMSTool.Doc4SOAP.DOCUMENTSPortType.BegineditFile(easyDMSTool.Doc4SOAP.editFileRequest request, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BegineditFile(request, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BegineditFile(string sessionID, string fileId, string fileType, string keyField, string keyValue, easyDMSTool.Doc4SOAP.FieldData[] fields, easyDMSTool.Doc4SOAP.DocUploadData[] addDocs, System.AsyncCallback callback, object asyncState) {
            easyDMSTool.Doc4SOAP.editFileRequest inValue = new easyDMSTool.Doc4SOAP.editFileRequest();
            inValue.sessionID = sessionID;
            inValue.fileId = fileId;
            inValue.fileType = fileType;
            inValue.keyField = keyField;
            inValue.keyValue = keyValue;
            inValue.fields = fields;
            inValue.addDocs = addDocs;
            return ((easyDMSTool.Doc4SOAP.DOCUMENTSPortType)(this)).BegineditFile(inValue, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        easyDMSTool.Doc4SOAP.editFileResponse easyDMSTool.Doc4SOAP.DOCUMENTSPortType.EndeditFile(System.IAsyncResult result) {
            return base.Channel.EndeditFile(result);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public string EndeditFile(System.IAsyncResult result, out string newId) {
            easyDMSTool.Doc4SOAP.editFileResponse retVal = ((easyDMSTool.Doc4SOAP.DOCUMENTSPortType)(this)).EndeditFile(result);
            newId = retVal.newId;
            return retVal.sessionID;
        }
        
        private System.IAsyncResult OnBegineditFile(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string sessionID = ((string)(inValues[0]));
            string fileId = ((string)(inValues[1]));
            string fileType = ((string)(inValues[2]));
            string keyField = ((string)(inValues[3]));
            string keyValue = ((string)(inValues[4]));
            easyDMSTool.Doc4SOAP.FieldData[] fields = ((easyDMSTool.Doc4SOAP.FieldData[])(inValues[5]));
            easyDMSTool.Doc4SOAP.DocUploadData[] addDocs = ((easyDMSTool.Doc4SOAP.DocUploadData[])(inValues[6]));
            return this.BegineditFile(sessionID, fileId, fileType, keyField, keyValue, fields, addDocs, callback, asyncState);
        }
        
        private object[] OnEndeditFile(System.IAsyncResult result) {
            string newId = this.GetDefaultValueForInitialization<string>();
            string retVal = this.EndeditFile(result, out newId);
            return new object[] {
                    newId,
                    retVal};
        }
        
        private void OneditFileCompleted(object state) {
            if ((this.editFileCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.editFileCompleted(this, new editFileCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void editFileAsync(string sessionID, string fileId, string fileType, string keyField, string keyValue, easyDMSTool.Doc4SOAP.FieldData[] fields, easyDMSTool.Doc4SOAP.DocUploadData[] addDocs) {
            this.editFileAsync(sessionID, fileId, fileType, keyField, keyValue, fields, addDocs, null);
        }
        
        public void editFileAsync(string sessionID, string fileId, string fileType, string keyField, string keyValue, easyDMSTool.Doc4SOAP.FieldData[] fields, easyDMSTool.Doc4SOAP.DocUploadData[] addDocs, object userState) {
            if ((this.onBegineditFileDelegate == null)) {
                this.onBegineditFileDelegate = new BeginOperationDelegate(this.OnBegineditFile);
            }
            if ((this.onEndeditFileDelegate == null)) {
                this.onEndeditFileDelegate = new EndOperationDelegate(this.OnEndeditFile);
            }
            if ((this.oneditFileCompletedDelegate == null)) {
                this.oneditFileCompletedDelegate = new System.Threading.SendOrPostCallback(this.OneditFileCompleted);
            }
            base.InvokeAsync(this.onBegineditFileDelegate, new object[] {
                        sessionID,
                        fileId,
                        fileType,
                        keyField,
                        keyValue,
                        fields,
                        addDocs}, this.onEndeditFileDelegate, this.oneditFileCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        easyDMSTool.Doc4SOAP.createFileResponse easyDMSTool.Doc4SOAP.DOCUMENTSPortType.createFile(easyDMSTool.Doc4SOAP.createFileRequest request) {
            return base.Channel.createFile(request);
        }
        
        public string createFile(ref string sessionID, string fileType, easyDMSTool.Doc4SOAP.FieldData[] fields, easyDMSTool.Doc4SOAP.DocUploadData[] addDocs) {
            easyDMSTool.Doc4SOAP.createFileRequest inValue = new easyDMSTool.Doc4SOAP.createFileRequest();
            inValue.sessionID = sessionID;
            inValue.fileType = fileType;
            inValue.fields = fields;
            inValue.addDocs = addDocs;
            easyDMSTool.Doc4SOAP.createFileResponse retVal = ((easyDMSTool.Doc4SOAP.DOCUMENTSPortType)(this)).createFile(inValue);
            sessionID = retVal.sessionID;
            return retVal.fileId;
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult easyDMSTool.Doc4SOAP.DOCUMENTSPortType.BegincreateFile(easyDMSTool.Doc4SOAP.createFileRequest request, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BegincreateFile(request, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BegincreateFile(string sessionID, string fileType, easyDMSTool.Doc4SOAP.FieldData[] fields, easyDMSTool.Doc4SOAP.DocUploadData[] addDocs, System.AsyncCallback callback, object asyncState) {
            easyDMSTool.Doc4SOAP.createFileRequest inValue = new easyDMSTool.Doc4SOAP.createFileRequest();
            inValue.sessionID = sessionID;
            inValue.fileType = fileType;
            inValue.fields = fields;
            inValue.addDocs = addDocs;
            return ((easyDMSTool.Doc4SOAP.DOCUMENTSPortType)(this)).BegincreateFile(inValue, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        easyDMSTool.Doc4SOAP.createFileResponse easyDMSTool.Doc4SOAP.DOCUMENTSPortType.EndcreateFile(System.IAsyncResult result) {
            return base.Channel.EndcreateFile(result);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public string EndcreateFile(System.IAsyncResult result, out string fileId) {
            easyDMSTool.Doc4SOAP.createFileResponse retVal = ((easyDMSTool.Doc4SOAP.DOCUMENTSPortType)(this)).EndcreateFile(result);
            fileId = retVal.fileId;
            return retVal.sessionID;
        }
        
        private System.IAsyncResult OnBegincreateFile(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string sessionID = ((string)(inValues[0]));
            string fileType = ((string)(inValues[1]));
            easyDMSTool.Doc4SOAP.FieldData[] fields = ((easyDMSTool.Doc4SOAP.FieldData[])(inValues[2]));
            easyDMSTool.Doc4SOAP.DocUploadData[] addDocs = ((easyDMSTool.Doc4SOAP.DocUploadData[])(inValues[3]));
            return this.BegincreateFile(sessionID, fileType, fields, addDocs, callback, asyncState);
        }
        
        private object[] OnEndcreateFile(System.IAsyncResult result) {
            string fileId = this.GetDefaultValueForInitialization<string>();
            string retVal = this.EndcreateFile(result, out fileId);
            return new object[] {
                    fileId,
                    retVal};
        }
        
        private void OncreateFileCompleted(object state) {
            if ((this.createFileCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.createFileCompleted(this, new createFileCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void createFileAsync(string sessionID, string fileType, easyDMSTool.Doc4SOAP.FieldData[] fields, easyDMSTool.Doc4SOAP.DocUploadData[] addDocs) {
            this.createFileAsync(sessionID, fileType, fields, addDocs, null);
        }
        
        public void createFileAsync(string sessionID, string fileType, easyDMSTool.Doc4SOAP.FieldData[] fields, easyDMSTool.Doc4SOAP.DocUploadData[] addDocs, object userState) {
            if ((this.onBegincreateFileDelegate == null)) {
                this.onBegincreateFileDelegate = new BeginOperationDelegate(this.OnBegincreateFile);
            }
            if ((this.onEndcreateFileDelegate == null)) {
                this.onEndcreateFileDelegate = new EndOperationDelegate(this.OnEndcreateFile);
            }
            if ((this.oncreateFileCompletedDelegate == null)) {
                this.oncreateFileCompletedDelegate = new System.Threading.SendOrPostCallback(this.OncreateFileCompleted);
            }
            base.InvokeAsync(this.onBegincreateFileDelegate, new object[] {
                        sessionID,
                        fileType,
                        fields,
                        addDocs}, this.onEndcreateFileDelegate, this.oncreateFileCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        easyDMSTool.Doc4SOAP.createFile2Response easyDMSTool.Doc4SOAP.DOCUMENTSPortType.createFile2(easyDMSTool.Doc4SOAP.createFile2Request request) {
            return base.Channel.createFile2(request);
        }
        
        public string createFile2(ref string sessionID, string fileType, bool directEAS, easyDMSTool.Doc4SOAP.FieldData[] fields, easyDMSTool.Doc4SOAP.DocUploadData[] addDocs) {
            easyDMSTool.Doc4SOAP.createFile2Request inValue = new easyDMSTool.Doc4SOAP.createFile2Request();
            inValue.sessionID = sessionID;
            inValue.fileType = fileType;
            inValue.directEAS = directEAS;
            inValue.fields = fields;
            inValue.addDocs = addDocs;
            easyDMSTool.Doc4SOAP.createFile2Response retVal = ((easyDMSTool.Doc4SOAP.DOCUMENTSPortType)(this)).createFile2(inValue);
            sessionID = retVal.sessionID;
            return retVal.fileId;
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult easyDMSTool.Doc4SOAP.DOCUMENTSPortType.BegincreateFile2(easyDMSTool.Doc4SOAP.createFile2Request request, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BegincreateFile2(request, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BegincreateFile2(string sessionID, string fileType, bool directEAS, easyDMSTool.Doc4SOAP.FieldData[] fields, easyDMSTool.Doc4SOAP.DocUploadData[] addDocs, System.AsyncCallback callback, object asyncState) {
            easyDMSTool.Doc4SOAP.createFile2Request inValue = new easyDMSTool.Doc4SOAP.createFile2Request();
            inValue.sessionID = sessionID;
            inValue.fileType = fileType;
            inValue.directEAS = directEAS;
            inValue.fields = fields;
            inValue.addDocs = addDocs;
            return ((easyDMSTool.Doc4SOAP.DOCUMENTSPortType)(this)).BegincreateFile2(inValue, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        easyDMSTool.Doc4SOAP.createFile2Response easyDMSTool.Doc4SOAP.DOCUMENTSPortType.EndcreateFile2(System.IAsyncResult result) {
            return base.Channel.EndcreateFile2(result);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public string EndcreateFile2(System.IAsyncResult result, out string fileId) {
            easyDMSTool.Doc4SOAP.createFile2Response retVal = ((easyDMSTool.Doc4SOAP.DOCUMENTSPortType)(this)).EndcreateFile2(result);
            fileId = retVal.fileId;
            return retVal.sessionID;
        }
        
        private System.IAsyncResult OnBegincreateFile2(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string sessionID = ((string)(inValues[0]));
            string fileType = ((string)(inValues[1]));
            bool directEAS = ((bool)(inValues[2]));
            easyDMSTool.Doc4SOAP.FieldData[] fields = ((easyDMSTool.Doc4SOAP.FieldData[])(inValues[3]));
            easyDMSTool.Doc4SOAP.DocUploadData[] addDocs = ((easyDMSTool.Doc4SOAP.DocUploadData[])(inValues[4]));
            return this.BegincreateFile2(sessionID, fileType, directEAS, fields, addDocs, callback, asyncState);
        }
        
        private object[] OnEndcreateFile2(System.IAsyncResult result) {
            string fileId = this.GetDefaultValueForInitialization<string>();
            string retVal = this.EndcreateFile2(result, out fileId);
            return new object[] {
                    fileId,
                    retVal};
        }
        
        private void OncreateFile2Completed(object state) {
            if ((this.createFile2Completed != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.createFile2Completed(this, new createFile2CompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void createFile2Async(string sessionID, string fileType, bool directEAS, easyDMSTool.Doc4SOAP.FieldData[] fields, easyDMSTool.Doc4SOAP.DocUploadData[] addDocs) {
            this.createFile2Async(sessionID, fileType, directEAS, fields, addDocs, null);
        }
        
        public void createFile2Async(string sessionID, string fileType, bool directEAS, easyDMSTool.Doc4SOAP.FieldData[] fields, easyDMSTool.Doc4SOAP.DocUploadData[] addDocs, object userState) {
            if ((this.onBegincreateFile2Delegate == null)) {
                this.onBegincreateFile2Delegate = new BeginOperationDelegate(this.OnBegincreateFile2);
            }
            if ((this.onEndcreateFile2Delegate == null)) {
                this.onEndcreateFile2Delegate = new EndOperationDelegate(this.OnEndcreateFile2);
            }
            if ((this.oncreateFile2CompletedDelegate == null)) {
                this.oncreateFile2CompletedDelegate = new System.Threading.SendOrPostCallback(this.OncreateFile2Completed);
            }
            base.InvokeAsync(this.onBegincreateFile2Delegate, new object[] {
                        sessionID,
                        fileType,
                        directEAS,
                        fields,
                        addDocs}, this.onEndcreateFile2Delegate, this.oncreateFile2CompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        easyDMSTool.Doc4SOAP.getFileTypesResponse easyDMSTool.Doc4SOAP.DOCUMENTSPortType.getFileTypes(easyDMSTool.Doc4SOAP.getFileTypesRequest request) {
            return base.Channel.getFileTypes(request);
        }
        
        public easyDMSTool.Doc4SOAP.FileTypeShortDescr[] getFileTypes(ref string sessionID, bool ignoreRight) {
            easyDMSTool.Doc4SOAP.getFileTypesRequest inValue = new easyDMSTool.Doc4SOAP.getFileTypesRequest();
            inValue.sessionID = sessionID;
            inValue.ignoreRight = ignoreRight;
            easyDMSTool.Doc4SOAP.getFileTypesResponse retVal = ((easyDMSTool.Doc4SOAP.DOCUMENTSPortType)(this)).getFileTypes(inValue);
            sessionID = retVal.sessionID;
            return retVal.filetype;
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult easyDMSTool.Doc4SOAP.DOCUMENTSPortType.BegingetFileTypes(easyDMSTool.Doc4SOAP.getFileTypesRequest request, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BegingetFileTypes(request, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BegingetFileTypes(string sessionID, bool ignoreRight, System.AsyncCallback callback, object asyncState) {
            easyDMSTool.Doc4SOAP.getFileTypesRequest inValue = new easyDMSTool.Doc4SOAP.getFileTypesRequest();
            inValue.sessionID = sessionID;
            inValue.ignoreRight = ignoreRight;
            return ((easyDMSTool.Doc4SOAP.DOCUMENTSPortType)(this)).BegingetFileTypes(inValue, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        easyDMSTool.Doc4SOAP.getFileTypesResponse easyDMSTool.Doc4SOAP.DOCUMENTSPortType.EndgetFileTypes(System.IAsyncResult result) {
            return base.Channel.EndgetFileTypes(result);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public string EndgetFileTypes(System.IAsyncResult result, out easyDMSTool.Doc4SOAP.FileTypeShortDescr[] filetype) {
            easyDMSTool.Doc4SOAP.getFileTypesResponse retVal = ((easyDMSTool.Doc4SOAP.DOCUMENTSPortType)(this)).EndgetFileTypes(result);
            filetype = retVal.filetype;
            return retVal.sessionID;
        }
        
        private System.IAsyncResult OnBegingetFileTypes(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string sessionID = ((string)(inValues[0]));
            bool ignoreRight = ((bool)(inValues[1]));
            return this.BegingetFileTypes(sessionID, ignoreRight, callback, asyncState);
        }
        
        private object[] OnEndgetFileTypes(System.IAsyncResult result) {
            easyDMSTool.Doc4SOAP.FileTypeShortDescr[] filetype = this.GetDefaultValueForInitialization<easyDMSTool.Doc4SOAP.FileTypeShortDescr[]>();
            string retVal = this.EndgetFileTypes(result, out filetype);
            return new object[] {
                    filetype,
                    retVal};
        }
        
        private void OngetFileTypesCompleted(object state) {
            if ((this.getFileTypesCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.getFileTypesCompleted(this, new getFileTypesCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void getFileTypesAsync(string sessionID, bool ignoreRight) {
            this.getFileTypesAsync(sessionID, ignoreRight, null);
        }
        
        public void getFileTypesAsync(string sessionID, bool ignoreRight, object userState) {
            if ((this.onBegingetFileTypesDelegate == null)) {
                this.onBegingetFileTypesDelegate = new BeginOperationDelegate(this.OnBegingetFileTypes);
            }
            if ((this.onEndgetFileTypesDelegate == null)) {
                this.onEndgetFileTypesDelegate = new EndOperationDelegate(this.OnEndgetFileTypes);
            }
            if ((this.ongetFileTypesCompletedDelegate == null)) {
                this.ongetFileTypesCompletedDelegate = new System.Threading.SendOrPostCallback(this.OngetFileTypesCompleted);
            }
            base.InvokeAsync(this.onBegingetFileTypesDelegate, new object[] {
                        sessionID,
                        ignoreRight}, this.onEndgetFileTypesDelegate, this.ongetFileTypesCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        easyDMSTool.Doc4SOAP.describeFileTypeResponse easyDMSTool.Doc4SOAP.DOCUMENTSPortType.describeFileType(easyDMSTool.Doc4SOAP.describeFileTypeRequest request) {
            return base.Channel.describeFileType(request);
        }
        
        public easyDMSTool.Doc4SOAP.FileTypeDescription describeFileType(ref string sessionID, string name, string id, string categories) {
            easyDMSTool.Doc4SOAP.describeFileTypeRequest inValue = new easyDMSTool.Doc4SOAP.describeFileTypeRequest();
            inValue.sessionID = sessionID;
            inValue.name = name;
            inValue.id = id;
            inValue.categories = categories;
            easyDMSTool.Doc4SOAP.describeFileTypeResponse retVal = ((easyDMSTool.Doc4SOAP.DOCUMENTSPortType)(this)).describeFileType(inValue);
            sessionID = retVal.sessionID;
            return retVal.description;
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult easyDMSTool.Doc4SOAP.DOCUMENTSPortType.BegindescribeFileType(easyDMSTool.Doc4SOAP.describeFileTypeRequest request, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BegindescribeFileType(request, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BegindescribeFileType(string sessionID, string name, string id, string categories, System.AsyncCallback callback, object asyncState) {
            easyDMSTool.Doc4SOAP.describeFileTypeRequest inValue = new easyDMSTool.Doc4SOAP.describeFileTypeRequest();
            inValue.sessionID = sessionID;
            inValue.name = name;
            inValue.id = id;
            inValue.categories = categories;
            return ((easyDMSTool.Doc4SOAP.DOCUMENTSPortType)(this)).BegindescribeFileType(inValue, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        easyDMSTool.Doc4SOAP.describeFileTypeResponse easyDMSTool.Doc4SOAP.DOCUMENTSPortType.EnddescribeFileType(System.IAsyncResult result) {
            return base.Channel.EnddescribeFileType(result);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public string EnddescribeFileType(System.IAsyncResult result, out easyDMSTool.Doc4SOAP.FileTypeDescription description) {
            easyDMSTool.Doc4SOAP.describeFileTypeResponse retVal = ((easyDMSTool.Doc4SOAP.DOCUMENTSPortType)(this)).EnddescribeFileType(result);
            description = retVal.description;
            return retVal.sessionID;
        }
        
        private System.IAsyncResult OnBegindescribeFileType(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string sessionID = ((string)(inValues[0]));
            string name = ((string)(inValues[1]));
            string id = ((string)(inValues[2]));
            string categories = ((string)(inValues[3]));
            return this.BegindescribeFileType(sessionID, name, id, categories, callback, asyncState);
        }
        
        private object[] OnEnddescribeFileType(System.IAsyncResult result) {
            easyDMSTool.Doc4SOAP.FileTypeDescription description = this.GetDefaultValueForInitialization<easyDMSTool.Doc4SOAP.FileTypeDescription>();
            string retVal = this.EnddescribeFileType(result, out description);
            return new object[] {
                    description,
                    retVal};
        }
        
        private void OndescribeFileTypeCompleted(object state) {
            if ((this.describeFileTypeCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.describeFileTypeCompleted(this, new describeFileTypeCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void describeFileTypeAsync(string sessionID, string name, string id, string categories) {
            this.describeFileTypeAsync(sessionID, name, id, categories, null);
        }
        
        public void describeFileTypeAsync(string sessionID, string name, string id, string categories, object userState) {
            if ((this.onBegindescribeFileTypeDelegate == null)) {
                this.onBegindescribeFileTypeDelegate = new BeginOperationDelegate(this.OnBegindescribeFileType);
            }
            if ((this.onEnddescribeFileTypeDelegate == null)) {
                this.onEnddescribeFileTypeDelegate = new EndOperationDelegate(this.OnEnddescribeFileType);
            }
            if ((this.ondescribeFileTypeCompletedDelegate == null)) {
                this.ondescribeFileTypeCompletedDelegate = new System.Threading.SendOrPostCallback(this.OndescribeFileTypeCompleted);
            }
            base.InvokeAsync(this.onBegindescribeFileTypeDelegate, new object[] {
                        sessionID,
                        name,
                        id,
                        categories}, this.onEnddescribeFileTypeDelegate, this.ondescribeFileTypeCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        easyDMSTool.Doc4SOAP.describeFileType2Response easyDMSTool.Doc4SOAP.DOCUMENTSPortType.describeFileType2(easyDMSTool.Doc4SOAP.describeFileType2Request request) {
            return base.Channel.describeFileType2(request);
        }
        
        public easyDMSTool.Doc4SOAP.FileTypeDescription2 describeFileType2(ref string sessionID, string name, string id, string categories) {
            easyDMSTool.Doc4SOAP.describeFileType2Request inValue = new easyDMSTool.Doc4SOAP.describeFileType2Request();
            inValue.sessionID = sessionID;
            inValue.name = name;
            inValue.id = id;
            inValue.categories = categories;
            easyDMSTool.Doc4SOAP.describeFileType2Response retVal = ((easyDMSTool.Doc4SOAP.DOCUMENTSPortType)(this)).describeFileType2(inValue);
            sessionID = retVal.sessionID;
            return retVal.description;
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult easyDMSTool.Doc4SOAP.DOCUMENTSPortType.BegindescribeFileType2(easyDMSTool.Doc4SOAP.describeFileType2Request request, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BegindescribeFileType2(request, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BegindescribeFileType2(string sessionID, string name, string id, string categories, System.AsyncCallback callback, object asyncState) {
            easyDMSTool.Doc4SOAP.describeFileType2Request inValue = new easyDMSTool.Doc4SOAP.describeFileType2Request();
            inValue.sessionID = sessionID;
            inValue.name = name;
            inValue.id = id;
            inValue.categories = categories;
            return ((easyDMSTool.Doc4SOAP.DOCUMENTSPortType)(this)).BegindescribeFileType2(inValue, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        easyDMSTool.Doc4SOAP.describeFileType2Response easyDMSTool.Doc4SOAP.DOCUMENTSPortType.EnddescribeFileType2(System.IAsyncResult result) {
            return base.Channel.EnddescribeFileType2(result);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public string EnddescribeFileType2(System.IAsyncResult result, out easyDMSTool.Doc4SOAP.FileTypeDescription2 description) {
            easyDMSTool.Doc4SOAP.describeFileType2Response retVal = ((easyDMSTool.Doc4SOAP.DOCUMENTSPortType)(this)).EnddescribeFileType2(result);
            description = retVal.description;
            return retVal.sessionID;
        }
        
        private System.IAsyncResult OnBegindescribeFileType2(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string sessionID = ((string)(inValues[0]));
            string name = ((string)(inValues[1]));
            string id = ((string)(inValues[2]));
            string categories = ((string)(inValues[3]));
            return this.BegindescribeFileType2(sessionID, name, id, categories, callback, asyncState);
        }
        
        private object[] OnEnddescribeFileType2(System.IAsyncResult result) {
            easyDMSTool.Doc4SOAP.FileTypeDescription2 description = this.GetDefaultValueForInitialization<easyDMSTool.Doc4SOAP.FileTypeDescription2>();
            string retVal = this.EnddescribeFileType2(result, out description);
            return new object[] {
                    description,
                    retVal};
        }
        
        private void OndescribeFileType2Completed(object state) {
            if ((this.describeFileType2Completed != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.describeFileType2Completed(this, new describeFileType2CompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void describeFileType2Async(string sessionID, string name, string id, string categories) {
            this.describeFileType2Async(sessionID, name, id, categories, null);
        }
        
        public void describeFileType2Async(string sessionID, string name, string id, string categories, object userState) {
            if ((this.onBegindescribeFileType2Delegate == null)) {
                this.onBegindescribeFileType2Delegate = new BeginOperationDelegate(this.OnBegindescribeFileType2);
            }
            if ((this.onEnddescribeFileType2Delegate == null)) {
                this.onEnddescribeFileType2Delegate = new EndOperationDelegate(this.OnEnddescribeFileType2);
            }
            if ((this.ondescribeFileType2CompletedDelegate == null)) {
                this.ondescribeFileType2CompletedDelegate = new System.Threading.SendOrPostCallback(this.OndescribeFileType2Completed);
            }
            base.InvokeAsync(this.onBegindescribeFileType2Delegate, new object[] {
                        sessionID,
                        name,
                        id,
                        categories}, this.onEnddescribeFileType2Delegate, this.ondescribeFileType2CompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        easyDMSTool.Doc4SOAP.browseFolderResponse easyDMSTool.Doc4SOAP.DOCUMENTSPortType.browseFolder(easyDMSTool.Doc4SOAP.browseFolderRequest request) {
            return base.Channel.browseFolder(request);
        }
        
        public string browseFolder(ref string sessionID, string folderName, string folderId, string folderType, int startindex, System.Nullable<int> count, bool preview, out string[] fieldNames, out easyDMSTool.Doc4SOAP.FolderFile[] files, out int previousIndex, out int nextIndex) {
            easyDMSTool.Doc4SOAP.browseFolderRequest inValue = new easyDMSTool.Doc4SOAP.browseFolderRequest();
            inValue.sessionID = sessionID;
            inValue.folderName = folderName;
            inValue.folderId = folderId;
            inValue.folderType = folderType;
            inValue.startindex = startindex;
            inValue.count = count;
            inValue.preview = preview;
            easyDMSTool.Doc4SOAP.browseFolderResponse retVal = ((easyDMSTool.Doc4SOAP.DOCUMENTSPortType)(this)).browseFolder(inValue);
            sessionID = retVal.sessionID;
            fieldNames = retVal.fieldNames;
            files = retVal.files;
            previousIndex = retVal.previousIndex;
            nextIndex = retVal.nextIndex;
            return retVal.headline;
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult easyDMSTool.Doc4SOAP.DOCUMENTSPortType.BeginbrowseFolder(easyDMSTool.Doc4SOAP.browseFolderRequest request, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginbrowseFolder(request, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginbrowseFolder(string sessionID, string folderName, string folderId, string folderType, int startindex, System.Nullable<int> count, bool preview, System.AsyncCallback callback, object asyncState) {
            easyDMSTool.Doc4SOAP.browseFolderRequest inValue = new easyDMSTool.Doc4SOAP.browseFolderRequest();
            inValue.sessionID = sessionID;
            inValue.folderName = folderName;
            inValue.folderId = folderId;
            inValue.folderType = folderType;
            inValue.startindex = startindex;
            inValue.count = count;
            inValue.preview = preview;
            return ((easyDMSTool.Doc4SOAP.DOCUMENTSPortType)(this)).BeginbrowseFolder(inValue, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        easyDMSTool.Doc4SOAP.browseFolderResponse easyDMSTool.Doc4SOAP.DOCUMENTSPortType.EndbrowseFolder(System.IAsyncResult result) {
            return base.Channel.EndbrowseFolder(result);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public string EndbrowseFolder(System.IAsyncResult result, out string headline, out string[] fieldNames, out easyDMSTool.Doc4SOAP.FolderFile[] files, out int previousIndex, out int nextIndex) {
            easyDMSTool.Doc4SOAP.browseFolderResponse retVal = ((easyDMSTool.Doc4SOAP.DOCUMENTSPortType)(this)).EndbrowseFolder(result);
            headline = retVal.headline;
            fieldNames = retVal.fieldNames;
            files = retVal.files;
            previousIndex = retVal.previousIndex;
            nextIndex = retVal.nextIndex;
            return retVal.sessionID;
        }
        
        private System.IAsyncResult OnBeginbrowseFolder(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string sessionID = ((string)(inValues[0]));
            string folderName = ((string)(inValues[1]));
            string folderId = ((string)(inValues[2]));
            string folderType = ((string)(inValues[3]));
            int startindex = ((int)(inValues[4]));
            System.Nullable<int> count = ((System.Nullable<int>)(inValues[5]));
            bool preview = ((bool)(inValues[6]));
            return this.BeginbrowseFolder(sessionID, folderName, folderId, folderType, startindex, count, preview, callback, asyncState);
        }
        
        private object[] OnEndbrowseFolder(System.IAsyncResult result) {
            string headline = this.GetDefaultValueForInitialization<string>();
            string[] fieldNames = this.GetDefaultValueForInitialization<string[]>();
            easyDMSTool.Doc4SOAP.FolderFile[] files = this.GetDefaultValueForInitialization<easyDMSTool.Doc4SOAP.FolderFile[]>();
            int previousIndex = this.GetDefaultValueForInitialization<int>();
            int nextIndex = this.GetDefaultValueForInitialization<int>();
            string retVal = this.EndbrowseFolder(result, out headline, out fieldNames, out files, out previousIndex, out nextIndex);
            return new object[] {
                    headline,
                    fieldNames,
                    files,
                    previousIndex,
                    nextIndex,
                    retVal};
        }
        
        private void OnbrowseFolderCompleted(object state) {
            if ((this.browseFolderCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.browseFolderCompleted(this, new browseFolderCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void browseFolderAsync(string sessionID, string folderName, string folderId, string folderType, int startindex, System.Nullable<int> count, bool preview) {
            this.browseFolderAsync(sessionID, folderName, folderId, folderType, startindex, count, preview, null);
        }
        
        public void browseFolderAsync(string sessionID, string folderName, string folderId, string folderType, int startindex, System.Nullable<int> count, bool preview, object userState) {
            if ((this.onBeginbrowseFolderDelegate == null)) {
                this.onBeginbrowseFolderDelegate = new BeginOperationDelegate(this.OnBeginbrowseFolder);
            }
            if ((this.onEndbrowseFolderDelegate == null)) {
                this.onEndbrowseFolderDelegate = new EndOperationDelegate(this.OnEndbrowseFolder);
            }
            if ((this.onbrowseFolderCompletedDelegate == null)) {
                this.onbrowseFolderCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnbrowseFolderCompleted);
            }
            base.InvokeAsync(this.onBeginbrowseFolderDelegate, new object[] {
                        sessionID,
                        folderName,
                        folderId,
                        folderType,
                        startindex,
                        count,
                        preview}, this.onEndbrowseFolderDelegate, this.onbrowseFolderCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        easyDMSTool.Doc4SOAP.getFolderStructureResponse easyDMSTool.Doc4SOAP.DOCUMENTSPortType.getFolderStructure(easyDMSTool.Doc4SOAP.getFolderStructureRequest request) {
            return base.Channel.getFolderStructure(request);
        }
        
        public easyDMSTool.Doc4SOAP.FolderDescription getFolderStructure(ref string sessionID, string folderType) {
            easyDMSTool.Doc4SOAP.getFolderStructureRequest inValue = new easyDMSTool.Doc4SOAP.getFolderStructureRequest();
            inValue.sessionID = sessionID;
            inValue.folderType = folderType;
            easyDMSTool.Doc4SOAP.getFolderStructureResponse retVal = ((easyDMSTool.Doc4SOAP.DOCUMENTSPortType)(this)).getFolderStructure(inValue);
            sessionID = retVal.sessionID;
            return retVal.baseFolder;
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult easyDMSTool.Doc4SOAP.DOCUMENTSPortType.BegingetFolderStructure(easyDMSTool.Doc4SOAP.getFolderStructureRequest request, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BegingetFolderStructure(request, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BegingetFolderStructure(string sessionID, string folderType, System.AsyncCallback callback, object asyncState) {
            easyDMSTool.Doc4SOAP.getFolderStructureRequest inValue = new easyDMSTool.Doc4SOAP.getFolderStructureRequest();
            inValue.sessionID = sessionID;
            inValue.folderType = folderType;
            return ((easyDMSTool.Doc4SOAP.DOCUMENTSPortType)(this)).BegingetFolderStructure(inValue, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        easyDMSTool.Doc4SOAP.getFolderStructureResponse easyDMSTool.Doc4SOAP.DOCUMENTSPortType.EndgetFolderStructure(System.IAsyncResult result) {
            return base.Channel.EndgetFolderStructure(result);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public string EndgetFolderStructure(System.IAsyncResult result, out easyDMSTool.Doc4SOAP.FolderDescription baseFolder) {
            easyDMSTool.Doc4SOAP.getFolderStructureResponse retVal = ((easyDMSTool.Doc4SOAP.DOCUMENTSPortType)(this)).EndgetFolderStructure(result);
            baseFolder = retVal.baseFolder;
            return retVal.sessionID;
        }
        
        private System.IAsyncResult OnBegingetFolderStructure(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string sessionID = ((string)(inValues[0]));
            string folderType = ((string)(inValues[1]));
            return this.BegingetFolderStructure(sessionID, folderType, callback, asyncState);
        }
        
        private object[] OnEndgetFolderStructure(System.IAsyncResult result) {
            easyDMSTool.Doc4SOAP.FolderDescription baseFolder = this.GetDefaultValueForInitialization<easyDMSTool.Doc4SOAP.FolderDescription>();
            string retVal = this.EndgetFolderStructure(result, out baseFolder);
            return new object[] {
                    baseFolder,
                    retVal};
        }
        
        private void OngetFolderStructureCompleted(object state) {
            if ((this.getFolderStructureCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.getFolderStructureCompleted(this, new getFolderStructureCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void getFolderStructureAsync(string sessionID, string folderType) {
            this.getFolderStructureAsync(sessionID, folderType, null);
        }
        
        public void getFolderStructureAsync(string sessionID, string folderType, object userState) {
            if ((this.onBegingetFolderStructureDelegate == null)) {
                this.onBegingetFolderStructureDelegate = new BeginOperationDelegate(this.OnBegingetFolderStructure);
            }
            if ((this.onEndgetFolderStructureDelegate == null)) {
                this.onEndgetFolderStructureDelegate = new EndOperationDelegate(this.OnEndgetFolderStructure);
            }
            if ((this.ongetFolderStructureCompletedDelegate == null)) {
                this.ongetFolderStructureCompletedDelegate = new System.Threading.SendOrPostCallback(this.OngetFolderStructureCompleted);
            }
            base.InvokeAsync(this.onBegingetFolderStructureDelegate, new object[] {
                        sessionID,
                        folderType}, this.onEndgetFolderStructureDelegate, this.ongetFolderStructureCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        easyDMSTool.Doc4SOAP.runScriptResponse easyDMSTool.Doc4SOAP.DOCUMENTSPortType.runScript(easyDMSTool.Doc4SOAP.runScriptRequest request) {
            return base.Channel.runScript(request);
        }
        
        public int runScript(ref string sessionID, string fileId, string name, string[] paramList, out string errorMsg, out string returnValue) {
            easyDMSTool.Doc4SOAP.runScriptRequest inValue = new easyDMSTool.Doc4SOAP.runScriptRequest();
            inValue.sessionID = sessionID;
            inValue.fileId = fileId;
            inValue.name = name;
            inValue.paramList = paramList;
            easyDMSTool.Doc4SOAP.runScriptResponse retVal = ((easyDMSTool.Doc4SOAP.DOCUMENTSPortType)(this)).runScript(inValue);
            sessionID = retVal.sessionID;
            errorMsg = retVal.errorMsg;
            returnValue = retVal.returnValue;
            return retVal.returnStatus;
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult easyDMSTool.Doc4SOAP.DOCUMENTSPortType.BeginrunScript(easyDMSTool.Doc4SOAP.runScriptRequest request, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginrunScript(request, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginrunScript(string sessionID, string fileId, string name, string[] paramList, System.AsyncCallback callback, object asyncState) {
            easyDMSTool.Doc4SOAP.runScriptRequest inValue = new easyDMSTool.Doc4SOAP.runScriptRequest();
            inValue.sessionID = sessionID;
            inValue.fileId = fileId;
            inValue.name = name;
            inValue.paramList = paramList;
            return ((easyDMSTool.Doc4SOAP.DOCUMENTSPortType)(this)).BeginrunScript(inValue, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        easyDMSTool.Doc4SOAP.runScriptResponse easyDMSTool.Doc4SOAP.DOCUMENTSPortType.EndrunScript(System.IAsyncResult result) {
            return base.Channel.EndrunScript(result);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public string EndrunScript(System.IAsyncResult result, out int returnStatus, out string errorMsg, out string returnValue) {
            easyDMSTool.Doc4SOAP.runScriptResponse retVal = ((easyDMSTool.Doc4SOAP.DOCUMENTSPortType)(this)).EndrunScript(result);
            returnStatus = retVal.returnStatus;
            errorMsg = retVal.errorMsg;
            returnValue = retVal.returnValue;
            return retVal.sessionID;
        }
        
        private System.IAsyncResult OnBeginrunScript(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string sessionID = ((string)(inValues[0]));
            string fileId = ((string)(inValues[1]));
            string name = ((string)(inValues[2]));
            string[] paramList = ((string[])(inValues[3]));
            return this.BeginrunScript(sessionID, fileId, name, paramList, callback, asyncState);
        }
        
        private object[] OnEndrunScript(System.IAsyncResult result) {
            int returnStatus = this.GetDefaultValueForInitialization<int>();
            string errorMsg = this.GetDefaultValueForInitialization<string>();
            string returnValue = this.GetDefaultValueForInitialization<string>();
            string retVal = this.EndrunScript(result, out returnStatus, out errorMsg, out returnValue);
            return new object[] {
                    returnStatus,
                    errorMsg,
                    returnValue,
                    retVal};
        }
        
        private void OnrunScriptCompleted(object state) {
            if ((this.runScriptCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.runScriptCompleted(this, new runScriptCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void runScriptAsync(string sessionID, string fileId, string name, string[] paramList) {
            this.runScriptAsync(sessionID, fileId, name, paramList, null);
        }
        
        public void runScriptAsync(string sessionID, string fileId, string name, string[] paramList, object userState) {
            if ((this.onBeginrunScriptDelegate == null)) {
                this.onBeginrunScriptDelegate = new BeginOperationDelegate(this.OnBeginrunScript);
            }
            if ((this.onEndrunScriptDelegate == null)) {
                this.onEndrunScriptDelegate = new EndOperationDelegate(this.OnEndrunScript);
            }
            if ((this.onrunScriptCompletedDelegate == null)) {
                this.onrunScriptCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnrunScriptCompleted);
            }
            base.InvokeAsync(this.onBeginrunScriptDelegate, new object[] {
                        sessionID,
                        fileId,
                        name,
                        paramList}, this.onEndrunScriptDelegate, this.onrunScriptCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        easyDMSTool.Doc4SOAP.userInfoResponse easyDMSTool.Doc4SOAP.DOCUMENTSPortType.userInfo(easyDMSTool.Doc4SOAP.userInfoRequest request) {
            return base.Channel.userInfo(request);
        }
        
        public string userInfo(ref string sessionID) {
            easyDMSTool.Doc4SOAP.userInfoRequest inValue = new easyDMSTool.Doc4SOAP.userInfoRequest();
            inValue.sessionID = sessionID;
            easyDMSTool.Doc4SOAP.userInfoResponse retVal = ((easyDMSTool.Doc4SOAP.DOCUMENTSPortType)(this)).userInfo(inValue);
            sessionID = retVal.sessionID;
            return retVal.name;
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult easyDMSTool.Doc4SOAP.DOCUMENTSPortType.BeginuserInfo(easyDMSTool.Doc4SOAP.userInfoRequest request, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginuserInfo(request, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginuserInfo(string sessionID, System.AsyncCallback callback, object asyncState) {
            easyDMSTool.Doc4SOAP.userInfoRequest inValue = new easyDMSTool.Doc4SOAP.userInfoRequest();
            inValue.sessionID = sessionID;
            return ((easyDMSTool.Doc4SOAP.DOCUMENTSPortType)(this)).BeginuserInfo(inValue, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        easyDMSTool.Doc4SOAP.userInfoResponse easyDMSTool.Doc4SOAP.DOCUMENTSPortType.EnduserInfo(System.IAsyncResult result) {
            return base.Channel.EnduserInfo(result);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public string EnduserInfo(System.IAsyncResult result, out string name) {
            easyDMSTool.Doc4SOAP.userInfoResponse retVal = ((easyDMSTool.Doc4SOAP.DOCUMENTSPortType)(this)).EnduserInfo(result);
            name = retVal.name;
            return retVal.sessionID;
        }
        
        private System.IAsyncResult OnBeginuserInfo(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string sessionID = ((string)(inValues[0]));
            return this.BeginuserInfo(sessionID, callback, asyncState);
        }
        
        private object[] OnEnduserInfo(System.IAsyncResult result) {
            string name = this.GetDefaultValueForInitialization<string>();
            string retVal = this.EnduserInfo(result, out name);
            return new object[] {
                    name,
                    retVal};
        }
        
        private void OnuserInfoCompleted(object state) {
            if ((this.userInfoCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.userInfoCompleted(this, new userInfoCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void userInfoAsync(string sessionID) {
            this.userInfoAsync(sessionID, null);
        }
        
        public void userInfoAsync(string sessionID, object userState) {
            if ((this.onBeginuserInfoDelegate == null)) {
                this.onBeginuserInfoDelegate = new BeginOperationDelegate(this.OnBeginuserInfo);
            }
            if ((this.onEnduserInfoDelegate == null)) {
                this.onEnduserInfoDelegate = new EndOperationDelegate(this.OnEnduserInfo);
            }
            if ((this.onuserInfoCompletedDelegate == null)) {
                this.onuserInfoCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnuserInfoCompleted);
            }
            base.InvokeAsync(this.onBeginuserInfoDelegate, new object[] {
                        sessionID}, this.onEnduserInfoDelegate, this.onuserInfoCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        easyDMSTool.Doc4SOAP.archiveFilesResponse easyDMSTool.Doc4SOAP.DOCUMENTSPortType.archiveFiles(easyDMSTool.Doc4SOAP.archiveFilesRequest request) {
            return base.Channel.archiveFiles(request);
        }
        
        public easyDMSTool.Doc4SOAP.ArchiveStatus[] archiveFiles(ref string sessionID, string[] fileIds, bool deleteOnSuccess) {
            easyDMSTool.Doc4SOAP.archiveFilesRequest inValue = new easyDMSTool.Doc4SOAP.archiveFilesRequest();
            inValue.sessionID = sessionID;
            inValue.fileIds = fileIds;
            inValue.deleteOnSuccess = deleteOnSuccess;
            easyDMSTool.Doc4SOAP.archiveFilesResponse retVal = ((easyDMSTool.Doc4SOAP.DOCUMENTSPortType)(this)).archiveFiles(inValue);
            sessionID = retVal.sessionID;
            return retVal.statusList;
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult easyDMSTool.Doc4SOAP.DOCUMENTSPortType.BeginarchiveFiles(easyDMSTool.Doc4SOAP.archiveFilesRequest request, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginarchiveFiles(request, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginarchiveFiles(string sessionID, string[] fileIds, bool deleteOnSuccess, System.AsyncCallback callback, object asyncState) {
            easyDMSTool.Doc4SOAP.archiveFilesRequest inValue = new easyDMSTool.Doc4SOAP.archiveFilesRequest();
            inValue.sessionID = sessionID;
            inValue.fileIds = fileIds;
            inValue.deleteOnSuccess = deleteOnSuccess;
            return ((easyDMSTool.Doc4SOAP.DOCUMENTSPortType)(this)).BeginarchiveFiles(inValue, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        easyDMSTool.Doc4SOAP.archiveFilesResponse easyDMSTool.Doc4SOAP.DOCUMENTSPortType.EndarchiveFiles(System.IAsyncResult result) {
            return base.Channel.EndarchiveFiles(result);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public string EndarchiveFiles(System.IAsyncResult result, out easyDMSTool.Doc4SOAP.ArchiveStatus[] statusList) {
            easyDMSTool.Doc4SOAP.archiveFilesResponse retVal = ((easyDMSTool.Doc4SOAP.DOCUMENTSPortType)(this)).EndarchiveFiles(result);
            statusList = retVal.statusList;
            return retVal.sessionID;
        }
        
        private System.IAsyncResult OnBeginarchiveFiles(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string sessionID = ((string)(inValues[0]));
            string[] fileIds = ((string[])(inValues[1]));
            bool deleteOnSuccess = ((bool)(inValues[2]));
            return this.BeginarchiveFiles(sessionID, fileIds, deleteOnSuccess, callback, asyncState);
        }
        
        private object[] OnEndarchiveFiles(System.IAsyncResult result) {
            easyDMSTool.Doc4SOAP.ArchiveStatus[] statusList = this.GetDefaultValueForInitialization<easyDMSTool.Doc4SOAP.ArchiveStatus[]>();
            string retVal = this.EndarchiveFiles(result, out statusList);
            return new object[] {
                    statusList,
                    retVal};
        }
        
        private void OnarchiveFilesCompleted(object state) {
            if ((this.archiveFilesCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.archiveFilesCompleted(this, new archiveFilesCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void archiveFilesAsync(string sessionID, string[] fileIds, bool deleteOnSuccess) {
            this.archiveFilesAsync(sessionID, fileIds, deleteOnSuccess, null);
        }
        
        public void archiveFilesAsync(string sessionID, string[] fileIds, bool deleteOnSuccess, object userState) {
            if ((this.onBeginarchiveFilesDelegate == null)) {
                this.onBeginarchiveFilesDelegate = new BeginOperationDelegate(this.OnBeginarchiveFiles);
            }
            if ((this.onEndarchiveFilesDelegate == null)) {
                this.onEndarchiveFilesDelegate = new EndOperationDelegate(this.OnEndarchiveFiles);
            }
            if ((this.onarchiveFilesCompletedDelegate == null)) {
                this.onarchiveFilesCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnarchiveFilesCompleted);
            }
            base.InvokeAsync(this.onBeginarchiveFilesDelegate, new object[] {
                        sessionID,
                        fileIds,
                        deleteOnSuccess}, this.onEndarchiveFilesDelegate, this.onarchiveFilesCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        easyDMSTool.Doc4SOAP.deleteFilesResponse easyDMSTool.Doc4SOAP.DOCUMENTSPortType.deleteFiles(easyDMSTool.Doc4SOAP.deleteFilesRequest request) {
            return base.Channel.deleteFiles(request);
        }
        
        public easyDMSTool.Doc4SOAP.DeleteStatus[] deleteFiles(ref string sessionID, string[] fileIds) {
            easyDMSTool.Doc4SOAP.deleteFilesRequest inValue = new easyDMSTool.Doc4SOAP.deleteFilesRequest();
            inValue.sessionID = sessionID;
            inValue.fileIds = fileIds;
            easyDMSTool.Doc4SOAP.deleteFilesResponse retVal = ((easyDMSTool.Doc4SOAP.DOCUMENTSPortType)(this)).deleteFiles(inValue);
            sessionID = retVal.sessionID;
            return retVal.statusList;
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult easyDMSTool.Doc4SOAP.DOCUMENTSPortType.BegindeleteFiles(easyDMSTool.Doc4SOAP.deleteFilesRequest request, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BegindeleteFiles(request, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BegindeleteFiles(string sessionID, string[] fileIds, System.AsyncCallback callback, object asyncState) {
            easyDMSTool.Doc4SOAP.deleteFilesRequest inValue = new easyDMSTool.Doc4SOAP.deleteFilesRequest();
            inValue.sessionID = sessionID;
            inValue.fileIds = fileIds;
            return ((easyDMSTool.Doc4SOAP.DOCUMENTSPortType)(this)).BegindeleteFiles(inValue, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        easyDMSTool.Doc4SOAP.deleteFilesResponse easyDMSTool.Doc4SOAP.DOCUMENTSPortType.EnddeleteFiles(System.IAsyncResult result) {
            return base.Channel.EnddeleteFiles(result);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public string EnddeleteFiles(System.IAsyncResult result, out easyDMSTool.Doc4SOAP.DeleteStatus[] statusList) {
            easyDMSTool.Doc4SOAP.deleteFilesResponse retVal = ((easyDMSTool.Doc4SOAP.DOCUMENTSPortType)(this)).EnddeleteFiles(result);
            statusList = retVal.statusList;
            return retVal.sessionID;
        }
        
        private System.IAsyncResult OnBegindeleteFiles(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string sessionID = ((string)(inValues[0]));
            string[] fileIds = ((string[])(inValues[1]));
            return this.BegindeleteFiles(sessionID, fileIds, callback, asyncState);
        }
        
        private object[] OnEnddeleteFiles(System.IAsyncResult result) {
            easyDMSTool.Doc4SOAP.DeleteStatus[] statusList = this.GetDefaultValueForInitialization<easyDMSTool.Doc4SOAP.DeleteStatus[]>();
            string retVal = this.EnddeleteFiles(result, out statusList);
            return new object[] {
                    statusList,
                    retVal};
        }
        
        private void OndeleteFilesCompleted(object state) {
            if ((this.deleteFilesCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.deleteFilesCompleted(this, new deleteFilesCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void deleteFilesAsync(string sessionID, string[] fileIds) {
            this.deleteFilesAsync(sessionID, fileIds, null);
        }
        
        public void deleteFilesAsync(string sessionID, string[] fileIds, object userState) {
            if ((this.onBegindeleteFilesDelegate == null)) {
                this.onBegindeleteFilesDelegate = new BeginOperationDelegate(this.OnBegindeleteFiles);
            }
            if ((this.onEnddeleteFilesDelegate == null)) {
                this.onEnddeleteFilesDelegate = new EndOperationDelegate(this.OnEnddeleteFiles);
            }
            if ((this.ondeleteFilesCompletedDelegate == null)) {
                this.ondeleteFilesCompletedDelegate = new System.Threading.SendOrPostCallback(this.OndeleteFilesCompleted);
            }
            base.InvokeAsync(this.onBegindeleteFilesDelegate, new object[] {
                        sessionID,
                        fileIds}, this.onEnddeleteFilesDelegate, this.ondeleteFilesCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        easyDMSTool.Doc4SOAP.deleteDocumentsResponse easyDMSTool.Doc4SOAP.DOCUMENTSPortType.deleteDocuments(easyDMSTool.Doc4SOAP.deleteDocumentsRequest request) {
            return base.Channel.deleteDocuments(request);
        }
        
        public easyDMSTool.Doc4SOAP.DeleteStatus[] deleteDocuments(ref string sessionID, string fileId, string[] docIds) {
            easyDMSTool.Doc4SOAP.deleteDocumentsRequest inValue = new easyDMSTool.Doc4SOAP.deleteDocumentsRequest();
            inValue.sessionID = sessionID;
            inValue.fileId = fileId;
            inValue.docIds = docIds;
            easyDMSTool.Doc4SOAP.deleteDocumentsResponse retVal = ((easyDMSTool.Doc4SOAP.DOCUMENTSPortType)(this)).deleteDocuments(inValue);
            sessionID = retVal.sessionID;
            return retVal.statusList;
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult easyDMSTool.Doc4SOAP.DOCUMENTSPortType.BegindeleteDocuments(easyDMSTool.Doc4SOAP.deleteDocumentsRequest request, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BegindeleteDocuments(request, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BegindeleteDocuments(string sessionID, string fileId, string[] docIds, System.AsyncCallback callback, object asyncState) {
            easyDMSTool.Doc4SOAP.deleteDocumentsRequest inValue = new easyDMSTool.Doc4SOAP.deleteDocumentsRequest();
            inValue.sessionID = sessionID;
            inValue.fileId = fileId;
            inValue.docIds = docIds;
            return ((easyDMSTool.Doc4SOAP.DOCUMENTSPortType)(this)).BegindeleteDocuments(inValue, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        easyDMSTool.Doc4SOAP.deleteDocumentsResponse easyDMSTool.Doc4SOAP.DOCUMENTSPortType.EnddeleteDocuments(System.IAsyncResult result) {
            return base.Channel.EnddeleteDocuments(result);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public string EnddeleteDocuments(System.IAsyncResult result, out easyDMSTool.Doc4SOAP.DeleteStatus[] statusList) {
            easyDMSTool.Doc4SOAP.deleteDocumentsResponse retVal = ((easyDMSTool.Doc4SOAP.DOCUMENTSPortType)(this)).EnddeleteDocuments(result);
            statusList = retVal.statusList;
            return retVal.sessionID;
        }
        
        private System.IAsyncResult OnBegindeleteDocuments(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string sessionID = ((string)(inValues[0]));
            string fileId = ((string)(inValues[1]));
            string[] docIds = ((string[])(inValues[2]));
            return this.BegindeleteDocuments(sessionID, fileId, docIds, callback, asyncState);
        }
        
        private object[] OnEnddeleteDocuments(System.IAsyncResult result) {
            easyDMSTool.Doc4SOAP.DeleteStatus[] statusList = this.GetDefaultValueForInitialization<easyDMSTool.Doc4SOAP.DeleteStatus[]>();
            string retVal = this.EnddeleteDocuments(result, out statusList);
            return new object[] {
                    statusList,
                    retVal};
        }
        
        private void OndeleteDocumentsCompleted(object state) {
            if ((this.deleteDocumentsCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.deleteDocumentsCompleted(this, new deleteDocumentsCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void deleteDocumentsAsync(string sessionID, string fileId, string[] docIds) {
            this.deleteDocumentsAsync(sessionID, fileId, docIds, null);
        }
        
        public void deleteDocumentsAsync(string sessionID, string fileId, string[] docIds, object userState) {
            if ((this.onBegindeleteDocumentsDelegate == null)) {
                this.onBegindeleteDocumentsDelegate = new BeginOperationDelegate(this.OnBegindeleteDocuments);
            }
            if ((this.onEnddeleteDocumentsDelegate == null)) {
                this.onEnddeleteDocumentsDelegate = new EndOperationDelegate(this.OnEnddeleteDocuments);
            }
            if ((this.ondeleteDocumentsCompletedDelegate == null)) {
                this.ondeleteDocumentsCompletedDelegate = new System.Threading.SendOrPostCallback(this.OndeleteDocumentsCompleted);
            }
            base.InvokeAsync(this.onBegindeleteDocumentsDelegate, new object[] {
                        sessionID,
                        fileId,
                        docIds}, this.onEnddeleteDocumentsDelegate, this.ondeleteDocumentsCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        easyDMSTool.Doc4SOAP.listPossibleActionsResponse easyDMSTool.Doc4SOAP.DOCUMENTSPortType.listPossibleActions(easyDMSTool.Doc4SOAP.listPossibleActionsRequest request) {
            return base.Channel.listPossibleActions(request);
        }
        
        public easyDMSTool.Doc4SOAP.WorkflowAction[] listPossibleActions(ref string sessionID, string fileId) {
            easyDMSTool.Doc4SOAP.listPossibleActionsRequest inValue = new easyDMSTool.Doc4SOAP.listPossibleActionsRequest();
            inValue.sessionID = sessionID;
            inValue.fileId = fileId;
            easyDMSTool.Doc4SOAP.listPossibleActionsResponse retVal = ((easyDMSTool.Doc4SOAP.DOCUMENTSPortType)(this)).listPossibleActions(inValue);
            sessionID = retVal.sessionID;
            return retVal.actions;
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult easyDMSTool.Doc4SOAP.DOCUMENTSPortType.BeginlistPossibleActions(easyDMSTool.Doc4SOAP.listPossibleActionsRequest request, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginlistPossibleActions(request, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginlistPossibleActions(string sessionID, string fileId, System.AsyncCallback callback, object asyncState) {
            easyDMSTool.Doc4SOAP.listPossibleActionsRequest inValue = new easyDMSTool.Doc4SOAP.listPossibleActionsRequest();
            inValue.sessionID = sessionID;
            inValue.fileId = fileId;
            return ((easyDMSTool.Doc4SOAP.DOCUMENTSPortType)(this)).BeginlistPossibleActions(inValue, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        easyDMSTool.Doc4SOAP.listPossibleActionsResponse easyDMSTool.Doc4SOAP.DOCUMENTSPortType.EndlistPossibleActions(System.IAsyncResult result) {
            return base.Channel.EndlistPossibleActions(result);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public string EndlistPossibleActions(System.IAsyncResult result, out easyDMSTool.Doc4SOAP.WorkflowAction[] actions) {
            easyDMSTool.Doc4SOAP.listPossibleActionsResponse retVal = ((easyDMSTool.Doc4SOAP.DOCUMENTSPortType)(this)).EndlistPossibleActions(result);
            actions = retVal.actions;
            return retVal.sessionID;
        }
        
        private System.IAsyncResult OnBeginlistPossibleActions(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string sessionID = ((string)(inValues[0]));
            string fileId = ((string)(inValues[1]));
            return this.BeginlistPossibleActions(sessionID, fileId, callback, asyncState);
        }
        
        private object[] OnEndlistPossibleActions(System.IAsyncResult result) {
            easyDMSTool.Doc4SOAP.WorkflowAction[] actions = this.GetDefaultValueForInitialization<easyDMSTool.Doc4SOAP.WorkflowAction[]>();
            string retVal = this.EndlistPossibleActions(result, out actions);
            return new object[] {
                    actions,
                    retVal};
        }
        
        private void OnlistPossibleActionsCompleted(object state) {
            if ((this.listPossibleActionsCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.listPossibleActionsCompleted(this, new listPossibleActionsCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void listPossibleActionsAsync(string sessionID, string fileId) {
            this.listPossibleActionsAsync(sessionID, fileId, null);
        }
        
        public void listPossibleActionsAsync(string sessionID, string fileId, object userState) {
            if ((this.onBeginlistPossibleActionsDelegate == null)) {
                this.onBeginlistPossibleActionsDelegate = new BeginOperationDelegate(this.OnBeginlistPossibleActions);
            }
            if ((this.onEndlistPossibleActionsDelegate == null)) {
                this.onEndlistPossibleActionsDelegate = new EndOperationDelegate(this.OnEndlistPossibleActions);
            }
            if ((this.onlistPossibleActionsCompletedDelegate == null)) {
                this.onlistPossibleActionsCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnlistPossibleActionsCompleted);
            }
            base.InvokeAsync(this.onBeginlistPossibleActionsDelegate, new object[] {
                        sessionID,
                        fileId}, this.onEndlistPossibleActionsDelegate, this.onlistPossibleActionsCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        easyDMSTool.Doc4SOAP.triggerActionResponse easyDMSTool.Doc4SOAP.DOCUMENTSPortType.triggerAction(easyDMSTool.Doc4SOAP.triggerActionRequest request) {
            return base.Channel.triggerAction(request);
        }
        
        public void triggerAction(ref string sessionID, string fileId, string actionId, string comment) {
            easyDMSTool.Doc4SOAP.triggerActionRequest inValue = new easyDMSTool.Doc4SOAP.triggerActionRequest();
            inValue.sessionID = sessionID;
            inValue.fileId = fileId;
            inValue.actionId = actionId;
            inValue.comment = comment;
            easyDMSTool.Doc4SOAP.triggerActionResponse retVal = ((easyDMSTool.Doc4SOAP.DOCUMENTSPortType)(this)).triggerAction(inValue);
            sessionID = retVal.sessionID;
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult easyDMSTool.Doc4SOAP.DOCUMENTSPortType.BegintriggerAction(easyDMSTool.Doc4SOAP.triggerActionRequest request, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BegintriggerAction(request, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BegintriggerAction(string sessionID, string fileId, string actionId, string comment, System.AsyncCallback callback, object asyncState) {
            easyDMSTool.Doc4SOAP.triggerActionRequest inValue = new easyDMSTool.Doc4SOAP.triggerActionRequest();
            inValue.sessionID = sessionID;
            inValue.fileId = fileId;
            inValue.actionId = actionId;
            inValue.comment = comment;
            return ((easyDMSTool.Doc4SOAP.DOCUMENTSPortType)(this)).BegintriggerAction(inValue, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        easyDMSTool.Doc4SOAP.triggerActionResponse easyDMSTool.Doc4SOAP.DOCUMENTSPortType.EndtriggerAction(System.IAsyncResult result) {
            return base.Channel.EndtriggerAction(result);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public string EndtriggerAction(System.IAsyncResult result) {
            easyDMSTool.Doc4SOAP.triggerActionResponse retVal = ((easyDMSTool.Doc4SOAP.DOCUMENTSPortType)(this)).EndtriggerAction(result);
            return retVal.sessionID;
        }
        
        private System.IAsyncResult OnBegintriggerAction(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string sessionID = ((string)(inValues[0]));
            string fileId = ((string)(inValues[1]));
            string actionId = ((string)(inValues[2]));
            string comment = ((string)(inValues[3]));
            return this.BegintriggerAction(sessionID, fileId, actionId, comment, callback, asyncState);
        }
        
        private object[] OnEndtriggerAction(System.IAsyncResult result) {
            string retVal = this.EndtriggerAction(result);
            return new object[] {
                    retVal};
        }
        
        private void OntriggerActionCompleted(object state) {
            if ((this.triggerActionCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.triggerActionCompleted(this, new triggerActionCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void triggerActionAsync(string sessionID, string fileId, string actionId, string comment) {
            this.triggerActionAsync(sessionID, fileId, actionId, comment, null);
        }
        
        public void triggerActionAsync(string sessionID, string fileId, string actionId, string comment, object userState) {
            if ((this.onBegintriggerActionDelegate == null)) {
                this.onBegintriggerActionDelegate = new BeginOperationDelegate(this.OnBegintriggerAction);
            }
            if ((this.onEndtriggerActionDelegate == null)) {
                this.onEndtriggerActionDelegate = new EndOperationDelegate(this.OnEndtriggerAction);
            }
            if ((this.ontriggerActionCompletedDelegate == null)) {
                this.ontriggerActionCompletedDelegate = new System.Threading.SendOrPostCallback(this.OntriggerActionCompleted);
            }
            base.InvokeAsync(this.onBegintriggerActionDelegate, new object[] {
                        sessionID,
                        fileId,
                        actionId,
                        comment}, this.onEndtriggerActionDelegate, this.ontriggerActionCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        easyDMSTool.Doc4SOAP.followUpResponse easyDMSTool.Doc4SOAP.DOCUMENTSPortType.followUp(easyDMSTool.Doc4SOAP.followUpRequest request) {
            return base.Channel.followUp(request);
        }
        
        public void followUp(ref string sessionID, string fileId, System.Nullable<System.DateTime> timeAbsolute, bool isUTC, string comment) {
            easyDMSTool.Doc4SOAP.followUpRequest inValue = new easyDMSTool.Doc4SOAP.followUpRequest();
            inValue.sessionID = sessionID;
            inValue.fileId = fileId;
            inValue.timeAbsolute = timeAbsolute;
            inValue.isUTC = isUTC;
            inValue.comment = comment;
            easyDMSTool.Doc4SOAP.followUpResponse retVal = ((easyDMSTool.Doc4SOAP.DOCUMENTSPortType)(this)).followUp(inValue);
            sessionID = retVal.sessionID;
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult easyDMSTool.Doc4SOAP.DOCUMENTSPortType.BeginfollowUp(easyDMSTool.Doc4SOAP.followUpRequest request, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginfollowUp(request, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginfollowUp(string sessionID, string fileId, System.Nullable<System.DateTime> timeAbsolute, bool isUTC, string comment, System.AsyncCallback callback, object asyncState) {
            easyDMSTool.Doc4SOAP.followUpRequest inValue = new easyDMSTool.Doc4SOAP.followUpRequest();
            inValue.sessionID = sessionID;
            inValue.fileId = fileId;
            inValue.timeAbsolute = timeAbsolute;
            inValue.isUTC = isUTC;
            inValue.comment = comment;
            return ((easyDMSTool.Doc4SOAP.DOCUMENTSPortType)(this)).BeginfollowUp(inValue, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        easyDMSTool.Doc4SOAP.followUpResponse easyDMSTool.Doc4SOAP.DOCUMENTSPortType.EndfollowUp(System.IAsyncResult result) {
            return base.Channel.EndfollowUp(result);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public string EndfollowUp(System.IAsyncResult result) {
            easyDMSTool.Doc4SOAP.followUpResponse retVal = ((easyDMSTool.Doc4SOAP.DOCUMENTSPortType)(this)).EndfollowUp(result);
            return retVal.sessionID;
        }
        
        private System.IAsyncResult OnBeginfollowUp(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string sessionID = ((string)(inValues[0]));
            string fileId = ((string)(inValues[1]));
            System.Nullable<System.DateTime> timeAbsolute = ((System.Nullable<System.DateTime>)(inValues[2]));
            bool isUTC = ((bool)(inValues[3]));
            string comment = ((string)(inValues[4]));
            return this.BeginfollowUp(sessionID, fileId, timeAbsolute, isUTC, comment, callback, asyncState);
        }
        
        private object[] OnEndfollowUp(System.IAsyncResult result) {
            string retVal = this.EndfollowUp(result);
            return new object[] {
                    retVal};
        }
        
        private void OnfollowUpCompleted(object state) {
            if ((this.followUpCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.followUpCompleted(this, new followUpCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void followUpAsync(string sessionID, string fileId, System.Nullable<System.DateTime> timeAbsolute, bool isUTC, string comment) {
            this.followUpAsync(sessionID, fileId, timeAbsolute, isUTC, comment, null);
        }
        
        public void followUpAsync(string sessionID, string fileId, System.Nullable<System.DateTime> timeAbsolute, bool isUTC, string comment, object userState) {
            if ((this.onBeginfollowUpDelegate == null)) {
                this.onBeginfollowUpDelegate = new BeginOperationDelegate(this.OnBeginfollowUp);
            }
            if ((this.onEndfollowUpDelegate == null)) {
                this.onEndfollowUpDelegate = new EndOperationDelegate(this.OnEndfollowUp);
            }
            if ((this.onfollowUpCompletedDelegate == null)) {
                this.onfollowUpCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnfollowUpCompleted);
            }
            base.InvokeAsync(this.onBeginfollowUpDelegate, new object[] {
                        sessionID,
                        fileId,
                        timeAbsolute,
                        isUTC,
                        comment}, this.onEndfollowUpDelegate, this.onfollowUpCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        easyDMSTool.Doc4SOAP.sendFileAdHocResponse easyDMSTool.Doc4SOAP.DOCUMENTSPortType.sendFileAdHoc(easyDMSTool.Doc4SOAP.sendFileAdHocRequest request) {
            return base.Channel.sendFileAdHoc(request);
        }
        
        public void sendFileAdHoc(ref string sessionID, string fileId, string[] receivers, string sendMode, string task, bool backWhenFinished) {
            easyDMSTool.Doc4SOAP.sendFileAdHocRequest inValue = new easyDMSTool.Doc4SOAP.sendFileAdHocRequest();
            inValue.sessionID = sessionID;
            inValue.fileId = fileId;
            inValue.receivers = receivers;
            inValue.sendMode = sendMode;
            inValue.task = task;
            inValue.backWhenFinished = backWhenFinished;
            easyDMSTool.Doc4SOAP.sendFileAdHocResponse retVal = ((easyDMSTool.Doc4SOAP.DOCUMENTSPortType)(this)).sendFileAdHoc(inValue);
            sessionID = retVal.sessionID;
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult easyDMSTool.Doc4SOAP.DOCUMENTSPortType.BeginsendFileAdHoc(easyDMSTool.Doc4SOAP.sendFileAdHocRequest request, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginsendFileAdHoc(request, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginsendFileAdHoc(string sessionID, string fileId, string[] receivers, string sendMode, string task, bool backWhenFinished, System.AsyncCallback callback, object asyncState) {
            easyDMSTool.Doc4SOAP.sendFileAdHocRequest inValue = new easyDMSTool.Doc4SOAP.sendFileAdHocRequest();
            inValue.sessionID = sessionID;
            inValue.fileId = fileId;
            inValue.receivers = receivers;
            inValue.sendMode = sendMode;
            inValue.task = task;
            inValue.backWhenFinished = backWhenFinished;
            return ((easyDMSTool.Doc4SOAP.DOCUMENTSPortType)(this)).BeginsendFileAdHoc(inValue, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        easyDMSTool.Doc4SOAP.sendFileAdHocResponse easyDMSTool.Doc4SOAP.DOCUMENTSPortType.EndsendFileAdHoc(System.IAsyncResult result) {
            return base.Channel.EndsendFileAdHoc(result);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public string EndsendFileAdHoc(System.IAsyncResult result) {
            easyDMSTool.Doc4SOAP.sendFileAdHocResponse retVal = ((easyDMSTool.Doc4SOAP.DOCUMENTSPortType)(this)).EndsendFileAdHoc(result);
            return retVal.sessionID;
        }
        
        private System.IAsyncResult OnBeginsendFileAdHoc(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string sessionID = ((string)(inValues[0]));
            string fileId = ((string)(inValues[1]));
            string[] receivers = ((string[])(inValues[2]));
            string sendMode = ((string)(inValues[3]));
            string task = ((string)(inValues[4]));
            bool backWhenFinished = ((bool)(inValues[5]));
            return this.BeginsendFileAdHoc(sessionID, fileId, receivers, sendMode, task, backWhenFinished, callback, asyncState);
        }
        
        private object[] OnEndsendFileAdHoc(System.IAsyncResult result) {
            string retVal = this.EndsendFileAdHoc(result);
            return new object[] {
                    retVal};
        }
        
        private void OnsendFileAdHocCompleted(object state) {
            if ((this.sendFileAdHocCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.sendFileAdHocCompleted(this, new sendFileAdHocCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void sendFileAdHocAsync(string sessionID, string fileId, string[] receivers, string sendMode, string task, bool backWhenFinished) {
            this.sendFileAdHocAsync(sessionID, fileId, receivers, sendMode, task, backWhenFinished, null);
        }
        
        public void sendFileAdHocAsync(string sessionID, string fileId, string[] receivers, string sendMode, string task, bool backWhenFinished, object userState) {
            if ((this.onBeginsendFileAdHocDelegate == null)) {
                this.onBeginsendFileAdHocDelegate = new BeginOperationDelegate(this.OnBeginsendFileAdHoc);
            }
            if ((this.onEndsendFileAdHocDelegate == null)) {
                this.onEndsendFileAdHocDelegate = new EndOperationDelegate(this.OnEndsendFileAdHoc);
            }
            if ((this.onsendFileAdHocCompletedDelegate == null)) {
                this.onsendFileAdHocCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnsendFileAdHocCompleted);
            }
            base.InvokeAsync(this.onBeginsendFileAdHocDelegate, new object[] {
                        sessionID,
                        fileId,
                        receivers,
                        sendMode,
                        task,
                        backWhenFinished}, this.onEndsendFileAdHocDelegate, this.onsendFileAdHocCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        easyDMSTool.Doc4SOAP.getFileIdResponse easyDMSTool.Doc4SOAP.DOCUMENTSPortType.getFileId(easyDMSTool.Doc4SOAP.getFileIdRequest request) {
            return base.Channel.getFileId(request);
        }
        
        public string getFileId(ref string sessionID, string key) {
            easyDMSTool.Doc4SOAP.getFileIdRequest inValue = new easyDMSTool.Doc4SOAP.getFileIdRequest();
            inValue.sessionID = sessionID;
            inValue.key = key;
            easyDMSTool.Doc4SOAP.getFileIdResponse retVal = ((easyDMSTool.Doc4SOAP.DOCUMENTSPortType)(this)).getFileId(inValue);
            sessionID = retVal.sessionID;
            return retVal.fileId;
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult easyDMSTool.Doc4SOAP.DOCUMENTSPortType.BegingetFileId(easyDMSTool.Doc4SOAP.getFileIdRequest request, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BegingetFileId(request, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BegingetFileId(string sessionID, string key, System.AsyncCallback callback, object asyncState) {
            easyDMSTool.Doc4SOAP.getFileIdRequest inValue = new easyDMSTool.Doc4SOAP.getFileIdRequest();
            inValue.sessionID = sessionID;
            inValue.key = key;
            return ((easyDMSTool.Doc4SOAP.DOCUMENTSPortType)(this)).BegingetFileId(inValue, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        easyDMSTool.Doc4SOAP.getFileIdResponse easyDMSTool.Doc4SOAP.DOCUMENTSPortType.EndgetFileId(System.IAsyncResult result) {
            return base.Channel.EndgetFileId(result);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public string EndgetFileId(System.IAsyncResult result, out string fileId) {
            easyDMSTool.Doc4SOAP.getFileIdResponse retVal = ((easyDMSTool.Doc4SOAP.DOCUMENTSPortType)(this)).EndgetFileId(result);
            fileId = retVal.fileId;
            return retVal.sessionID;
        }
        
        private System.IAsyncResult OnBegingetFileId(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string sessionID = ((string)(inValues[0]));
            string key = ((string)(inValues[1]));
            return this.BegingetFileId(sessionID, key, callback, asyncState);
        }
        
        private object[] OnEndgetFileId(System.IAsyncResult result) {
            string fileId = this.GetDefaultValueForInitialization<string>();
            string retVal = this.EndgetFileId(result, out fileId);
            return new object[] {
                    fileId,
                    retVal};
        }
        
        private void OngetFileIdCompleted(object state) {
            if ((this.getFileIdCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.getFileIdCompleted(this, new getFileIdCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void getFileIdAsync(string sessionID, string key) {
            this.getFileIdAsync(sessionID, key, null);
        }
        
        public void getFileIdAsync(string sessionID, string key, object userState) {
            if ((this.onBegingetFileIdDelegate == null)) {
                this.onBegingetFileIdDelegate = new BeginOperationDelegate(this.OnBegingetFileId);
            }
            if ((this.onEndgetFileIdDelegate == null)) {
                this.onEndgetFileIdDelegate = new EndOperationDelegate(this.OnEndgetFileId);
            }
            if ((this.ongetFileIdCompletedDelegate == null)) {
                this.ongetFileIdCompletedDelegate = new System.Threading.SendOrPostCallback(this.OngetFileIdCompleted);
            }
            base.InvokeAsync(this.onBegingetFileIdDelegate, new object[] {
                        sessionID,
                        key}, this.onEndgetFileIdDelegate, this.ongetFileIdCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        easyDMSTool.Doc4SOAP.listPublicFoldersResponse easyDMSTool.Doc4SOAP.DOCUMENTSPortType.listPublicFolders(easyDMSTool.Doc4SOAP.listPublicFoldersRequest request) {
            return base.Channel.listPublicFolders(request);
        }
        
        public easyDMSTool.Doc4SOAP.FolderDescription2[] listPublicFolders(ref string sessionID, int typeOption, int sortOption) {
            easyDMSTool.Doc4SOAP.listPublicFoldersRequest inValue = new easyDMSTool.Doc4SOAP.listPublicFoldersRequest();
            inValue.sessionID = sessionID;
            inValue.typeOption = typeOption;
            inValue.sortOption = sortOption;
            easyDMSTool.Doc4SOAP.listPublicFoldersResponse retVal = ((easyDMSTool.Doc4SOAP.DOCUMENTSPortType)(this)).listPublicFolders(inValue);
            sessionID = retVal.sessionID;
            return retVal.folders;
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult easyDMSTool.Doc4SOAP.DOCUMENTSPortType.BeginlistPublicFolders(easyDMSTool.Doc4SOAP.listPublicFoldersRequest request, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginlistPublicFolders(request, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginlistPublicFolders(string sessionID, int typeOption, int sortOption, System.AsyncCallback callback, object asyncState) {
            easyDMSTool.Doc4SOAP.listPublicFoldersRequest inValue = new easyDMSTool.Doc4SOAP.listPublicFoldersRequest();
            inValue.sessionID = sessionID;
            inValue.typeOption = typeOption;
            inValue.sortOption = sortOption;
            return ((easyDMSTool.Doc4SOAP.DOCUMENTSPortType)(this)).BeginlistPublicFolders(inValue, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        easyDMSTool.Doc4SOAP.listPublicFoldersResponse easyDMSTool.Doc4SOAP.DOCUMENTSPortType.EndlistPublicFolders(System.IAsyncResult result) {
            return base.Channel.EndlistPublicFolders(result);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public string EndlistPublicFolders(System.IAsyncResult result, out easyDMSTool.Doc4SOAP.FolderDescription2[] folders) {
            easyDMSTool.Doc4SOAP.listPublicFoldersResponse retVal = ((easyDMSTool.Doc4SOAP.DOCUMENTSPortType)(this)).EndlistPublicFolders(result);
            folders = retVal.folders;
            return retVal.sessionID;
        }
        
        private System.IAsyncResult OnBeginlistPublicFolders(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string sessionID = ((string)(inValues[0]));
            int typeOption = ((int)(inValues[1]));
            int sortOption = ((int)(inValues[2]));
            return this.BeginlistPublicFolders(sessionID, typeOption, sortOption, callback, asyncState);
        }
        
        private object[] OnEndlistPublicFolders(System.IAsyncResult result) {
            easyDMSTool.Doc4SOAP.FolderDescription2[] folders = this.GetDefaultValueForInitialization<easyDMSTool.Doc4SOAP.FolderDescription2[]>();
            string retVal = this.EndlistPublicFolders(result, out folders);
            return new object[] {
                    folders,
                    retVal};
        }
        
        private void OnlistPublicFoldersCompleted(object state) {
            if ((this.listPublicFoldersCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.listPublicFoldersCompleted(this, new listPublicFoldersCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void listPublicFoldersAsync(string sessionID, int typeOption, int sortOption) {
            this.listPublicFoldersAsync(sessionID, typeOption, sortOption, null);
        }
        
        public void listPublicFoldersAsync(string sessionID, int typeOption, int sortOption, object userState) {
            if ((this.onBeginlistPublicFoldersDelegate == null)) {
                this.onBeginlistPublicFoldersDelegate = new BeginOperationDelegate(this.OnBeginlistPublicFolders);
            }
            if ((this.onEndlistPublicFoldersDelegate == null)) {
                this.onEndlistPublicFoldersDelegate = new EndOperationDelegate(this.OnEndlistPublicFolders);
            }
            if ((this.onlistPublicFoldersCompletedDelegate == null)) {
                this.onlistPublicFoldersCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnlistPublicFoldersCompleted);
            }
            base.InvokeAsync(this.onBeginlistPublicFoldersDelegate, new object[] {
                        sessionID,
                        typeOption,
                        sortOption}, this.onEndlistPublicFoldersDelegate, this.onlistPublicFoldersCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        easyDMSTool.Doc4SOAP.getFilingPlansResponse easyDMSTool.Doc4SOAP.DOCUMENTSPortType.getFilingPlans(easyDMSTool.Doc4SOAP.getFilingPlansRequest request) {
            return base.Channel.getFilingPlans(request);
        }
        
        public easyDMSTool.Doc4SOAP.FilingPlan[] getFilingPlans(ref string sessionID) {
            easyDMSTool.Doc4SOAP.getFilingPlansRequest inValue = new easyDMSTool.Doc4SOAP.getFilingPlansRequest();
            inValue.sessionID = sessionID;
            easyDMSTool.Doc4SOAP.getFilingPlansResponse retVal = ((easyDMSTool.Doc4SOAP.DOCUMENTSPortType)(this)).getFilingPlans(inValue);
            sessionID = retVal.sessionID;
            return retVal.filingPlans;
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult easyDMSTool.Doc4SOAP.DOCUMENTSPortType.BegingetFilingPlans(easyDMSTool.Doc4SOAP.getFilingPlansRequest request, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BegingetFilingPlans(request, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BegingetFilingPlans(string sessionID, System.AsyncCallback callback, object asyncState) {
            easyDMSTool.Doc4SOAP.getFilingPlansRequest inValue = new easyDMSTool.Doc4SOAP.getFilingPlansRequest();
            inValue.sessionID = sessionID;
            return ((easyDMSTool.Doc4SOAP.DOCUMENTSPortType)(this)).BegingetFilingPlans(inValue, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        easyDMSTool.Doc4SOAP.getFilingPlansResponse easyDMSTool.Doc4SOAP.DOCUMENTSPortType.EndgetFilingPlans(System.IAsyncResult result) {
            return base.Channel.EndgetFilingPlans(result);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public string EndgetFilingPlans(System.IAsyncResult result, out easyDMSTool.Doc4SOAP.FilingPlan[] filingPlans) {
            easyDMSTool.Doc4SOAP.getFilingPlansResponse retVal = ((easyDMSTool.Doc4SOAP.DOCUMENTSPortType)(this)).EndgetFilingPlans(result);
            filingPlans = retVal.filingPlans;
            return retVal.sessionID;
        }
        
        private System.IAsyncResult OnBegingetFilingPlans(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string sessionID = ((string)(inValues[0]));
            return this.BegingetFilingPlans(sessionID, callback, asyncState);
        }
        
        private object[] OnEndgetFilingPlans(System.IAsyncResult result) {
            easyDMSTool.Doc4SOAP.FilingPlan[] filingPlans = this.GetDefaultValueForInitialization<easyDMSTool.Doc4SOAP.FilingPlan[]>();
            string retVal = this.EndgetFilingPlans(result, out filingPlans);
            return new object[] {
                    filingPlans,
                    retVal};
        }
        
        private void OngetFilingPlansCompleted(object state) {
            if ((this.getFilingPlansCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.getFilingPlansCompleted(this, new getFilingPlansCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void getFilingPlansAsync(string sessionID) {
            this.getFilingPlansAsync(sessionID, null);
        }
        
        public void getFilingPlansAsync(string sessionID, object userState) {
            if ((this.onBegingetFilingPlansDelegate == null)) {
                this.onBegingetFilingPlansDelegate = new BeginOperationDelegate(this.OnBegingetFilingPlans);
            }
            if ((this.onEndgetFilingPlansDelegate == null)) {
                this.onEndgetFilingPlansDelegate = new EndOperationDelegate(this.OnEndgetFilingPlans);
            }
            if ((this.ongetFilingPlansCompletedDelegate == null)) {
                this.ongetFilingPlansCompletedDelegate = new System.Threading.SendOrPostCallback(this.OngetFilingPlansCompleted);
            }
            base.InvokeAsync(this.onBegingetFilingPlansDelegate, new object[] {
                        sessionID}, this.onEndgetFilingPlansDelegate, this.ongetFilingPlansCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        easyDMSTool.Doc4SOAP.getFilingPlanXMLResponse easyDMSTool.Doc4SOAP.DOCUMENTSPortType.getFilingPlanXML(easyDMSTool.Doc4SOAP.getFilingPlanXMLRequest request) {
            return base.Channel.getFilingPlanXML(request);
        }
        
        public string getFilingPlanXML(ref string sessionID, string name) {
            easyDMSTool.Doc4SOAP.getFilingPlanXMLRequest inValue = new easyDMSTool.Doc4SOAP.getFilingPlanXMLRequest();
            inValue.sessionID = sessionID;
            inValue.name = name;
            easyDMSTool.Doc4SOAP.getFilingPlanXMLResponse retVal = ((easyDMSTool.Doc4SOAP.DOCUMENTSPortType)(this)).getFilingPlanXML(inValue);
            sessionID = retVal.sessionID;
            return retVal.filingPlanXml;
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult easyDMSTool.Doc4SOAP.DOCUMENTSPortType.BegingetFilingPlanXML(easyDMSTool.Doc4SOAP.getFilingPlanXMLRequest request, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BegingetFilingPlanXML(request, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BegingetFilingPlanXML(string sessionID, string name, System.AsyncCallback callback, object asyncState) {
            easyDMSTool.Doc4SOAP.getFilingPlanXMLRequest inValue = new easyDMSTool.Doc4SOAP.getFilingPlanXMLRequest();
            inValue.sessionID = sessionID;
            inValue.name = name;
            return ((easyDMSTool.Doc4SOAP.DOCUMENTSPortType)(this)).BegingetFilingPlanXML(inValue, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        easyDMSTool.Doc4SOAP.getFilingPlanXMLResponse easyDMSTool.Doc4SOAP.DOCUMENTSPortType.EndgetFilingPlanXML(System.IAsyncResult result) {
            return base.Channel.EndgetFilingPlanXML(result);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public string EndgetFilingPlanXML(System.IAsyncResult result, out string filingPlanXml) {
            easyDMSTool.Doc4SOAP.getFilingPlanXMLResponse retVal = ((easyDMSTool.Doc4SOAP.DOCUMENTSPortType)(this)).EndgetFilingPlanXML(result);
            filingPlanXml = retVal.filingPlanXml;
            return retVal.sessionID;
        }
        
        private System.IAsyncResult OnBegingetFilingPlanXML(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string sessionID = ((string)(inValues[0]));
            string name = ((string)(inValues[1]));
            return this.BegingetFilingPlanXML(sessionID, name, callback, asyncState);
        }
        
        private object[] OnEndgetFilingPlanXML(System.IAsyncResult result) {
            string filingPlanXml = this.GetDefaultValueForInitialization<string>();
            string retVal = this.EndgetFilingPlanXML(result, out filingPlanXml);
            return new object[] {
                    filingPlanXml,
                    retVal};
        }
        
        private void OngetFilingPlanXMLCompleted(object state) {
            if ((this.getFilingPlanXMLCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.getFilingPlanXMLCompleted(this, new getFilingPlanXMLCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void getFilingPlanXMLAsync(string sessionID, string name) {
            this.getFilingPlanXMLAsync(sessionID, name, null);
        }
        
        public void getFilingPlanXMLAsync(string sessionID, string name, object userState) {
            if ((this.onBegingetFilingPlanXMLDelegate == null)) {
                this.onBegingetFilingPlanXMLDelegate = new BeginOperationDelegate(this.OnBegingetFilingPlanXML);
            }
            if ((this.onEndgetFilingPlanXMLDelegate == null)) {
                this.onEndgetFilingPlanXMLDelegate = new EndOperationDelegate(this.OnEndgetFilingPlanXML);
            }
            if ((this.ongetFilingPlanXMLCompletedDelegate == null)) {
                this.ongetFilingPlanXMLCompletedDelegate = new System.Threading.SendOrPostCallback(this.OngetFilingPlanXMLCompleted);
            }
            base.InvokeAsync(this.onBegingetFilingPlanXMLDelegate, new object[] {
                        sessionID,
                        name}, this.onEndgetFilingPlanXMLDelegate, this.ongetFilingPlanXMLCompletedDelegate, userState);
        }
    }
}
