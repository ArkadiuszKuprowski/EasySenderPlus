//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.18444
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// 
// This source code was auto-generated by Microsoft.VSDesigner, Version 4.0.30319.18444.
// 
#pragma warning disable 1591

namespace easyDMSTool.Converter {
    using System;
    using System.Web.Services;
    using System.Diagnostics;
    using System.Web.Services.Protocols;
    using System.Xml.Serialization;
    using System.ComponentModel;
    
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Web.Services.WebServiceBindingAttribute(Name="ConverterPortBinding", Namespace="http://converter.webpdf.net/")]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(options))]
    public partial class ConverterService : System.Web.Services.Protocols.SoapHttpClientProtocol {
        
        private System.Threading.SendOrPostCallback convertDocumentSimpleOperationCompleted;
        
        private System.Threading.SendOrPostCallback convertDocumentOperationCompleted;
        
        private System.Threading.SendOrPostCallback convertDocumentURLOperationCompleted;
        
        private bool useDefaultCredentialsSetExplicitly;
        
        /// <remarks/>
        public ConverterService() {
            this.Url = global::easyDMSTool.Properties.Settings.Default.easyDMSTool_Converter_ConverterService;
            if ((this.IsLocalFileSystemWebService(this.Url) == true)) {
                this.UseDefaultCredentials = true;
                this.useDefaultCredentialsSetExplicitly = false;
            }
            else {
                this.useDefaultCredentialsSetExplicitly = true;
            }
        }
        
        public new string Url {
            get {
                return base.Url;
            }
            set {
                if ((((this.IsLocalFileSystemWebService(base.Url) == true) 
                            && (this.useDefaultCredentialsSetExplicitly == false)) 
                            && (this.IsLocalFileSystemWebService(value) == false))) {
                    base.UseDefaultCredentials = false;
                }
                base.Url = value;
            }
        }
        
        public new bool UseDefaultCredentials {
            get {
                return base.UseDefaultCredentials;
            }
            set {
                base.UseDefaultCredentials = value;
                this.useDefaultCredentialsSetExplicitly = true;
            }
        }
        
        /// <remarks/>
        public event convertDocumentSimpleCompletedEventHandler convertDocumentSimpleCompleted;
        
        /// <remarks/>
        public event convertDocumentCompletedEventHandler convertDocumentCompleted;
        
        /// <remarks/>
        public event convertDocumentURLCompletedEventHandler convertDocumentURLCompleted;
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("", RequestNamespace="http://converter.webpdf.net/", ResponseNamespace="http://converter.webpdf.net/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute("return", Form=System.Xml.Schema.XmlSchemaForm.Unqualified, DataType="base64Binary", IsNullable=true)]
        public byte[] convertDocumentSimple([System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] string sourceExtension, [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] string targetExtension, [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] string options, [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified, DataType="base64Binary")] byte[] fileContent) {
            object[] results = this.Invoke("convertDocumentSimple", new object[] {
                        sourceExtension,
                        targetExtension,
                        options,
                        fileContent});
            return ((byte[])(results[0]));
        }
        
        /// <remarks/>
        public void convertDocumentSimpleAsync(string sourceExtension, string targetExtension, string options, byte[] fileContent) {
            this.convertDocumentSimpleAsync(sourceExtension, targetExtension, options, fileContent, null);
        }
        
        /// <remarks/>
        public void convertDocumentSimpleAsync(string sourceExtension, string targetExtension, string options, byte[] fileContent, object userState) {
            if ((this.convertDocumentSimpleOperationCompleted == null)) {
                this.convertDocumentSimpleOperationCompleted = new System.Threading.SendOrPostCallback(this.OnconvertDocumentSimpleOperationCompleted);
            }
            this.InvokeAsync("convertDocumentSimple", new object[] {
                        sourceExtension,
                        targetExtension,
                        options,
                        fileContent}, this.convertDocumentSimpleOperationCompleted, userState);
        }
        
        private void OnconvertDocumentSimpleOperationCompleted(object arg) {
            if ((this.convertDocumentSimpleCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.convertDocumentSimpleCompleted(this, new convertDocumentSimpleCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("", RequestNamespace="http://converter.webpdf.net/", ResponseNamespace="http://converter.webpdf.net/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute("return", Form=System.Xml.Schema.XmlSchemaForm.Unqualified, DataType="base64Binary", IsNullable=true)]
        public byte[] convertDocument([System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] converterOptions options, [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified, DataType="base64Binary")] byte[] fileContent) {
            object[] results = this.Invoke("convertDocument", new object[] {
                        options,
                        fileContent});
            return ((byte[])(results[0]));
        }
        
        /// <remarks/>
        public void convertDocumentAsync(converterOptions options, byte[] fileContent) {
            this.convertDocumentAsync(options, fileContent, null);
        }
        
        /// <remarks/>
        public void convertDocumentAsync(converterOptions options, byte[] fileContent, object userState) {
            if ((this.convertDocumentOperationCompleted == null)) {
                this.convertDocumentOperationCompleted = new System.Threading.SendOrPostCallback(this.OnconvertDocumentOperationCompleted);
            }
            this.InvokeAsync("convertDocument", new object[] {
                        options,
                        fileContent}, this.convertDocumentOperationCompleted, userState);
        }
        
        private void OnconvertDocumentOperationCompleted(object arg) {
            if ((this.convertDocumentCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.convertDocumentCompleted(this, new convertDocumentCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("", RequestNamespace="http://converter.webpdf.net/", ResponseNamespace="http://converter.webpdf.net/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute("return", Form=System.Xml.Schema.XmlSchemaForm.Unqualified, DataType="base64Binary", IsNullable=true)]
        public byte[] convertDocumentURL([System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] converterOptions options, [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified, DataType="anyURI")] string fileURL) {
            object[] results = this.Invoke("convertDocumentURL", new object[] {
                        options,
                        fileURL});
            return ((byte[])(results[0]));
        }
        
        /// <remarks/>
        public void convertDocumentURLAsync(converterOptions options, string fileURL) {
            this.convertDocumentURLAsync(options, fileURL, null);
        }
        
        /// <remarks/>
        public void convertDocumentURLAsync(converterOptions options, string fileURL, object userState) {
            if ((this.convertDocumentURLOperationCompleted == null)) {
                this.convertDocumentURLOperationCompleted = new System.Threading.SendOrPostCallback(this.OnconvertDocumentURLOperationCompleted);
            }
            this.InvokeAsync("convertDocumentURL", new object[] {
                        options,
                        fileURL}, this.convertDocumentURLOperationCompleted, userState);
        }
        
        private void OnconvertDocumentURLOperationCompleted(object arg) {
            if ((this.convertDocumentURLCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.convertDocumentURLCompleted(this, new convertDocumentURLCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        public new void CancelAsync(object userState) {
            base.CancelAsync(userState);
        }
        
        private bool IsLocalFileSystemWebService(string url) {
            if (((url == null) 
                        || (url == string.Empty))) {
                return false;
            }
            System.Uri wsUri = new System.Uri(url);
            if (((wsUri.Port >= 1024) 
                        && (string.Compare(wsUri.Host, "localHost", System.StringComparison.OrdinalIgnoreCase) == 0))) {
                return true;
            }
            return false;
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.18408")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://converter.webpdf.net/")]
    public partial class converterOptions : options {
        
        private string converterOptions1Field;
        
        private string sourceExtensionField;
        
        private string targetExtensionField;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute("converterOptions", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public string converterOptions1 {
            get {
                return this.converterOptions1Field;
            }
            set {
                this.converterOptions1Field = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public string sourceExtension {
            get {
                return this.sourceExtensionField;
            }
            set {
                this.sourceExtensionField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public string targetExtension {
            get {
                return this.targetExtensionField;
            }
            set {
                this.targetExtensionField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(converterOptions))]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.18408")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://converter.webpdf.net/")]
    public abstract partial class options {
        
        private string serviceOptionsField;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public string serviceOptions {
            get {
                return this.serviceOptionsField;
            }
            set {
                this.serviceOptionsField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408")]
    public delegate void convertDocumentSimpleCompletedEventHandler(object sender, convertDocumentSimpleCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class convertDocumentSimpleCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal convertDocumentSimpleCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public byte[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((byte[])(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408")]
    public delegate void convertDocumentCompletedEventHandler(object sender, convertDocumentCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class convertDocumentCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal convertDocumentCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public byte[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((byte[])(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408")]
    public delegate void convertDocumentURLCompletedEventHandler(object sender, convertDocumentURLCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class convertDocumentURLCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal convertDocumentURLCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public byte[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((byte[])(this.results[0]));
            }
        }
    }
}

#pragma warning restore 1591